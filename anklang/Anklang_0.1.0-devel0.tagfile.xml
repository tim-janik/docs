<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.6">
  <compound kind="file">
    <name>api.hh</name>
    <filename>api_8hh.html</filename>
    <includes id="value_8hh" name="value.hh" local="no" imported="no">ase/value.hh</includes>
    <class kind="class">Ase::SharedBase</class>
    <class kind="struct">Ase::Choice</class>
    <class kind="struct">Ase::TelemetryField</class>
    <class kind="class">Ase::Emittable</class>
    <class kind="class">Ase::Property</class>
    <class kind="class">Ase::Object</class>
    <class kind="class">Ase::Gadget</class>
    <class kind="struct">Ase::DeviceInfo</class>
    <class kind="class">Ase::Device</class>
    <class kind="class">Ase::NativeDevice</class>
    <class kind="struct">Ase::ClipNote</class>
    <class kind="class">Ase::Clip</class>
    <class kind="class">Ase::Track</class>
    <class kind="struct">Ase::ProbeFeatures</class>
    <class kind="class">Ase::Monitor</class>
    <class kind="class">Ase::Project</class>
    <class kind="struct">Ase::Resource</class>
    <class kind="class">Ase::ResourceCrawler</class>
    <class kind="struct">Ase::UserNote</class>
    <class kind="struct">Ase::TelemetrySegment</class>
    <class kind="class">Ase::Server</class>
    <namespace>Ase</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Error</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4fb5e7f1b391bd36a33d0c0c7c6d15f1</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a6ec6e2bae32b5ef905712f7745aa5774">PERMS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1acf3882f1c43ab22bff0bd9d82d83251b">IO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afe39af6ff8b4f14f5759e4d70bba6ebc">NO_MEMORY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a41e55833795c7b587b2ca4530eb28609">NO_SPACE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a74135d1a15c72675967bfde620c8eac9">NO_FILES</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a5f1c12a4958851c01a46277386988903">MANY_FILES</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ac0cc02c3b3d55abb7bfb49ddbb4866c8">RETRY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afe7bfa40ea55360bde0ae0004e704404">NOT_DIRECTORY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1acd54d99c8efb3c2db794197045f5b83c">FILE_NOT_FOUND</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a2164d5e71896efedb40b7eb2de01df33">FILE_IS_DIR</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a8f20045e0839c2e258547ee09fc961a0">FILE_EXISTS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a89d825caca6f736d792b79cb3a0b8310">FILE_BUSY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a182fa1c42a2468f8488e6dcf75a81b81">INTERNAL</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aaa528108d473f663f8947b4d16e7c13c">UNIMPLEMENTED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a54d7470596ab9b7b1585f3dba645bcc3">FILE_EOF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afb170ffea05221be6d4e256c6a5b0266">FILE_OPEN_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a26127a5de2f295b0921ad79d1e5676c4">FILE_SEEK_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aa2ad53799b6678410eab18f554e548fc">FILE_READ_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a94a8336290023b80ea4e41118b98a814">FILE_WRITE_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a551530ec1af53eaa77c1bde0ca457b4b">PARSE_ERROR</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a8b0ec364f1d5bbda4a5b3e806d582cac">NO_HEADER</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ab696091e308cf663b35a2fa480cc9cb0">NO_SEEK_INFO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a5b842e34358567f0f7b9dea819901314">NO_DATA_AVAILABLE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1af6922af51c2704fac813dae7ae5a1054">DATA_CORRUPT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aa2ec997d901283f152b9c635c397f927">WRONG_N_CHANNELS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ac2dc9bce00424e2584c13fdc7234f379">FORMAT_INVALID</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a420f8238fe721a3c616f83e65277581f">FORMAT_UNKNOWN</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aeff6545a8bc8350b6dbbdc25d3c31dcb">DATA_UNMATCHED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aff333337d41d206e66856a8e550b2902">CODEC_FAILURE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ad1c14340c736240b99b365735050f40f">BROKEN_ARCHIVE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a74928d4a00e139f25802ef921dcbc41d">BAD_PROJECT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a762a9359acab61f37f449ba10949f07c">NO_PROJECT_DIR</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1af4724a191551c1036f76fdb39f4af9ee">DEVICE_NOT_AVAILABLE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aa5c5bb644b230a836a8898c370a49b49">DEVICE_ASYNC</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a9b40004e356bbecf8c222684be0988c7">DEVICE_BUSY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a2a66bfc469027fb1eb2b89f3d1ff3dd7">DEVICE_FORMAT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afca4b58205c5a9c54fae423fe8130a9c">DEVICE_BUFFER</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ae49d78dab6b29676a869ba23bd973c6f">DEVICE_LATENCY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aeac488f8ca57e6ed7048c9f5de6bf435">DEVICE_CHANNELS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a28531543945d4828d725897850c8b71c">DEVICE_FREQUENCY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aedf71f6b1068394e4d1c430b10d7714b">DEVICES_MISMATCH</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a19c0eee4dadfbb37a7181ba0fb90cf14">WAVE_NOT_FOUND</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ae495af356a6a8807b18ccab127285042">INVALID_PROPERTY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a761acd83f4260e723405b79c00378edc">INVALID_MIDI_CONTROL</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a799e0cdf564b2b2ab039fbc276a9ff49">OPERATION_BUSY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MusicalTuning</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afb020f0d6689d7b591de4804efa1f3bb</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba5de0cf55bef6d023144c56cf98847797">OD_12_TET</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba55f19e37cdfe48d23fe64d89d708cc73">OD_7_TET</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba519e4aec9a707b6cc694ba9d441c0cf2">OD_5_TET</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbab393242d7133ffa6fc6d2d9588cb1823">DIATONIC_SCALE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaaf9408dcd8842edec16ad748cc20f5f8">INDIAN_SCALE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbab3a25ce854ccbe3bfaa93c83f90c3f6c">PYTHAGOREAN_TUNING</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaeb662fd05387733a5a8785a340701ca5">PENTATONIC_5_LIMIT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba4bb3118c82de8b2befa4872dde013cd8">PENTATONIC_BLUES</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba706500dc34312d6a6abcab8a09431c29">PENTATONIC_GOGO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaef1c42481c096299904f8d050496e180">QUARTER_COMMA_MEANTONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba2a904bc722cd89fcbd966df8f34405de">SILBERMANN_SORGE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba61d59bdc69c4f679bd2c9deb1351f2c0">WERCKMEISTER_3</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba5546b7489ed7b22b5536a7b3e204ce76">WERCKMEISTER_4</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba88b9cea5f6f934b43cec098b604e031a">WERCKMEISTER_5</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba64ceddf02cea6432501c8c3f889beacf">WERCKMEISTER_6</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaaf513a1e740a1224d617b8d87afcb674">KIRNBERGER_3</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba85f61422ff6569131e86ce73f232e0d3">YOUNG</enumvalue>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_error_blurb</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a71404f31e4992a365d47a9966be9adaf</anchor>
      <arglist>(Error error)</arglist>
    </member>
    <member kind="function">
      <type>ChoiceS &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9397694124879a4ed23ef9f6304e4b46</anchor>
      <arglist>(ChoiceS &amp;choices, Choice &amp;&amp;newchoice)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atomics.hh</name>
    <filename>atomics_8hh.html</filename>
    <includes id="platform_8hh" name="platform.hh" local="no" imported="no">ase/platform.hh</includes>
    <class kind="class">Ase::AtomicIntrusiveStack</class>
    <class kind="struct">Ase::MpmcStack</class>
    <class kind="class">Ase::AtomicBits</class>
    <namespace>Ase</namespace>
    <member kind="typedef">
      <type>boost::atomic&lt; T &gt;</type>
      <name>Atomic</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0189d15106eab0bf01eaf3e62b43bd80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>backtrace.hh</name>
    <filename>backtrace_8hh.html</filename>
    <includes id="platform_8hh" name="platform.hh" local="no" imported="no">ase/platform.hh</includes>
    <class kind="struct">Ase::BacktraceCommand</class>
    <namespace>Ase</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ASE_PRINT_BACKTRACE</name>
      <anchorfile>backtrace_8hh.html</anchorfile>
      <anchor>aa8a50295f8eb181e4834589138739733</anchor>
      <arglist>(file, line, func)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blob.hh</name>
    <filename>blob_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <class kind="class">Ase::Blob</class>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>uint8 *</type>
      <name>zintern_decompress</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a956fda00878cc83ed33b63d9c356bdc0</anchor>
      <arglist>(unsigned int decompressed_size, const unsigned char *cdata, unsigned int cdata_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zintern_free</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>addd7b113764707a8c835dcaeda4a8f12</anchor>
      <arglist>(uint8 *dc_data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>clapdevice.hh</name>
    <filename>clapdevice_8hh.html</filename>
    <includes id="device_8hh" name="device.hh" local="no" imported="no">ase/device.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>clapplugin.hh</name>
    <filename>clapplugin_8hh.html</filename>
    <includes id="device_8hh" name="device.hh" local="no" imported="no">ase/device.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>clip.hh</name>
    <filename>clip_8hh.html</filename>
    <includes id="project_8hh" name="project.hh" local="no" imported="no">ase/project.hh</includes>
    <includes id="eventlist_8hh" name="eventlist.hh" local="no" imported="no">ase/eventlist.hh</includes>
    <includes id="midievent_8hh" name="midievent.hh" local="no" imported="no">ase/midievent.hh</includes>
    <class kind="class">Ase::ClipImpl::Generator</class>
    <namespace>Ase</namespace>
    <member kind="variable">
      <type>constexpr const uint</type>
      <name>MIDI_NOTE_ID_FIRST</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a577e1c76ca5d824638c2747072798b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr const uint</type>
      <name>MIDI_NOTE_ID_LAST</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a541a1a544b7ff74a13d00bf2bc15ed87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>combo.hh</name>
    <filename>combo_8hh.html</filename>
    <includes id="processor_8hh" name="processor.hh" local="no" imported="no">ase/processor.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>compress.hh</name>
    <filename>compress_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>crawler.hh</name>
    <filename>crawler_8hh.html</filename>
    <includes id="gadget_8hh" name="gadget.hh" local="no" imported="no">ase/gadget.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>cxxaux.hh</name>
    <filename>cxxaux_8hh.html</filename>
    <class kind="struct">Ase::VirtualBase</class>
    <class kind="class">Ase::FriendAllocator</class>
    <class kind="class">Ase::Persistent</class>
    <class kind="struct">Ase::Id32</class>
    <namespace>Ase</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ASE_CPP_STRINGIFY</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>ad16699bbd5436ad8493adcd12594fc74</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_CPP_PASTE2</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a328d94fede199f7d13d2b6247f278e46</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ISLIKELY</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>aa661a83cbaac2678d54746300656805f</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_UNLIKELY</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a9455b164b7470c55fdd36656179a8823</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ABS</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>afa3cb36d8fdd1f82817c6d44c1f42e24</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_MIN</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a3eff58c8646005ed352054549756dba5</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_MAX</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a2ca641fd4b11b6c4b931451796013b46</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_CLAMP</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a00ccc6f16e8ce8b2280b26ddddfdb577</anchor>
      <arglist>(v, mi, ma)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ARRAY_SIZE</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a70c74259fc0aeb706706896623047301</anchor>
      <arglist>(array)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ALIGN</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a3cdea89f3e5bb89e63b153db30f7451e</anchor>
      <arglist>(size, base)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_RETURN_UNLESS</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a8675bc64fb9f02db825ff57322981cad</anchor>
      <arglist>(cond,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ASSERT_RETURN</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a41787695ab8d7657d76ae8d7fb340f02</anchor>
      <arglist>(expr,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ASSERT_RETURN_UNREACHED</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>adc6bbcb57ff62beb966430879cf60c35</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ASSERT_WARN</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a668b59546a0b3b168ce6441d12642abc</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_ASSERT_PARANOID</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a3b5a7382d91c1fadf08ae67804c33cdc</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_CLASS_NON_COPYABLE</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>ab86fc738dd5607531bf3f54e08023900</anchor>
      <arglist>(ClassName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_STRUCT_DECLS</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>af709aa14f4ce65f14f35573e4c58f5e9</anchor>
      <arglist>(Klass)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_CLASS_DECLS</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>ae2616b5021c7f9bee413e62e0737234f</anchor>
      <arglist>(Klass)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_DEFINE_MAKE_SHARED</name>
      <anchorfile>cxxaux_8hh.html</anchorfile>
      <anchor>a4417033ca28b44b165ca4a2cec5a5667</anchor>
      <arglist>(CLASS)</arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>uint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad69887c4e893bf027b4aa6237d8c08d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>uint8</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a37adf90a66bbf9858a98d9f71c561ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>uint16</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab07ddec9dc448acf286801fc6616b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>uint32</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad2f22b1cad158ece02d3f37787ad39f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>uint64</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a13d169f5b0e9b257c6964c67ae75ec91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int8_t</type>
      <name>int8</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a410f3a65cc263d7ae575d59a773160ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>int16</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2df8b5e281ce001a792ce0eaa6021f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>int32</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a23ae29d011ad0ced77506ac09a95d148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>int64</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a478a1328a0bd673e18c58943f4bc0655</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>unichar</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a835f07c61fc175465672e82d33d89569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>String</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>abcfad6508b790c2bc6361655cf199a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; String &gt;</type>
      <name>StringS</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a444d3b63203b49bc45b14c9d0761453b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ::std::enable_if&lt; value, bool &gt;::type</type>
      <name>REQUIRES</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4e2ef1acd7d1f0a3ad4dff73ff1af815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ::std::enable_if&lt; value, void &gt;::type</type>
      <name>REQUIRESv</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5bd6d9c354c4d20df6b323404b41abdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_demangle_cxx</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a486035df582d0adb799d913aa11b7a22</anchor>
      <arglist>(const char *mangled_identifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9e287795697d626b0570ba27d540cd5b</anchor>
      <arglist>((__pure__)) static inline String typeid_name()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adc10ef3ffd73bfec6be7629171a77945</anchor>
      <arglist>((__pure__)) static inline String typeid_name(T &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertion_failed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5489f074b88f07768641ea003b832711</anchor>
      <arglist>(const std::string &amp;msg=&quot;&quot;, const char *file=__builtin_FILE(), int line=__builtin_LINE(), const char *func=__builtin_FUNCTION())</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>constexpr_equals</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5f4ec88fb290fef20c572a11e8d578ff</anchor>
      <arglist>(const char *a, const char *b, size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae414438be0c38da8b2d84f76554fc69a</anchor>
      <arglist>((always_inline)) inline void new _inplace(Type &amp;typemem</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2c4aad366b114ede3c423b9ad1c79637</anchor>
      <arglist>((always_inline)) inline void delete_inplace(Type &amp;typemem)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad5ffcbcfd927e291d5ef549a58ac8223</anchor>
      <arglist>(Source *object)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a23a0a1476a86e15dfe9bae89489fdb81</anchor>
      <arglist>(const Source *object)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3a10fba89f7d2eaec3091a1b317b41c7</anchor>
      <arglist>(std::shared_ptr&lt; Source &gt; &amp;sptr)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9fba79b76569212ec8af28d952b21ee5</anchor>
      <arglist>(const std::shared_ptr&lt; Source &gt; &amp;sptr)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; typename std::remove_pointer&lt; Source &gt;::type &gt;</type>
      <name>shared_ptr_from</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5fa0b0155f01f85957dfc4095c6ffef3</anchor>
      <arglist>(Source *object)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; C &gt;</type>
      <name>weak_ptr_fetch_or_create</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4d3a22404f88f332ed125121c2b12b36</anchor>
      <arglist>(std::weak_ptr&lt; C &gt; &amp;wptr, const std::function&lt; std::shared_ptr&lt; C &gt;()&gt; &amp;ctor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>datautils.hh</name>
    <filename>datautils_8hh.html</filename>
    <includes id="signalmath_8hh" name="signalmath.hh" local="no" imported="no">ase/signalmath.hh</includes>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>float</type>
      <name>square_sum</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1c5608b4ee5a105527f3a6ddbffdd47e</anchor>
      <arglist>(uint n_values, const float *ivalues)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square_max</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9041e0025b73f9ad84b70ef59ba8f57d</anchor>
      <arglist>(uint n_values, const float *ivalues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>floatfill</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1cc46db2ab07dd365ae5899ded6952c3</anchor>
      <arglist>(float *dst, float f, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fast_copy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af14c3702e1c5fc773cc2ef8b5f567c6e</anchor>
      <arglist>(size_t n, float *d, const float *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fast_copy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aabc82555a0b73f673ccee2ea3dbaf1cb</anchor>
      <arglist>(size_t n, uint32_t *d, const uint32_t *s)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const uint</type>
      <name>AUDIO_BLOCK_FLOAT_ZEROS_SIZE</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0b280adca55537bf1c7e64f4c5cb84fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dbus.hh</name>
    <filename>dbus_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>defs.hh</name>
    <filename>defs_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <class kind="class">Ase::Serializable</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>device.hh</name>
    <filename>device_8hh.html</filename>
    <includes id="gadget_8hh" name="gadget.hh" local="no" imported="no">ase/gadget.hh</includes>
    <includes id="processor_8hh" name="processor.hh" local="no" imported="no">ase/processor.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>driver.hh</name>
    <filename>driver_8hh.html</filename>
    <includes id="api_8hh" name="api.hh" local="no" imported="no">ase/api.hh</includes>
    <includes id="midievent_8hh" name="midievent.hh" local="no" imported="no">ase/midievent.hh</includes>
    <class kind="struct">Ase::DriverEntry</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>engine.hh</name>
    <path>ase/</path>
    <filename>engine_8hh.html</filename>
    <includes id="transport_8hh" name="transport.hh" local="no" imported="no">ase/transport.hh</includes>
    <includes id="platform_8hh" name="platform.hh" local="no" imported="no">ase/platform.hh</includes>
    <class kind="class">Ase::AudioEngine</class>
    <class kind="class">Ase::BorrowedPtr</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>entropy.hh</name>
    <path>ase/</path>
    <filename>entropy_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>void</type>
      <name>collect_runtime_entropy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2dbb0db5cbd8dc4552c8c789be3115d3</anchor>
      <arglist>(uint64 *data, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collect_system_entropy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8ee68f16b77657d551f68f4d1781bd98</anchor>
      <arglist>(uint64 *data, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eventlist.hh</name>
    <path>ase/</path>
    <filename>eventlist_8hh.html</filename>
    <includes id="utils_8hh" name="utils.hh" local="no" imported="no">ase/utils.hh</includes>
    <class kind="struct">Ase::OrderedEventList</class>
    <class kind="class">Ase::EventList</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>formatter.hh</name>
    <path>ase/</path>
    <filename>formatter_8hh.html</filename>
    <class kind="class">Ase::Lib::ScopedLocale</class>
    <class kind="class">Ase::Lib::ScopedPosixLocale</class>
    <class kind="class">Ase::Lib::StringFormatter</class>
    <namespace>Ase</namespace>
    <namespace>Ase::Lib</namespace>
  </compound>
  <compound kind="file">
    <name>gadget.hh</name>
    <path>ase/</path>
    <filename>gadget_8hh.html</filename>
    <includes id="object_8hh" name="object.hh" local="no" imported="no">ase/object.hh</includes>
    <includes id="utils_8hh" name="utils.hh" local="no" imported="no">ase/utils.hh</includes>
    <class kind="class">Ase::GadgetImpl</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>gtk2wrap.hh</name>
    <path>ase/</path>
    <filename>gtk2wrap_8hh.html</filename>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>inifile.hh</name>
    <path>ase/</path>
    <filename>inifile_8hh.html</filename>
    <includes id="blob_8hh" name="blob.hh" local="no" imported="no">ase/blob.hh</includes>
    <class kind="class">Ase::IniFile</class>
    <class kind="class">Ase::IniWriter</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>internal.hh</name>
    <path>ase/</path>
    <filename>internal_8hh.html</filename>
    <namespace>Ase</namespace>
    <namespace>Ase::Test</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a98d5622bbebe621b3d24c81ae903864d</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>N_</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a2091f4107eaba5336ec06bb5e38a5711</anchor>
      <arglist>(str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>APPLY_IDL_PROPERTY</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a1716729327860872d0d906dcfd49a831</anchor>
      <arglist>(lvalue, rvalue)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARRAY_SIZE</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a70c57aae3eb654e205459b4362c8089a</anchor>
      <arglist>(array)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_return</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a1c4d3642f226286834f8b9493ddaf8d0</anchor>
      <arglist>(expr,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_return_unreached</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a7e92dd4f2425d66862089ef179c6b480</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_warn</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a5733f806ead34bbf4d047ebb704b64aa</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_paranoid</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a63f4629b124d24c95805afc397703f91</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>assert_unreached</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>af7e4da35973168e6c7b2bbdae75716c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>if_constexpr</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>ac03b7e5a3148381040501946b45e2cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CQUOTE</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>abc16d95b3e5a422ba6901427d91427b7</anchor>
      <arglist>(str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>afa99ec4acc4ecb2dc3c2d05da15d0e3f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a3acffbd305ee72dcd4593c0d8af64a4f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLAMP</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a485ec145be89e8d8068c999d4da9bca0</anchor>
      <arglist>(v, mi, ma)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ISLIKELY</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>afe6b00653468db86daee78090e900fc9</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNLIKELY</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a9bc47b0f2ca95a82343eaf253567b354</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALIGNMENT16</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a6d0bc1ba679e675f89e88f2b7cd5fc75</anchor>
      <arglist>(pointer)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALIGNED16</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a6811cc9b22527b12a3de229332bc73cc</anchor>
      <arglist>(pointer)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>return_unless</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a3d5657dcebffe51245166f30065c5b40</anchor>
      <arglist>(cond,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRING_VECTOR_FROM_ARRAY</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>aac25174bfb51078a50b85798b6fe92b3</anchor>
      <arglist>(ConstCharArray)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JSONIPC_INHERIT</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>a1660b2f977eb46ccf83544b59a66e8cd</anchor>
      <arglist>(IMPL, INTERFACE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEST_INTEGRITY</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>af8a0cfecd1654cb63c6de4f08dd75781</anchor>
      <arglist>(FUNC)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEST_BENCHMARK</name>
      <anchorfile>internal_8hh.html</anchorfile>
      <anchor>af13c7b07f2c68f11e0ca125a1db2cc8a</anchor>
      <arglist>(FUNC)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsonapi.hh</name>
    <path>ase/</path>
    <filename>jsonapi_8hh.html</filename>
    <includes id="websocket_8hh" name="websocket.hh" local="no" imported="no">ase/websocket.hh</includes>
    <includes id="value_8hh" name="value.hh" local="no" imported="no">ase/value.hh</includes>
    <class kind="struct">Ase::ConvertValue</class>
    <class kind="struct">Ase::ConvertValueP</class>
    <class kind="struct">Ase::ConvertValueR</class>
    <class kind="struct">Ase::ConvertValueRP</class>
    <class kind="struct">Ase::ConvertJsTrigger</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>loft.hh</name>
    <path>ase/</path>
    <filename>loft_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <class kind="struct">Ase::LoftConfig</class>
    <class kind="struct">Ase::LoftStats</class>
    <namespace>Ase</namespace>
    <namespace>Ase::Loft</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T, LoftFree &gt;</type>
      <name>LoftPtr</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a17a04f4ddbc57560c487d54d1451c85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>namespace_ase_1_1_loft.html</anchorfile>
      <anchor>ad510d53c222928754af144145247a08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LoftPtr&lt; void &gt;</type>
      <name>loft_alloc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a648e6152c3c81b8a9ed2b7e7609ccc98</anchor>
      <arglist>(size_t size, size_t align=0)</arglist>
    </member>
    <member kind="function">
      <type>LoftPtr&lt; void &gt;</type>
      <name>loft_calloc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa3225fc382230880c393c3715abc1290</anchor>
      <arglist>(size_t nelem, size_t elemsize, size_t align=0)</arglist>
    </member>
    <member kind="function">
      <type>LoftPtr&lt; T &gt;</type>
      <name>loft_make_unique</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8af0c6f7fcb30b562e30f93b52876fa3</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>loft_bucket_size</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0cf44cedba310135e566cdb53761fc49</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_set_config</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad3c14e48c56ab2fff0476a6b54f326aa</anchor>
      <arglist>(const LoftConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_get_config</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7579ce186fbf93e49d9e728b24d6dbc0</anchor>
      <arglist>(LoftConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_set_notifier</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a433dfd8c8c58a6ae229ff25d7ebc869c</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;lowmem)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>loft_grow_preallocate</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a929e7ea34d61f05a6445a7f5e09e9fa7</anchor>
      <arglist>(size_t preallocation_amount=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_get_stats</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a198e9c84c739c98be13fb42074e99c0e</anchor>
      <arglist>(LoftStats &amp;stats)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>loft_stats_string</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9563df42775d1f6409b3e39eeccb97e8</anchor>
      <arglist>(const LoftStats &amp;stats)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loop.hh</name>
    <path>ase/</path>
    <filename>loop_8hh.html</filename>
    <includes id="utils_8hh" name="utils.hh" local="no" imported="no">ase/utils.hh</includes>
    <class kind="struct">Ase::PollFD</class>
    <class kind="class">Ase::EventLoop</class>
    <class kind="class">Ase::MainLoop</class>
    <class kind="class">Ase::EventSource</class>
    <class kind="class">Ase::DispatcherSource</class>
    <class kind="class">Ase::USignalSource</class>
    <class kind="class">Ase::TimedSource</class>
    <class kind="class">Ase::PollFDSource</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>main.hh</name>
    <path>ase/</path>
    <filename>main_8hh.html</filename>
    <includes id="platform_8hh" name="platform.hh" local="no" imported="no">ase/platform.hh</includes>
    <includes id="randomhash_8hh" name="randomhash.hh" local="no" imported="no">ase/randomhash.hh</includes>
    <includes id="regex_8hh" name="regex.hh" local="no" imported="no">ase/regex.hh</includes>
    <includes id="websocket_8hh" name="websocket.hh" local="no" imported="no">ase/websocket.hh</includes>
    <includes id="loop_8hh" name="loop.hh" local="no" imported="no">ase/loop.hh</includes>
    <includes id="utils_8hh" name="utils.hh" local="no" imported="no">ase/utils.hh</includes>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>String</type>
      <name>feature_toggle_find</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2b3cdbbe472774a18b41981597e64a74</anchor>
      <arglist>(const String &amp;config, const String &amp;feature, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>feature_toggle_bool</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac1073e4b34ce83d4b426d54e84a1a189</anchor>
      <arglist>(const char *config, const char *feature)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>feature_check</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a952143fcb038e72ef5f492b0deb4af31</anchor>
      <arglist>(const char *feature)</arglist>
    </member>
    <member kind="variable">
      <type>JobQueue</type>
      <name>main_jobs</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2f3ecd5810f2c4c41e346e6dfadf77c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mathutils.hh</name>
    <path>ase/</path>
    <filename>mathutils_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <class kind="union">Ase::FloatIEEE754</class>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>ASE_CONST int</type>
      <name>irintf</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a662a78ef1820c144249125e01c934d8c</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>force_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab982e60f06401ad192893992b9890ee2</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>force_float</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab7b93fb2d9d6d64e6cf011b79c0dbde8</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_exp2</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6b62ab47110aa30b63e57c031a32600f</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_log2</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad8e7c995facbfcfd52c9d029faa59f36</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>value2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a47a6d089f3cabcf2962c5309a7d80d71</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>hz2value</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7d2f47db78ba34272d2c6f33948b9ddd</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const double</type>
      <name>DOUBLE_EPSILON</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aee191c362fc0cd461a80185c0e8348a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memory.hh</name>
    <path>ase/</path>
    <filename>memory_8hh.html</filename>
    <includes id="utils_8hh" name="utils.hh" local="no" imported="no">ase/utils.hh</includes>
    <class kind="class">Ase::FastMemArray</class>
    <class kind="struct">Ase::FastMemory::Block</class>
    <class kind="struct">Ase::FastMemory::Arena</class>
    <class kind="struct">Ase::FastMemory::HugePage</class>
    <class kind="class">Ase::CString</class>
    <namespace>Ase</namespace>
    <namespace>Ase::FastMemory</namespace>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>cache_line_size</name>
      <anchorfile>namespace_ase_1_1_fast_memory.html</anchorfile>
      <anchor>a8fc40045a42c8e7ab0cad30c371d8bdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>midievent.hh</name>
    <path>ase/</path>
    <filename>midievent_8hh.html</filename>
    <includes id="memory_8hh" name="memory.hh" local="no" imported="no">ase/memory.hh</includes>
    <includes id="mathutils_8hh" name="mathutils.hh" local="no" imported="no">ase/mathutils.hh</includes>
    <class kind="struct">Ase::MidiEvent</class>
    <class kind="class">Ase::MidiEventStream</class>
    <class kind="class">Ase::MidiEventRange</class>
    <class kind="struct">Ase::MidiNote</class>
    <namespace>Ase</namespace>
    <member kind="enumeration">
      <type></type>
      <name>MidiEventType</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac89ef908c78cabb30e73a3e03b1a1d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7d3daccf90d232899fe6b65d2f4079f4</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ab178cea4d43088e98f88f85937d4a31a">ALL_SOUND_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a2f1b5871de7ea019f806ca0468139319">RESET_ALL_CONTROLLERS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a9fa47c2309eb766fb6ea8c8958ec640b">LOCAL_CONTROL</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a7f57110ee8bfa225198301598674fe8d">ALL_NOTES_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a646161f7320d7ebac8a94c54b92311cc">OMNI_MODE_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ac9c4fc8d7393e120ff873d2c6e89d722">OMNI_MODE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a53aa0e7dbfa71a43809bb387623a65dc">MONO_MODE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4aba96b42e49c8c80bcaff736c23a4ac75">POLY_MODE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a64c4eb278d5b288304f476ccbc70d958">NOTE_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a42ab8d6057c68dc3ca7829a9173c24a4">NOTE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4add5ad791cdebdae08885215f40e4e08a">AFTERTOUCH</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ac08bccd1d86dc7033fb7a426455a8ae6">CONTROL_CHANGE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a9c1ebbbad317dc20a7aebc4e433b0f2e">PROGRAM_CHANGE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4af6820257bf108b57ff10d99b14aadd73">CHANNEL_PRESSURE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ac9718325980196dee9b53c5e375d5023">PITCH_BEND</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a8ceaa46c365ea6c4d1a2e413d94d9d47">SYSEX</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>midilib.hh</name>
    <path>ase/</path>
    <filename>midilib_8hh.html</filename>
    <includes id="processor_8hh" name="processor.hh" local="no" imported="no">ase/processor.hh</includes>
    <includes id="track_8hh" name="track.hh" local="no" imported="no">ase/track.hh</includes>
    <includes id="clip_8hh" name="clip.hh" local="no" imported="no">ase/clip.hh</includes>
    <class kind="struct">Ase::MidiLib::MidiFeed</class>
    <namespace>Ase</namespace>
    <namespace>Ase::MidiLib</namespace>
  </compound>
  <compound kind="file">
    <name>mime-types.hh</name>
    <path>ase/</path>
    <filename>mime-types_8hh.html</filename>
  </compound>
  <compound kind="file">
    <name>monitor.hh</name>
    <path>ase/</path>
    <filename>monitor_8hh.html</filename>
    <includes id="gadget_8hh" name="gadget.hh" local="no" imported="no">ase/gadget.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>nativedevice.hh</name>
    <path>ase/</path>
    <filename>nativedevice_8hh.html</filename>
    <includes id="device_8hh" name="device.hh" local="no" imported="no">ase/device.hh</includes>
    <includes id="processor_8hh" name="processor.hh" local="no" imported="no">ase/processor.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>object.hh</name>
    <path>ase/</path>
    <filename>object_8hh.html</filename>
    <includes id="api_8hh" name="api.hh" local="no" imported="no">ase/api.hh</includes>
    <class kind="class">Ase::EmittableImpl</class>
    <class kind="class">Ase::ObjectImpl</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>path.hh</name>
    <path>ase/</path>
    <filename>path_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <namespace>Ase</namespace>
    <namespace>Ase::Path</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ASE_UNIX_PATHS</name>
      <anchorfile>path_8hh.html</anchorfile>
      <anchor>a15089b697acab2e3e5d893b6b472c24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_DOS_PATHS</name>
      <anchorfile>path_8hh.html</anchorfile>
      <anchor>a77014aee0a1da489593765e4447c7858</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_DIRSEP</name>
      <anchorfile>path_8hh.html</anchorfile>
      <anchor>a827945703851a4ff5edd2f9be2d4c10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_DIRSEP2</name>
      <anchorfile>path_8hh.html</anchorfile>
      <anchor>ab7de9a504152cc8b343eb04c78559684</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_DIRSEPARATORS</name>
      <anchorfile>path_8hh.html</anchorfile>
      <anchor>a0497e85f60ba5f57a2cf7a72cc30d770</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_SEARCHPATH_SEPARATOR</name>
      <anchorfile>path_8hh.html</anchorfile>
      <anchor>ad328cd98fb46d2d2bb2a7ecab5cd70b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_LIBEXT</name>
      <anchorfile>path_8hh.html</anchorfile>
      <anchor>ac00bbb09e3b8ecf33d4f90615c505961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>dirname</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a62082b824724e9de16ab46e9e9537736</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>basename</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a376e6f975c49cc2ca4dc912a34bde424</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>normalize</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>af7ef507a5cf70f0e4e22a272adc330ca</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>realpath</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a31da5fadeffe6501535453fec6c8ffb7</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>dir_terminate</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8aab42d7c2c422981839db5cde9487c4</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>strip_slashes</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a9116dbc081986909f42e98f9b20feae8</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>abspath</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ab2aeb6d74e9de675a6fc0fa72ea925cb</anchor>
      <arglist>(const String &amp;path, const String &amp;incwd)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isabs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ad2deaf982ff582c6582daf94708e16d6</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdirname</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8cc52333c0e00cc5c8719d8f33530989</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dircontains</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae0e627fc6b962984d87f25c6ff07f847</anchor>
      <arglist>(const String &amp;dirpath, const String &amp;descendant, String *relpath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mkdirs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a7351e12e1598eacace8cdf40b2cd2d3b</anchor>
      <arglist>(const String &amp;dirpath, uint mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rmrf</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ac8f33198f4cdc00d028587ea27325b8e</anchor>
      <arglist>(const String &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_file</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ad2634e67be8dda43c0f38a7efb05f675</anchor>
      <arglist>(const String &amp;src, const String &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>file_size</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ad024d1fc4211baaea9bfee77c72e854e</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>expand_tilde</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8a29d2ff12ad4b4bea1587386bf28274</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>user_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a02f001c5b8177e75708a121d0811ce83</anchor>
      <arglist>(const String &amp;username)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>data_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aa049ab9eb407df0b18477cf18273445e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>config_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a47051c07734c31523613276c6dbf2530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>config_names</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a263aa97c18fed3538904cd40ada4fd38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>config_names</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a21f41bdab5c8b372ae47ed6717d3b5e1</anchor>
      <arglist>(const String &amp;names)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>cache_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aa5a944be73c4621beb917c1a2f288426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>runtime_dir</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ab03fb8a272e2f87c46fb962b9b76838a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>config_dirs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a13813b973670786f1d12ee36ab62145a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>data_dirs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae08f8e7312171fcc1482df6e3d546d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a846caddfde09e0e00e077b66cdce9d4e</anchor>
      <arglist>(const String &amp;file, const String &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8a4942db8fd85e2424f87ef147593704</anchor>
      <arglist>(const String &amp;file1, const String &amp;file2)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>cwd</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a070d18887c8f71ab9f117f9311cae597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>simplify_abspath</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8c8a21f5143a79dbf8931d46d82c3566</anchor>
      <arglist>(const std::string &amp;abspath_expression)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchpath_contains</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a0c71d533ac3b59091afa34e8774a0a28</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>searchpath_find</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ab04374f3984470edcc65ed2e28e4b39a</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;file, const String &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>searchpath_list</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aeec9ff4aca4a4050707d89e608fdbe9e</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>searchpath_multiply</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a667dad32e6ea768c098c2d66d8ced881</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;postfixes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glob</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae69d5479618ca0550534f82afa4e324d</anchor>
      <arglist>(const String &amp;pathpattern, StringS &amp;matches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rglob</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae5c3730ed4e6a4f5d6f6da17940cee68</anchor>
      <arglist>(const String &amp;basedir, const String &amp;pattern, StringS &amp;matches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unique_realpaths</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a1d138d85fa47a659a9a6f44a26350c17</anchor>
      <arglist>(StringS &amp;pathnames)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>join_with</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aab4deb4ea93c29f2ca0e40972b0e167b</anchor>
      <arglist>(const String &amp;head, char joiner, const String &amp;tail)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>platform.hh</name>
    <path>ase/</path>
    <filename>platform_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <class kind="class">Ase::AsyncBlockingQueue</class>
    <class kind="struct">Ase::TaskStatus</class>
    <class kind="class">Ase::TaskRegistry</class>
    <namespace>Ase</namespace>
    <namespace>Ase::AnsiColors</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ASE_SFENCE</name>
      <anchorfile>platform_8hh.html</anchorfile>
      <anchor>abcc9c2712715c08408419813a3fe721d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_LFENCE</name>
      <anchorfile>platform_8hh.html</anchorfile>
      <anchor>a440101738b8807c4f11e61b5833cc295</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_MFENCE</name>
      <anchorfile>platform_8hh.html</anchorfile>
      <anchor>a7e71c06b835e37bc9c1787545176e569</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASE_CFENCE</name>
      <anchorfile>platform_8hh.html</anchorfile>
      <anchor>a13dd4f29b4500e4a9217e00a0ab0fb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Colors</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a493dc5f6dd00a1765e285e719d983798</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESET</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a493dc5f6dd00a1765e285e719d983798a1643067634d8770e7f37416bd5d49249</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af43824d663045e1b37c5fc713adc782e</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>std::string()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af98ea2f6e812db590fadf19f1f2f3e12</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>const char *()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a30bc0283a50c3bbf41f1761ee09dacfe</anchor>
      <arglist>(const char *string, const char *plural, int64_t n)</arglist>
    </member>
    <member kind="function">
      <type>std::string()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac331306297162c7a8102dfbebe6bd9ff</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;plural, int64_t n)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>anklang_runpath</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a85fe6b61a91ea6ed4b2fce9341fbbc71</anchor>
      <arglist>(RPath rpath, const String &amp;segment)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>anklang_home_dir</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a92470dca73959925c5714ba36592ae73</anchor>
      <arglist>(const String &amp;subdir)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>color_code</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>ac0da0311265e8d09e51a2558a8eecbd3</anchor>
      <arglist>(Colors acolor)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a1127400b949fb52d6c4925010add9497</anchor>
      <arglist>(Colors acolor, Colors c1, Colors c2, Colors c3, Colors c4, Colors c5, Colors c6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a59fc9e1dbebc8ce0d60c3536e5307e14</anchor>
      <arglist>(Colorize colorize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>colorize_tty</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a6a89cc28c179501965e953caaed7ada3</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_startup</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae70cf11ea189f56c2d5cd6bd39e0d396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_realtime</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aeefb757119c7bc86cfcb18164701a8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_benchmark</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3abac0482bc1b3fdce1652c6a32fcb12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_resolution</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a05d8458ff812dffd7bf7bb1601c8ddca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>timestamp_format</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aefb18b02300e0074220ddeebcab80602</anchor>
      <arglist>(uint64 stamp, uint maxlength)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>monotonic_counter</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1dbbc5005e1b0c528f3e06cc472c326d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>program_alias</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab314b0c86f8779f11a2b5d7fbec96050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>program_alias_init</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a57d2159097a87693c8ea92672f16029c</anchor>
      <arglist>(String customname)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>application_name</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1e379776d65d27e4ed2039c54357419f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>application_name_init</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5ca21538b4cd7015ca77c113b8a27e1f</anchor>
      <arglist>(String desktopname)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>program_cwd</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8fb4e4ca5a88892e1f109f7a6b67af63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>executable_name</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac273cfff748902c7f0e83929361ff35d</anchor>
      <arglist>() ASE_PURE</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>executable_path</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3da654d2f99656fafe25793808a801cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>cpu_info</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a14a67706c5cb1d768e3349efa222adcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>cpu_arch</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa5823f008c8a5544e1ed29a0df0329b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_version</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab34f3aed637c04ddf8d1307328ed9bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_build_id</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afefdd17acdaab75f0841bfd1d1111964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sched_get_priority</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae261a2c1b2081a47fe4bdf9c242ea74d</anchor>
      <arglist>(int tid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sched_set_priority</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8b87f096a13c9c10e796329286046bad</anchor>
      <arglist>(int tid, int nicelevel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sched_fast_priority</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aaf8f27128866d5986f563586d76574a8</anchor>
      <arglist>(int tid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>breakpoint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ade6e7824de96e13de99d024ec65172d5</anchor>
      <arglist>() ASE_ALWAYS_INLINE</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>processor.hh</name>
    <path>ase/</path>
    <filename>processor_8hh.html</filename>
    <includes id="gadget_8hh" name="gadget.hh" local="no" imported="no">ase/gadget.hh</includes>
    <includes id="midievent_8hh" name="midievent.hh" local="no" imported="no">ase/midievent.hh</includes>
    <includes id="datautils_8hh" name="datautils.hh" local="no" imported="no">ase/datautils.hh</includes>
    <includes id="properties_8hh" name="properties.hh" local="no" imported="no">ase/properties.hh</includes>
    <includes id="engine_8hh" name="engine.hh" local="no" imported="no">ase/engine.hh</includes>
    <includes id="atomics_8hh" name="atomics.hh" local="no" imported="no">ase/atomics.hh</includes>
    <class kind="struct">Ase::AudioProcessorInfo</class>
    <class kind="struct">Ase::ParamInfo</class>
    <class kind="struct">Ase::BusInfo</class>
    <class kind="class">Ase::AudioProcessor</class>
    <class kind="class">Ase::AudioProcessor::FloatBuffer</class>
    <class kind="class">Ase::ProcessorManager</class>
    <namespace>Ase</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ParamId</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4b0e60fbea9c250f7d933b0f60ddf67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IBusId</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1b2b04028bdeac661ac8a6ddccb1dad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OBusId</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2b1c0faab7eb92829c386b4e0278b5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CString</type>
      <name>register_audio_processor</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa4f21b1d6e7cc642b4aaf3a999e85de1</anchor>
      <arglist>(const char *aseid=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>project.hh</name>
    <path>ase/</path>
    <filename>project_8hh.html</filename>
    <includes id="device_8hh" name="device.hh" local="no" imported="no">ase/device.hh</includes>
    <includes id="track_8hh" name="track.hh" local="no" imported="no">ase/track.hh</includes>
    <includes id="transport_8hh" name="transport.hh" local="no" imported="no">ase/transport.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>properties.hh</name>
    <path>ase/</path>
    <filename>properties_8hh.html</filename>
    <includes id="object_8hh" name="object.hh" local="no" imported="no">ase/object.hh</includes>
    <includes id="memory_8hh" name="memory.hh" local="no" imported="no">ase/memory.hh</includes>
    <includes id="jsonapi_8hh" name="jsonapi.hh" local="no" imported="no">ase/jsonapi.hh</includes>
    <class kind="struct">Ase::GroupId</class>
    <class kind="class">Ase::Properties::Bag</class>
    <namespace>Ase</namespace>
    <namespace>Ase::Properties</namespace>
    <member kind="function">
      <type>String</type>
      <name>property_guess_nick</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af9277c9733499fd0e111414ed92d42e1</anchor>
      <arglist>(const String &amp;property_label)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>construct_hints</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a3c429cb505d3fd8c889a246c942b1a97</anchor>
      <arglist>(const String &amp;hints, const String &amp;more, double pmin=0, double pmax=0)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Bool</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a50db48e817778744387e0e20986fe3f0</anchor>
      <arglist>(const String &amp;ident, bool *v, const String &amp;label, const String &amp;nickname, bool dflt, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a19e2195538234a1099ab5ef37253e888</anchor>
      <arglist>(const String &amp;ident, const ValueGetter &amp;getter, const ValueSetter &amp;setter, const String &amp;label, const String &amp;nickname, double pmin, double pmax, double dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a4182a9b9840416bf15bdfc1cd87de39d</anchor>
      <arglist>(const String &amp;ident, int32 *v, const String &amp;label, const String &amp;nickname, int32 pmin, int32 pmax, int32 dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>ac06ab0d35e1682aa49606a52edb1b8f8</anchor>
      <arglist>(const String &amp;ident, float *v, const String &amp;label, const String &amp;nickname, double pmin, double pmax, double dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a6dd0cad54a93cfa29314a9b4c1ce8c06</anchor>
      <arglist>(const String &amp;ident, double *v, const String &amp;label, const String &amp;nickname, double pmin, double pmax, double dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Text</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a7cbd144d927316c29bdf4a1e5bab4a8c</anchor>
      <arglist>(const String &amp;ident, String *v, const String &amp;label, const String &amp;nickname, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Text</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a23180193581eaf2875e2281c9ea6c67b</anchor>
      <arglist>(const String &amp;ident, String *v, const String &amp;label, const String &amp;nickname, const ValueLister &amp;vl, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Enum</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a8907ce27b1f0ab29d962b09c3a9fa07c</anchor>
      <arglist>(const String &amp;ident, E *v, const String &amp;label, const String &amp;nickname, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyImplP</type>
      <name>mkprop</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a1649118f6abbe14804d562aca317aa1b</anchor>
      <arglist>(const Initializer &amp;initializer, const ValueGetter &amp;, const ValueSetter &amp;, const ValueLister &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ValueGetter</type>
      <name>Getter</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>aa96b7f7c7b4b3da2e4f5c9ea76a77659</anchor>
      <arglist>(const V *p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>randomhash.hh</name>
    <path>ase/</path>
    <filename>randomhash_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <class kind="struct">Ase::AlignedPOD</class>
    <class kind="class">Ase::Mwc256</class>
    <class kind="struct">Ase::SHA3_224</class>
    <class kind="struct">Ase::SHA3_256</class>
    <class kind="struct">Ase::SHA3_384</class>
    <class kind="struct">Ase::SHA3_512</class>
    <class kind="struct">Ase::SHAKE128</class>
    <class kind="struct">Ase::SHAKE256</class>
    <class kind="class">Ase::Lib::KeccakF1600</class>
    <class kind="class">Ase::AutoSeeder</class>
    <class kind="class">Ase::KeccakRng</class>
    <class kind="class">Ase::KeccakCryptoRng</class>
    <class kind="class">Ase::KeccakGoodRng</class>
    <class kind="class">Ase::KeccakFastRng</class>
    <class kind="class">Ase::Pcg32Rng</class>
    <namespace>Ase</namespace>
    <namespace>Ase::Lib</namespace>
    <member kind="function">
      <type>uint64_t</type>
      <name>random_nonce</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>abe75362e79c7e1e8d05c80f657ea4927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random_int64</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af2fa8ecc60f95c51343e451107eb79cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>random_irange</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a844c76d15994c3e534fa47fcb15602e4</anchor>
      <arglist>(int64_t begin, int64_t end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_float</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>acc2d8bc52fd999435c0681cb9483a79b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_frange</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adf37cb4931db47687e0651648411daef</anchor>
      <arglist>(double begin, double end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random_secret</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aff84fb3df612f02f6805bb7b7a245961</anchor>
      <arglist>(uint64_t *secret_var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_224_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a13176368fdd46ac409c5e4708afb660c</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[28])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_256_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a756a42d4d1b843484aa2129a33b40e3e</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[32])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_384_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4ee57941a32896d14684f20b70893dd1</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[48])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_512_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8c1abae4f3fb203cfeb6b4ff8ca1ec73</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[64])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shake128_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac1d91a7d75244cde33b2f9362cbce2b7</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t *hashvalues, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shake256_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a472196e35cb5f02e114a3921a0424cb6</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t *hashvalues, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>regex.hh</name>
    <path>ase/</path>
    <filename>regex_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <class kind="class">Ase::Re</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>resampler2.hh</name>
    <path>ase/</path>
    <filename>resampler2_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <class kind="class">Ase::Resampler2</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>serialize.hh</name>
    <path>ase/</path>
    <filename>serialize_8hh.html</filename>
    <includes id="value_8hh" name="value.hh" local="no" imported="no">ase/value.hh</includes>
    <includes id="strings_8hh" name="strings.hh" local="no" imported="no">ase/strings.hh</includes>
    <includes id="jsonapi_8hh" name="jsonapi.hh" local="no" imported="no">ase/jsonapi.hh</includes>
    <class kind="class">Ase::WritNode</class>
    <class kind="class">Ase::Writ</class>
    <class kind="struct">Ase::WritConverter</class>
    <class kind="struct">Ase::Has_serialize_f</class>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>String</type>
      <name>json_stringify</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae324fb7ca92b2d7c313ecd8f3a5a6342</anchor>
      <arglist>(const T &amp;source, Writ::Flags flags=Writ::Flags(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>json_parse</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3754c784ff8d6c444059d8d4c68f8a5e</anchor>
      <arglist>(const String &amp;jsonstring, T &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>json_parse</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aff3fc36c0b3afa081b6616badc65c6ff</anchor>
      <arglist>(const String &amp;jsonstring)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>server.hh</name>
    <path>ase/</path>
    <filename>server_8hh.html</filename>
    <includes id="gadget_8hh" name="gadget.hh" local="no" imported="no">ase/gadget.hh</includes>
    <includes id="memory_8hh" name="memory.hh" local="no" imported="no">ase/memory.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>signalmath.hh</name>
    <path>ase/</path>
    <filename>signalmath_8hh.html</filename>
    <includes id="mathutils_8hh" name="mathutils.hh" local="no" imported="no">ase/mathutils.hh</includes>
    <class kind="struct">Ase::Logscale</class>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>Float</type>
      <name>hz_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adc07310efd92730d29d339c492798d5b</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>voltage2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4ca5925a1c96faf96f0560de12869d1c</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_voltage2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1f59a72e6648644cf09fa73e713803f9</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>hz2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a71465d516c173df412f6956a2600194b</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_hz2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7231bdf9bff23de61c171ba8b406c35c</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>db_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6eab1298334dc6fd76e031d4310b040e</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>voltage2db</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae22215fe20252a0717082f4c793da4f3</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_voltage2db</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1de0810d0502631404f16f055e20c6f6</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>db2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae7a6fac85ed40cddaa7e95194603661f</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_db2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a05c168b254058b3d3fc3a4222221a61b</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>voltage_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac4d103c11d35fe255e011e322f855d27</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>voltage2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac1c4ef3e01d17015cf9cf483a05ffb92</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>hz2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a736a99f33821c5a77f099e1efbf64ee1</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>voltage2db</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aca820783d6c6f799fe95370cba305e4c</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>db2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aaf9ec17dfbef9df1f1e1530f60b49772</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>hz_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9f709308cbc3f71ca3dc5336152086fe</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>db_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a21cfa7f74638056e0d16c6ed277fd56c</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>voltage_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a87fb9da93f934cb8249570c02d237680</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sortnet.hh</name>
    <path>ase/</path>
    <filename>sortnet_8hh.html</filename>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>void</type>
      <name>fixed_sort</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa0d8446b6f8436daeeebfa63207282a2</anchor>
      <arglist>(RandomIt first, RandomIt last, Compare comp=std::less&lt; typename std::iterator_traits&lt; RandomIt &gt;::value_type &gt;())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>storage.hh</name>
    <path>ase/</path>
    <filename>storage_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>String</type>
      <name>anklang_cachedir_create</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a06c2ef9e0859b87364e091c67ddb3534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anklang_cachedir_cleanup</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adc42ba3f2b21f306aa48154fd8a398c8</anchor>
      <arglist>(const String &amp;cachedir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anklang_cachedir_clean_stale</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a922b8af9dc2d9554691bda58b7665238</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strings.hh</name>
    <path>ase/</path>
    <filename>strings_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <includes id="formatter_8hh" name="formatter.hh" local="no" imported="no">ase/formatter.hh</includes>
    <class kind="class">Ase::Strings</class>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>String</type>
      <name>string_vprintf</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2b1ff7fb9f0a2cf85aae28ead9ccd673</anchor>
      <arglist>(const char *format, va_list vargs)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_locale_vprintf</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afcea6886e39c04f29d2f2210bfe6095d</anchor>
      <arglist>(const char *format, va_list vargs)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_multiply</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac6e0fe294134776cdf2b3bab565f704f</anchor>
      <arglist>(const String &amp;s, uint64 count)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_canonify</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac879cb580c8208d885b7b627b524a162</anchor>
      <arglist>(const String &amp;string, const String &amp;valid_chars, const String &amp;substitute)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_identifier</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a059fc44a851265ab826404a5a085017f</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_is_canonified</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2d8b9e1966f0e7ba7fd3d1a961c0df97</anchor>
      <arglist>(const String &amp;string, const String &amp;valid_chars)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>string_set_a2z</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab70579ab773773d91669b6d994cfe87b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>string_set_A2Z</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>acaf3546176475ef1ebdbb2ccd0576f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>string_set_ascii_alnum</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8df97fbd9e33de169083049c100b98de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_tolower</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a36221e5318ced5a44a256988951988b8</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_toupper</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a51b498faaac090d4120734e232416a40</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_totitle</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a279fc44a9dc6e42a62d7233616f9ea43</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_capitalize</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a48a9816eec56a6896cff689a480e0d04</anchor>
      <arglist>(const String &amp;str, size_t maxn, bool rest_tolower)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>string_split</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2ae18de3555c96ee06bbfae23e55ce2a</anchor>
      <arglist>(const String &amp;string, const String &amp;splitter, size_t maxn)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>string_split_any</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9489e8e8e39c245c9dcd2a2a9ec8e98e</anchor>
      <arglist>(const String &amp;string, const String &amp;splitchars, size_t maxn)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_join</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2308b9afb0ff1221603a500a52e708fe</anchor>
      <arglist>(const String &amp;junctor, const StringS &amp;strvec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_to_bool</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac2ea08493c818758f33792cb9c9b0c45</anchor>
      <arglist>(const String &amp;string, bool fallback)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_bool</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>acc252ba770f7fdac5f4eef00e47bd02b</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>string_to_uint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aafb19c411791b792cd94d8c4f80d86a5</anchor>
      <arglist>(const String &amp;string, size_t *consumed, uint base)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_uint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6be918cec912ea33c5e9647856b18bba</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_has_int</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab953202162535d1d769f4b073e08db56</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>string_to_int</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a929109484e359285ddc8a33e746486c4</anchor>
      <arglist>(const String &amp;string, size_t *consumed, uint base)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_int</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a640ef72b4647ae0c21ef1ec921f581c7</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_float</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aeee40af2c2179d445a58dbd5ccf88566</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>string_to_long_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8e0f780a57ce2723173a4a035a6af940</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>string_to_long_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a18a6b9d2b81eb8f464a0dd46414f5580</anchor>
      <arglist>(const char *dblstring, const char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_long_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3086a9a5db9a2c53ed5ae39d14a9222a</anchor>
      <arglist>(long double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>string_to_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab05d3cbb51f5fbea6eea29909919d7ef</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>string_to_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a52b13fdc0ffe52dda2a593dd6a7cb307</anchor>
      <arglist>(const char *dblstring, const char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3226308fc4541ee90bf1ccfbd65903c3</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>string_to_double_vector</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a06aa1dd852e27b2ba8c181b1d2bd799a</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_double_vector</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7abd22e8f861206c7d676c2f251c2cce</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;dvec, const String &amp;delim)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>string_to_seconds</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a86fa39b3fcd73679051f40e1b644ff73</anchor>
      <arglist>(const String &amp;string, double fallback)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_errno</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0d2edaba6b0ebebb517d0a82919866ce</anchor>
      <arglist>(int errno_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_is_uuid</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2339b1f8764d04f9b50e7ccf7ea80641</anchor>
      <arglist>(const String &amp;uuid_string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>string_cmp_uuid</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a56287c6209f7b222d31b0ea9009ccd5f</anchor>
      <arglist>(const String &amp;uuid_string1, const String &amp;uuid_string2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_startswith</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afea299292f6fc8e3958dfbc1e07217bd</anchor>
      <arglist>(const String &amp;string, const String &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_endswith</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ada811b3e347a1b626feee18985792d8e</anchor>
      <arglist>(const String &amp;string, const String &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_match_identifier</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae0f73fbdfa3588f40364f1024954e62c</anchor>
      <arglist>(const String &amp;ident1, const String &amp;ident2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_match_identifier_tail</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3ecb71eb25317b14c7ac82163268a109</anchor>
      <arglist>(const String &amp;ident, const String &amp;tail)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_pretty_function_name</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a859cf0ee2e5294f424038c1b03d226bb</anchor>
      <arglist>(const char *cxx_pretty_function)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_cescape</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af7f632e065dd2ed28d8d41f0ae8bf219</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_cquote</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae27dccf50df9fd35f7c817bd61aee2eb</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_cquote</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0b172cbfb257f99ad9bdecf7afcd85a7</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_url_decode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aacb16d3811ad8bbd41e2e995f0d4fafd</anchor>
      <arglist>(const String &amp;urlstr, const bool form_url_encoded)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_url_encode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad750f0b79d820c0e82a241365c9cbf1d</anchor>
      <arglist>(const String &amp;rawstr, const bool form_url_encoded)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_hex</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a30e73232aa4f8f8334196686be3263bb</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_hexdump</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2c5a8c2c59882690d843c7f87c596769</anchor>
      <arglist>(const void *addr, size_t length, size_t initial_offset)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_lstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3f15750c2657a21f750d01e449fadb06</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_rstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4a7abecf2cfce78fd2fccd5b5b788ae7</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_strip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aca58814757564f0347e65873a7666396</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_replace</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9358758940a1dca8a2fdf24f1db66075</anchor>
      <arglist>(const String &amp;input, const String &amp;marker, const String &amp;replacement, size_t maxn)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_substitute_char</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adb0b3a4141998fc698827ddd45e90d4c</anchor>
      <arglist>(const String &amp;input, const char match, const char subst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_lstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af2167ef51caff75f7635195cef2bb6ad</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_rstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac3f18371b872dbde3bd9bc892be7928f</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_strip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aab202bb063b32d439408d631a8d0047e</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_erase_empty</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7fd8ed2f331b81acd491013f6e7bcb9f</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_vector_find</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac2144f2685390019388c15712928eb52</anchor>
      <arglist>(const StringS &amp;svector, const String &amp;prefix, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_vector_find_value</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a49d15a9a98680986124d73a97a49a4c4</anchor>
      <arglist>(const StringS &amp;svector, const String &amp;prefix, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>cstrings_to_vector</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8889e1663833404fd023f9eac7808c53</anchor>
      <arglist>(const char *s,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memset4</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af3a2aa3c0485e597bd9c04fe44ef393b</anchor>
      <arglist>(uint32 *mem, uint32 filler, uint length)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>posix_locale_strtold</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a80a78725e7e8df58429f1b8fca0acca7</anchor>
      <arglist>(const char *nptr, char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>current_locale_strtold</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac82abaa4e5a5f6f48035c7c56f53c8a0</anchor>
      <arglist>(const char *nptr, char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab97e2203756658ff9f944941fbc5e0dd</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfd</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a55d3a75caca8101885f9778bb0fa6b76</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfkc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9fb06f38f35a111e93f51aae3f48b2c4</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfkd</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab9703c687fb347d3475108fd83ea966e</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_casefold</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a14221d6445104558d382ca61347bfe35</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>string_casecmp</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5de0bdf98eb07faebd2b6fc706e4eec6</anchor>
      <arglist>(const String &amp;s1, const String &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>string_cmp</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0ad2ab23f2678d1c1fbe410d3122beae</anchor>
      <arglist>(const String &amp;s1, const String &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>string_to_type</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a28b012e3752bebd58b981c41d47c44fb</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_type</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af06e887cc61099edfa0d33f4fc385e6b</anchor>
      <arglist>(Type value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_option_check</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa9914cc83579ad0c0912c96190b6b939</anchor>
      <arglist>(const String &amp;option_string, const String &amp;option)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_option_get</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aba4acf4a89b9c88811339143268c4e78</anchor>
      <arglist>(const String &amp;option_string, const String &amp;option)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_options_split</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a75e2d0a36fed8f364df722cabf416df7</anchor>
      <arglist>(const String &amp;option_string, std::vector&lt; String &gt; &amp;option_names, std::vector&lt; String &gt; &amp;option_values, const String &amp;empty_default)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_option_find</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6f970bb6447d1e33dedc171b82412e99</anchor>
      <arglist>(const String &amp;config, const String &amp;feature, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>text_convert</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae180af13795b4e6a2b66f80422b717ca</anchor>
      <arglist>(const String &amp;to_charset, String &amp;output_string, const String &amp;from_charset, const String &amp;input_string, const String &amp;fallback_charset, const String &amp;output_mark)</arglist>
    </member>
    <member kind="function">
      <type>ASE_NOINLINE String</type>
      <name>string_format</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3ae809e6556ad2e960eba9abf672ef7f</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>ASE_NOINLINE String</type>
      <name>string_locale_format</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0fa1d7121b1e6228a6697f5a2c023619</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>testing.hh</name>
    <path>ase/</path>
    <filename>testing_8hh.html</filename>
    <includes id="utils_8hh" name="utils.hh" local="no" imported="no">ase/utils.hh</includes>
    <class kind="class">Ase::Test::Timer</class>
    <namespace>Ase</namespace>
    <namespace>Ase::Test</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TSTART</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>ad79f34884d0b00cb9aa38c71422aa5dd</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TDONE</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a61bb2f89de27f74f8db608aa36f25996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TPASS</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a3e5d8bb5a4f017ea93e3c22fc0712316</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBENCH</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a97e588f90353e97bea59a9d7c52797f0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TNOTE</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a7669326dfb0e53b791274a472c25b088</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCHECK</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>acaf4322f78e1f7724384a49174536779</anchor>
      <arglist>(cond,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCMPS</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a37f03abb55e75962ee5271b20363e586</anchor>
      <arglist>(a, cmp, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCMP</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a78fca0e2c2f18b434176208c72a5edda</anchor>
      <arglist>(a, cmp, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TASSERT</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a3a39dc0079a11e2ed8ac40db2cd30fa7</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TASSERT_AT</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>ad71d705e2373dd881977928509e50328</anchor>
      <arglist>(LINE, cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOK</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>ac315a99971739ef05b2c65cd36ef35ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEST_ADD</name>
      <anchorfile>testing_8hh.html</anchorfile>
      <anchor>a98e13fc2ab747319db7d6ff0ef05e0a8</anchor>
      <arglist>(fun)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a99970e9c9930087bb4fb56fc0fd13e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a40cfc957d4082b81ad38e14613c9c574</anchor>
      <arglist>(const StringS &amp;test_names)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a83d9d2a438950e7b41cf1b77bccf205d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>slow</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>ae9b63de19c75bc567541db80d5cb152e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>stringify_arg</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>aa7e77497691e4302963f22aa09da7820</anchor>
      <arglist>(const char *a, const char *str_a)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random_int64</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a8c54e36a0b1eb6aaceb94c8b95b0b87f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>random_irange</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a877cef3bc3a0291ef8788a767424e0c0</anchor>
      <arglist>(int64_t begin, int64_t end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_float</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>aad18e3bd929333195a067dc48d57984e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_frange</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>abd3e28a2bef2935f9d692d6335f53c65</anchor>
      <arglist>(double begin, double end)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>track.hh</name>
    <path>ase/</path>
    <filename>track_8hh.html</filename>
    <includes id="device_8hh" name="device.hh" local="no" imported="no">ase/device.hh</includes>
    <class kind="class">Ase::TrackImpl</class>
    <class kind="class">Ase::TrackImpl::ClipScout</class>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>transport.hh</name>
    <path>ase/</path>
    <filename>transport_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <class kind="struct">Ase::TickSignature</class>
    <class kind="struct">Ase::AudioTransport</class>
    <namespace>Ase</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SpeakerArrangement</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a23ea47c81a3443fd070bc766566acbda</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa3c30649875f80bc4b253621e9cf4aa8e">FRONT_LEFT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa3c590d7552bf5fa1953eb0f05c64acd5">FRONT_RIGHT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa390fb0eb3353fcb11e0dab812303e784">FRONT_CENTER</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaae575bcf1fd2b1608d169e87a189b6842">LOW_FREQUENCY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa312668bcc143fd3778c68442f6c3e32f">BACK_LEFT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa7e77482f99baeaa96a02f36b2f99f387">BACK_RIGHT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaad22b2d6890a5e46ef1adfd9a5b631097">AUX</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaaf5f75f1b95652443e4398974b82c3f7c">MONO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa830dff3c27992cca35a4b46282e10530">STEREO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa5aedc8e0e54387a382c9b4e59f28001c">STEREO_21</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa4b15359c139fa32009eb8d3d4cffb3c3">STEREO_30</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa5d7e407a178adcd6e4c7d6f7b9560886">STEREO_31</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa3f43a2adade71096ad795b5d7d180f28">SURROUND_50</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa42a0150a79ad4b9c692b74d73f2301d1">SURROUND_51</enumvalue>
    </member>
    <member kind="variable">
      <type>constexpr const int64</type>
      <name>TRANSPORT_PPQN</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad3d8f1c1422ee7cde11b909b034611aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unicode.hh</name>
    <path>ase/</path>
    <filename>unicode_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <namespace>Ase</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>string_from_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a281b2d33ab9b2cc6e1859b0dac02a214</anchor>
      <arglist>(const std::vector&lt; uint32_t &gt; &amp;codepoints)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_from_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8056a2fbbef76c711165491bdd11e16b</anchor>
      <arglist>(const uint32_t *codepoints, size_t n_codepoints)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_to_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a77be81d3c82c6d88047f4cb0fcc8407b</anchor>
      <arglist>(const std::string &amp;str, std::vector&lt; uint32_t &gt; &amp;codepoints)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_to_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5f920a7a83b1221b3ed8e1fc0baab297</anchor>
      <arglist>(const char *str, uint32_t *codepoints)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8len</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a98183669e6d8ce9fd8bf62cb8a1feeb4</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8len</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a391cafaef71403f7f074c8c3a106db7a</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_valid</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa23867476ae3528d3303912167a99c2d</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_assigned</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac100b73194ba2d988ca7355e4ea7a708</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_noncharacter</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4d33cc1f67dd1ed599133b5efbec5097</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_character</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a71c59b4f301a345efb0e12ff7c26a621</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_control_code</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ace50dcc7eae6bd882b176e73a4d5be9d</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_private</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2a79e07a7fb3efe31c346e6725a2bc94</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils.hh</name>
    <path>ase/</path>
    <filename>utils_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <includes id="strings_8hh" name="strings.hh" local="no" imported="no">ase/strings.hh</includes>
    <class kind="class">Ase::EventFd</class>
    <class kind="class">Ase::CustomDataKey</class>
    <class kind="class">Ase::CustomDataContainer</class>
    <namespace>Ase</namespace>
    <namespace>Ase::Aux</namespace>
    <member kind="function">
      <type>bool</type>
      <name>debug_enabled</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a449f9f0261ac34122894181007a4ba00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>debug_key_enabled</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0b14f3cca8ca79acca271ef44b19c58a</anchor>
      <arglist>(const char *conditional)</arglist>
    </member>
    <member kind="function">
      <type>::std::string</type>
      <name>debug_key_value</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac7324249103005ab4d9f44044ba82fe5</anchor>
      <arglist>(const char *conditional)</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint16_t</type>
      <name>uint16_swap_le_be</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6f250966a9daae78644b80b2003ab0d2</anchor>
      <arglist>(uint16_t v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint32_t</type>
      <name>uint32_swap_le_be</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a38c2043ec3606cc8ba7001fe3f4d4867</anchor>
      <arglist>(uint32_t v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint64_t</type>
      <name>uint64_swap_le_be</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a02173097b7b0b14bbf10bd6ce9c2da02</anchor>
      <arglist>(uint64_t v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_message</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab2c9ed044d5fc53a5bf9ce76ef7a32f7</anchor>
      <arglist>(const char *cond, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diag_message</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9153a47e8bd43bd6f0ff86b09087101c</anchor>
      <arglist>(uint8 code, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void ASE_ALWAYS_INLINE</type>
      <name>debug</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a61b561c542489e33cb7b2d58f60fde55</anchor>
      <arglist>(const char *cond, const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void ASE_NORETURN</type>
      <name>fatal_error</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6ef4f00d068ceeaa4b381278207a951b</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a825310c84f3383e6a469473b64cef277</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printout</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9452c7c415289ab34701fe967066f231</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printerr</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a34b15b028f6d5b00f8c7f4473e8334ab</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_gettext</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae3dff757c1da35c05447a368e23d4105</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>Container</type>
      <name>container_copy</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a388adb617c327019ee771ef268bc8a20</anchor>
      <arglist>(const Iteratable &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; RandIter, bool &gt;</type>
      <name>binary_lookup_insertion_pos</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>aaabfe1401ee3cf7819e951165fd9c48b</anchor>
      <arglist>(RandIter begin, RandIter end, Cmp cmp_elements, const Arg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>RandIter</type>
      <name>binary_lookup_sibling</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a5df8dde769903d08215110e09b5c8d5c</anchor>
      <arglist>(RandIter begin, RandIter end, Cmp cmp_elements, const Arg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>RandIter</type>
      <name>binary_lookup</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>aa5311324421ec76f4ed56f527526f887</anchor>
      <arglist>(RandIter begin, RandIter end, Cmp cmp_elements, const Arg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase_first</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>aa1b36a8abe26afec664bb7664edbaef2</anchor>
      <arglist>(C &amp;container, const std::function&lt; bool(typename C::value_type const &amp;value)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase_all</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a7a9087c3ad5d4874ee74596d9e6b3a49</anchor>
      <arglist>(C &amp;container, const std::function&lt; bool(typename C::value_type const &amp;value)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>ac726855c456606dd54fd0e59d0395e62</anchor>
      <arglist>(const C &amp;container, const std::function&lt; bool(typename C::value_type const &amp;value)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>insert_sorted</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a2de3c2490a16c9223b7b0577eb84e8e4</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec, const T &amp;value, Compare compare)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>value.hh</name>
    <path>ase/</path>
    <filename>value_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <class kind="struct">Ase::Value</class>
    <class kind="struct">Ase::EnumInfo</class>
    <class kind="struct">Ase::Event</class>
    <class kind="class">Ase::JsTrigger</class>
    <namespace>Ase</namespace>
    <member kind="typedef">
      <type>std::variant&lt; std::monostate, bool, int64, double, String, ValueS, ValueR, InstanceP &gt;</type>
      <name>ValueVariant</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5a42d646b5faa5d9005d337a176028fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wave.hh</name>
    <path>ase/</path>
    <filename>wave_8hh.html</filename>
    <includes id="defs_8hh" name="defs.hh" local="no" imported="no">ase/defs.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>websocket.hh</name>
    <path>ase/</path>
    <filename>websocket_8hh.html</filename>
    <includes id="cxxaux_8hh" name="cxxaux.hh" local="no" imported="no">ase/cxxaux.hh</includes>
    <namespace>Ase</namespace>
  </compound>
  <compound kind="file">
    <name>cliplist.js</name>
    <path>ui/b/</path>
    <filename>cliplist_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>clipview.js</name>
    <path>ui/b/</path>
    <filename>clipview_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>contextmenu.js</name>
    <path>ui/b/</path>
    <filename>contextmenu_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>databubble.vue.js</name>
    <path>ui/b/</path>
    <filename>databubble_8vue_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>envue.js</name>
    <path>ui/b/</path>
    <filename>envue_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>icon.js</name>
    <path>ui/b/</path>
    <filename>icon_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>knob.js</name>
    <path>ui/b/</path>
    <filename>knob_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>menuitem.js</name>
    <path>ui/b/</path>
    <filename>menuitem_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>menurow.js</name>
    <path>ui/b/</path>
    <filename>menurow_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>menuseparator.js</name>
    <path>ui/b/</path>
    <filename>menuseparator_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>menutitle.js</name>
    <path>ui/b/</path>
    <filename>menutitle_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>more.js</name>
    <path>ui/b/</path>
    <filename>more_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>piano-ctrl.js</name>
    <path>ui/b/</path>
    <filename>piano-ctrl_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>pianoroll.js</name>
    <path>ui/b/</path>
    <filename>pianoroll_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>shell.vue.js</name>
    <path>ui/b/</path>
    <filename>shell_8vue_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>colors.js</name>
    <path>ui/</path>
    <filename>colors_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>host.js</name>
    <path>ui/</path>
    <filename>host_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>kbd.js</name>
    <path>ui/</path>
    <filename>kbd_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>little.js</name>
    <path>ui/</path>
    <filename>little_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>postcss.js</name>
    <path>ui/</path>
    <filename>postcss_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>script.js</name>
    <path>ui/</path>
    <filename>script_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>sfc-compile.js</name>
    <path>ui/</path>
    <filename>sfc-compile_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>startup.js</name>
    <path>ui/</path>
    <filename>startup_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>util.js</name>
    <path>ui/</path>
    <filename>util_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>wrapper.js</name>
    <path>ui/</path>
    <filename>wrapper_8js.html</filename>
  </compound>
  <compound kind="file">
    <name>xbcomments.js</name>
    <path>ui/</path>
    <filename>xbcomments_8js.html</filename>
  </compound>
  <compound kind="struct">
    <name>Ase::AlignedPOD</name>
    <filename>struct_ase_1_1_aligned_p_o_d.html</filename>
    <templarg>size_t SIZE</templarg>
  </compound>
  <compound kind="struct">
    <name>Ase::FastMemory::Arena</name>
    <filename>struct_ase_1_1_fast_memory_1_1_arena.html</filename>
    <member kind="function">
      <type></type>
      <name>Arena</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_arena.html</anchorfile>
      <anchor>a66e571bb1e400b4022e77c79e5181b78</anchor>
      <arglist>(uint32 mem_size, uint32 alignment=cache_line_size)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>alignment</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_arena.html</anchorfile>
      <anchor>a2aa7ff2d751f30456f1268c1c132f6f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>location</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_arena.html</anchorfile>
      <anchor>a0810690389af401e7624ccf32c30c130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>reserved</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_arena.html</anchorfile>
      <anchor>a5270efa58c4f626d626c944a13f74bdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>allocate</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_arena.html</anchorfile>
      <anchor>ab8d3e0d5b11d3f61a6b82f78567910c8</anchor>
      <arglist>(uint32 length) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_arena.html</anchorfile>
      <anchor>ac3b099ea5e39760a5a52f4a93b0c0c39</anchor>
      <arglist>(Block allocatedblock) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AllocatorP</type>
      <name>fma</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_arena.html</anchorfile>
      <anchor>ae481b92b08ef46cd0420df95f8939fda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::AsyncBlockingQueue</name>
    <filename>class_ase_1_1_async_blocking_queue.html</filename>
    <templarg>class Value</templarg>
  </compound>
  <compound kind="class">
    <name>Ase::AtomicBits</name>
    <filename>class_ase_1_1_atomic_bits.html</filename>
    <base protection="protected">vector&lt; AtomicU64 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Ase::AtomicIntrusiveStack</name>
    <filename>class_ase_1_1_atomic_intrusive_stack.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_ase_1_1_atomic_intrusive_stack.html</anchorfile>
      <anchor>a683748025ca20a5c5d32ad4f686a6a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>push_chain</name>
      <anchorfile>class_ase_1_1_atomic_intrusive_stack.html</anchorfile>
      <anchor>a4ef7757e893ed558892af8ad7e87d0c1</anchor>
      <arglist>(T *first, T *last)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>push</name>
      <anchorfile>class_ase_1_1_atomic_intrusive_stack.html</anchorfile>
      <anchor>a61cc2b1aa7f702c7746a4ffc9ac184a9</anchor>
      <arglist>(T *el)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>pop_all</name>
      <anchorfile>class_ase_1_1_atomic_intrusive_stack.html</anchorfile>
      <anchor>a433b57666f4192a57d56092b0e36235a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>pop_reversed</name>
      <anchorfile>class_ase_1_1_atomic_intrusive_stack.html</anchorfile>
      <anchor>a2db1d513e468a4bc781dcd9268a84388</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::AudioEngine</name>
    <filename>class_ase_1_1_audio_engine.html</filename>
    <base protection="private">Ase::VirtualBase</base>
    <member kind="variable" static="yes">
      <type>static JobQueue</type>
      <name>async_jobs</name>
      <anchorfile>class_ase_1_1_audio_engine.html</anchorfile>
      <anchor>ace14f925c19c309845398d43b6951c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static JobQueue</type>
      <name>const_jobs</name>
      <anchorfile>class_ase_1_1_audio_engine.html</anchorfile>
      <anchor>a4854de4039fdec25f3a2fa1f1c12ef04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::AudioProcessor</name>
    <filename>class_ase_1_1_audio_processor.html</filename>
    <base>enable_shared_from_this&lt; AudioProcessor &gt;</base>
    <class kind="class">Ase::AudioProcessor::FloatBuffer</class>
    <member kind="function">
      <type>AtomicBits::Iter</type>
      <name>atomic_bits_iter</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a8d83786fc05022f6c615378381406380</anchor>
      <arglist>(size_t pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>note_to_freq</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a335a35417ea1cb19df8943fe8a43c56c</anchor>
      <arglist>(int note) const</arglist>
    </member>
    <member kind="function">
      <type>AudioEngine &amp;</type>
      <name>engine</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a77ea45ed83883ed9467c9e5697598b6b</anchor>
      <arglist>() const ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>const AudioTransport &amp;</type>
      <name>transport</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a49dbc69f870239711d7d506190c38512</anchor>
      <arglist>() const ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nyquist</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aa247118e55958ee4b8837584aec91c7e</anchor>
      <arglist>() const ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inyquist</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ac98ee3acef21f99a407d909b708a1d4f</anchor>
      <arglist>() const ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a3bce6722b2bccc01f84e0292528755a1</anchor>
      <arglist>(Id32 paramid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a9c9b6223aa0aadc58877d050aebc9d2d</anchor>
      <arglist>(Id32 paramid, double value, bool sendnotify=true)</arglist>
    </member>
    <member kind="function">
      <type>ParamInfoP</type>
      <name>param_info</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a6f3ab3386b8586a014a0a60e61607fe8</anchor>
      <arglist>(Id32 paramid) const</arglist>
    </member>
    <member kind="function">
      <type>MaybeParamId</type>
      <name>find_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a8f2ae13b1f2db1eeae7620333f549b04</anchor>
      <arglist>(const String &amp;identifier) const</arglist>
    </member>
    <member kind="function">
      <type>MinMax</type>
      <name>param_range</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ab48b9f04f2193c06b2334c37b1e08950</anchor>
      <arglist>(Id32 paramid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_dirty</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>abd1468b454bebb576493d6c3ef6dbbe3</anchor>
      <arglist>(Id32 paramid) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual String</type>
      <name>param_value_to_text</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a19f8ebf1cf3ff2cf277f34e961eab840</anchor>
      <arglist>(Id32 paramid, double value) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>param_value_from_text</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a751982e0512de6abae694d4e7280adaf</anchor>
      <arglist>(Id32 paramid, const String &amp;text) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_normalized</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a9c506ba06a2aca0620f033a095cf1c47</anchor>
      <arglist>(Id32 paramid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_normalized</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ab0824ae209695af4e2171d40aa1dbca9</anchor>
      <arglist>(Id32 paramid, double normalized, bool sendnotify=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a7cceb42848a4a2d844849eddec1caa57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IBusId</type>
      <name>find_ibus</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a3acf7a1861cad5c1a0fad387dc4e8681</anchor>
      <arglist>(const String &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>OBusId</type>
      <name>find_obus</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>af47788ebaa44a566d49f3c43b65cdfb4</anchor>
      <arglist>(const String &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>n_ibuses</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a5d1835ae090e6f1dc2d9ed3ca83facf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>n_obuses</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ac966cf9012f9564889595efed8a6750f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>n_ichannels</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ae05d79df63e44c9395c28370631bc38a</anchor>
      <arglist>(IBusId busid) const</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>n_ochannels</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a5d8470205091cd657c878b4b1db91e4e</anchor>
      <arglist>(OBusId busid) const</arglist>
    </member>
    <member kind="function">
      <type>BusInfo</type>
      <name>bus_info</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a327f77ef78167c5d4957f851e7f03ede</anchor>
      <arglist>(IBusId busid) const</arglist>
    </member>
    <member kind="function">
      <type>BusInfo</type>
      <name>bus_info</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>af64c183d7397a9bae474d40ebd413af3</anchor>
      <arglist>(OBusId busid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ab355aa4aebb27794fda7eb022e2da060</anchor>
      <arglist>(OBusId obusid) const</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>ifloats</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a35449d51833e9b2163a671ac12c182b3</anchor>
      <arglist>(IBusId b, uint c) const</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>ofloats</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a73605664d1f4f393a2329e6755045f7f</anchor>
      <arglist>(OBusId b, uint c) const</arglist>
    </member>
    <member kind="function">
      <type>DeviceP</type>
      <name>get_device</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>afd879275ff794553cad7c0ac8351a809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_event_input</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a7ac9b0ba6fdbbca816eb66768e2a1e76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_event_output</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ad87944ed79f9cfbe93abac4f66a5ef5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_event_input</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a94b5aec37b7f577f1fc837401602f415</anchor>
      <arglist>(AudioProcessor &amp;oproc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect_event_input</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ae9f02848ec219795409a371d81e71a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_engine_output</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ab6b5a594318056c76e44dfb62ef83af0</anchor>
      <arglist>(bool onoff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>timestamp</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a1668408d9b3d608d207f97bf61715055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>param_peek_mt</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ad328c409f1c00c27118e06cda066e32a</anchor>
      <arglist>(const AudioProcessorP proc, Id32 paramid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registry_add</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>adcd259c1115a7514efa3e6e195d059da</anchor>
      <arglist>(CString aseid, StaticInfo, MakeProcessorP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registry_foreach</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a9ea624a9f124e4194d7690c0830db973</anchor>
      <arglist>(const std::function&lt; void(const String &amp;aseid, StaticInfo)&gt; &amp;fun)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>GUIONLY</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a11c730d8944c21c694a588f598c71c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>STANDARD</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>af1f7f009d9fd143be873fb7b0645bb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const String</type>
      <name>STORAGEONLY</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>afc6dcb01be5faab9bb5447adb0768e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AudioProcessor</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a3fae1c7ec9408e106ad36488de05c19f</anchor>
      <arglist>(AudioEngine &amp;engine)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AudioProcessor</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ac3052fda43253f5c00be380a3253278d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ab25b100b38c8faf3cfd42adc02aedcd1</anchor>
      <arglist>(SpeakerArrangement busses)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enotify_enqueue_mt</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a2ee3d0bbed0e07e59c99ebc082f17756</anchor>
      <arglist>(uint32 pushmask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint</type>
      <name>schedule_processor</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aca720cb60bbcce1afd00b5ab40ea5c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reschedule</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a82c9b42b5a2ca52b85bba1f2ac5706a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>nextid</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a2194f44762e0877b342eea77b5bcdd00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>add_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a075b9566df18b83426010791f301c5e3</anchor>
      <arglist>(Id32 id, const ParamInfo &amp;infotmpl, double value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>add_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a2e820dcc0dfb1dd2b40f43c6958c3248</anchor>
      <arglist>(Id32 id, const String &amp;clabel, const String &amp;nickname, double pmin, double pmax, double value, const String &amp;unit=&quot;&quot;, String hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>add_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ab70b8198bea3bb27591d2e142e7955f7</anchor>
      <arglist>(Id32 id, const String &amp;clabel, const String &amp;nickname, ChoiceS &amp;&amp;centries, double value, String hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>add_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aa78325b9b563d872169c1ea272b9d5d0</anchor>
      <arglist>(Id32 id, const String &amp;clabel, const String &amp;nickname, bool boolvalue, String hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>start_group</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a138549f6c91f5cadefcc456bbf7b085e</anchor>
      <arglist>(const String &amp;groupname) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>add_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aedd0441643b2e0fb9dfd3d05415c3ea9</anchor>
      <arglist>(const String &amp;clabel, const String &amp;nickname, double pmin, double pmax, double value, const String &amp;unit=&quot;&quot;, String hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>add_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a35c75d37491889126b1b5aa5cb4b523e</anchor>
      <arglist>(const String &amp;clabel, const String &amp;nickname, ChoiceS &amp;&amp;centries, double value, String hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParamId</type>
      <name>add_param</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a2c6248afbe57e8ad0bf6e7e59b371814</anchor>
      <arglist>(const String &amp;clabel, const String &amp;nickname, bool boolvalue, String hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>peek_param_mt</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aa76e7bab794e3db7b3d3c05bd38099ca</anchor>
      <arglist>(Id32 paramid) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IBusId</type>
      <name>add_input_bus</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>abff24938665883b6c1fa9b1c136c5238</anchor>
      <arglist>(CString uilabel, SpeakerArrangement speakerarrangement, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OBusId</type>
      <name>add_output_bus</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a69b2201236f4f57f9953d2023cec8e91</anchor>
      <arglist>(CString uilabel, SpeakerArrangement speakerarrangement, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_all_buses</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a32b2d957aac44a5f0431d758a98a28c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OBus &amp;</type>
      <name>iobus</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a0f8466c28f11914dc60ba3e4fe321824</anchor>
      <arglist>(OBusId busid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IBus &amp;</type>
      <name>iobus</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a217cccfd2f9c936f2e509cc52432b6c2</anchor>
      <arglist>(IBusId busid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disconnect_ibuses</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>adc939418e008990ac1b49307cf874ab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disconnect_obuses</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aa18307dfe336489244f7cb86d21d5446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>ab0aa1a6c8b0da02855975378884bf2f7</anchor>
      <arglist>(IBusId ibus)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connect</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>af9645660bb1ce204d208e5ddcf14402b</anchor>
      <arglist>(IBusId ibus, AudioProcessor &amp;oproc, OBusId obus)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>float *</type>
      <name>oblock</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aee38ce7740c39ea167e06c0a756eba8a</anchor>
      <arglist>(OBusId b, uint c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign_oblock</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>af90879c55af4e12a737ab74781a6676c</anchor>
      <arglist>(OBusId b, uint c, float val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>redirect_oblock</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a2db20534e453cda1f9bde2737bd456b0</anchor>
      <arglist>(OBusId b, uint c, const float *block)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepare_event_input</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a3e46d24cd58036a48916e8e967bf5725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MidiEventRange</type>
      <name>get_event_input</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a9db19994b78b6fb39285452b5c7d3d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepare_event_output</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a82e54d7d4dfac6f432ec75d17f992e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MidiEventStream &amp;</type>
      <name>get_event_output</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a31dcd653f3b439e03c4c95d44ef86125</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>atomic_bits_resize</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a7ce6e8f1ebb9d755194ac28348b90453</anchor>
      <arglist>(size_t count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>atomic_bit_notify</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>aa1d282b9dd8055c221136bb7f2cb94a5</anchor>
      <arglist>(size_t nth)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>a25f75ad556ae6b5659a81bef7a8e6e59</anchor>
      <arglist>(uint n_frames)=0</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_ase_1_1_audio_processor.html</anchorfile>
      <anchor>af8df19bdb11d20b775058062ee15c75b</anchor>
      <arglist>(uint64 target_stamp)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::AudioProcessorInfo</name>
    <filename>struct_ase_1_1_audio_processor_info.html</filename>
    <member kind="variable">
      <type>CString</type>
      <name>label</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>ab2bf3a959205de580bd5cb2131740ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>version</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>a3aeaa7ce18198256acd75535cf624332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>category</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>ae0a4b6b1db700ae2b3f0db3127fc9842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>blurb</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>a94a4d2eefe04de3c9e79a1ac4969e72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>description</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>a3ef8cb7a1babd1c0db71c0e7d05d49c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>website_url</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>a0670d3bd7d10339d882a989db9fae031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>creator_name</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>a97d89d6a306aff27961459ddec3a9648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>creator_url</name>
      <anchorfile>struct_ase_1_1_audio_processor_info.html</anchorfile>
      <anchor>a63c06d0a7f88e76ca5371eae68f88aef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::AudioTransport</name>
    <filename>struct_ase_1_1_audio_transport.html</filename>
    <member kind="function" virtualness="pure">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>aea2078c20053d555b8937cb7c82cdf9f</anchor>
      <arglist>((aligned(64))) double current_tick_d=0</arglist>
    </member>
    <member kind="variable">
      <type>const uint</type>
      <name>samplerate</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a1a16cfd26ba7912dc344bd8ec6eca54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint</type>
      <name>nyquist</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a0b0afb8fcc768452938842da6b13aaa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>isamplerate</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a1bddc587ad8715624151cd4a3716befb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>inyquist</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>abc1d3f1d15b132433dfb93f499cc30cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SpeakerArrangement</type>
      <name>speaker_arrangement</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>adcde37991dde46bb8cf5ae96e5f76ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>current_frame</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a369106062bbb86026ba41765700ea756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>current_bar</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a055511dd35d483572a3ce34ddc7ac257</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8</type>
      <name>current_beat</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a3f785fc15048244ee5f49b0a63097b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>current_semiquaver</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a0804a92f4c43da7618da45b785135d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>current_bpm</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a41a6ebd9b943b0eab67c6538b715ac25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>current_minutes</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a52307468855f614a87732a61a8af8f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>current_seconds</name>
      <anchorfile>struct_ase_1_1_audio_transport.html</anchorfile>
      <anchor>a2e323e5b9ba6435cd2fcc395b21ada3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::AutoSeeder</name>
    <filename>class_ase_1_1_auto_seeder.html</filename>
    <member kind="function">
      <type>uint64</type>
      <name>operator()</name>
      <anchorfile>class_ase_1_1_auto_seeder.html</anchorfile>
      <anchor>a57b98c5781b31aad9c4b8bfc773fed77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>class_ase_1_1_auto_seeder.html</anchorfile>
      <anchor>a598e4d8763a9568056a07414fa5a795e</anchor>
      <arglist>(RandomAccessIterator begin, RandomAccessIterator end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>random</name>
      <anchorfile>class_ase_1_1_auto_seeder.html</anchorfile>
      <anchor>a68d4220f4a962064f30a316ce5d59c6f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::BacktraceCommand</name>
    <filename>struct_ase_1_1_backtrace_command.html</filename>
    <member kind="function">
      <type></type>
      <name>BacktraceCommand</name>
      <anchorfile>struct_ase_1_1_backtrace_command.html</anchorfile>
      <anchor>abd2fe509eb2de67bb576c24ee593c065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_backtrace</name>
      <anchorfile>struct_ase_1_1_backtrace_command.html</anchorfile>
      <anchor>a9fef5eddbdb03d343a32426070471c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>command</name>
      <anchorfile>struct_ase_1_1_backtrace_command.html</anchorfile>
      <anchor>a954c658f309c7912487ff364506c21ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>message</name>
      <anchorfile>struct_ase_1_1_backtrace_command.html</anchorfile>
      <anchor>aa71c5d800ec1d9468e42cea0c72e224a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Properties::Bag</name>
    <filename>class_ase_1_1_properties_1_1_bag.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::Blob</name>
    <filename>class_ase_1_1_blob.html</filename>
    <member kind="function">
      <type>String</type>
      <name>name</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>a8b957422e64477048814160419ee5632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>a8d03d70c718ede99e663229a8520a25a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const uint8 *</type>
      <name>bytes</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>a76fffafd023b867e048517f526201dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>ac523abc65a0107e4f25e2ab6e6777543</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>af43dbbd2d798b32f20df2494b7f683bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Blob</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>afce0e6bae4f0d4c7e11353ed730840e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Blob</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>a870a1c6e8a6b2e3021b495dc70507a70</anchor>
      <arglist>(const String &amp;auto_url)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>a1443b3dd151ebf64c79e463cec08fdf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Blob</type>
      <name>from_file</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>a0e58cb64ff36107ef29f4cc2691a713f</anchor>
      <arglist>(const String &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Blob</type>
      <name>from_url</name>
      <anchorfile>class_ase_1_1_blob.html</anchorfile>
      <anchor>a7ce44c6ac02c8e9a499cd8b49250ec27</anchor>
      <arglist>(const String &amp;url)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::FastMemory::Block</name>
    <filename>struct_ase_1_1_fast_memory_1_1_block.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::BorrowedPtr</name>
    <filename>class_ase_1_1_borrowed_ptr.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>Ase::BusInfo</name>
    <filename>struct_ase_1_1_bus_info.html</filename>
    <member kind="function">
      <type>uint</type>
      <name>n_channels</name>
      <anchorfile>struct_ase_1_1_bus_info.html</anchorfile>
      <anchor>a3553c2581b2a6be9b6c86410efdbc1db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>ident</name>
      <anchorfile>struct_ase_1_1_bus_info.html</anchorfile>
      <anchor>aa372b75864edfdf1a0588fd9d5d4b88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>label</name>
      <anchorfile>struct_ase_1_1_bus_info.html</anchorfile>
      <anchor>a6275ad98a102d08d5cf65cebda8c26a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>hints</name>
      <anchorfile>struct_ase_1_1_bus_info.html</anchorfile>
      <anchor>abac05dcaa8665f9dcdc6c0a0af22fc6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>blurb</name>
      <anchorfile>struct_ase_1_1_bus_info.html</anchorfile>
      <anchor>a8b06f55595ceb9d8ae46315357a84197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpeakerArrangement</type>
      <name>speakers</name>
      <anchorfile>struct_ase_1_1_bus_info.html</anchorfile>
      <anchor>a3f330dca0a58e0abadd407ed2fc44b6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::Choice</name>
    <filename>struct_ase_1_1_choice.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>ident</name>
      <anchorfile>struct_ase_1_1_choice.html</anchorfile>
      <anchor>a7aefce518cde6784e1360512e25e9000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>icon</name>
      <anchorfile>struct_ase_1_1_choice.html</anchorfile>
      <anchor>a7d76390bdcc3fb23328f8abe200063bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>label</name>
      <anchorfile>struct_ase_1_1_choice.html</anchorfile>
      <anchor>afeec5aa0933195ff0a85a65981e275ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>blurb</name>
      <anchorfile>struct_ase_1_1_choice.html</anchorfile>
      <anchor>ae748ac0fb4d90ec9509847732fc64a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>notice</name>
      <anchorfile>struct_ase_1_1_choice.html</anchorfile>
      <anchor>acd102bc280ef6b8d7e3415901919275f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>warning</name>
      <anchorfile>struct_ase_1_1_choice.html</anchorfile>
      <anchor>a7094c6f834738950f6cdfc10306a6064</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Clip</name>
    <filename>class_ase_1_1_clip.html</filename>
    <base virtualness="virtual">Ase::Gadget</base>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>start_tick</name>
      <anchorfile>class_ase_1_1_clip.html</anchorfile>
      <anchor>a7230b7e49a54456d10a26f0107aa253c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>stop_tick</name>
      <anchorfile>class_ase_1_1_clip.html</anchorfile>
      <anchor>aa5315b725598a161d9e853eec6a957c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>end_tick</name>
      <anchorfile>class_ase_1_1_clip.html</anchorfile>
      <anchor>ad26447ef3abc7aeeb4c1d76c0e0c15d4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assign_range</name>
      <anchorfile>class_ase_1_1_clip.html</anchorfile>
      <anchor>a715199920ce0a6105daab2771ed51adf</anchor>
      <arglist>(int64 starttick, int64 stoptick)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ClipNoteS</type>
      <name>all_notes</name>
      <anchorfile>class_ase_1_1_clip.html</anchorfile>
      <anchor>a3ffc9d8522fe084f88546f925a30ccda</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32</type>
      <name>change_batch</name>
      <anchorfile>class_ase_1_1_clip.html</anchorfile>
      <anchor>a13b4f9a8f70211fdef5f19d769444e3a</anchor>
      <arglist>(const ClipNoteS &amp;notes, const String &amp;undogroup=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ClipNoteS</type>
      <name>list_all_notes</name>
      <anchorfile>class_ase_1_1_clip.html</anchorfile>
      <anchor>af252710e1501bbbdc4c11ca02bf1199b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::ClipNote</name>
    <filename>struct_ase_1_1_clip_note.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>a64d0c52becf8d23448a3dfad3a1f97a4</anchor>
      <arglist>(const ClipNote &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type>int8</type>
      <name>channel</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>a7eca97b2920f098252aba53ff78b3554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8</type>
      <name>key</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>ad51460ef4d46bc3236ebcd3434eea35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>selected</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>a534ed3273f3d6af2de6b7d89db6c91a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>tick</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>a20210a2dfe8992247f60e6e4eb537a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>duration</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>a7976da498267ca744ac30d85045eaeb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>velocity</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>a5612dfeb61293d381e5de6324712ba83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fine_tune</name>
      <anchorfile>struct_ase_1_1_clip_note.html</anchorfile>
      <anchor>ad74456b0353e6d0e2ce41b1b91a2f679</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::TrackImpl::ClipScout</name>
    <filename>class_ase_1_1_track_impl_1_1_clip_scout.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>class_ase_1_1_track_impl_1_1_clip_scout.html</anchorfile>
      <anchor>aac5d82222b8d4c59aaa67e44fe59d74c</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advance</name>
      <anchorfile>class_ase_1_1_track_impl_1_1_clip_scout.html</anchorfile>
      <anchor>a7b02dceb23e623d4b8c39c981422c517</anchor>
      <arglist>(int previous)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>class_ase_1_1_track_impl_1_1_clip_scout.html</anchorfile>
      <anchor>abd32214e84717175c790cd0b860712cc</anchor>
      <arglist>(const ClipScout &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_ase_1_1_track_impl_1_1_clip_scout.html</anchorfile>
      <anchor>aa3ab190b04abc0235c7cad0b76d3fd82</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::ConvertJsTrigger</name>
    <filename>struct_ase_1_1_convert_js_trigger.html</filename>
  </compound>
  <compound kind="struct">
    <name>Ase::ConvertValue</name>
    <filename>struct_ase_1_1_convert_value.html</filename>
  </compound>
  <compound kind="struct">
    <name>Ase::ConvertValueP</name>
    <filename>struct_ase_1_1_convert_value_p.html</filename>
  </compound>
  <compound kind="struct">
    <name>Ase::ConvertValueR</name>
    <filename>struct_ase_1_1_convert_value_r.html</filename>
  </compound>
  <compound kind="struct">
    <name>Ase::ConvertValueRP</name>
    <filename>struct_ase_1_1_convert_value_r_p.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::CString</name>
    <filename>class_ase_1_1_c_string.html</filename>
    <member kind="function">
      <type>CString &amp;</type>
      <name>assign</name>
      <anchorfile>class_ase_1_1_c_string.html</anchorfile>
      <anchor>a190cfc2963ed45366b8394cdcd42a735</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>class_ase_1_1_c_string.html</anchorfile>
      <anchor>accdefed6df5c185790f37b02f132eb46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CString</type>
      <name>lookup</name>
      <anchorfile>class_ase_1_1_c_string.html</anchorfile>
      <anchor>a19acb2cec73f004316c037b343d6c3b0</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::CustomDataContainer</name>
    <filename>class_ase_1_1_custom_data_container.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>acd524fb742ea2f58bb68878a7552b3d0</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key, T data)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a327f3ffb1c6adcac1279e4b5883cbdab</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a526b8883a8b0fe2457dc9a9751c2208e</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>del_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a608bf027faa9105307ad21252f7beb89</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::CustomDataKey</name>
    <filename>class_ase_1_1_custom_data_key.html</filename>
    <templarg>typename T</templarg>
    <base>Ase::VirtualBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>fallback</name>
      <anchorfile>class_ase_1_1_custom_data_key.html</anchorfile>
      <anchor>a853484ee773012f30fa0a5de7e444bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>type</name>
      <anchorfile>class_ase_1_1_custom_data_key.html</anchorfile>
      <anchor>ad1baff81b46fed5192abc93f152a88fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Device</name>
    <filename>class_ase_1_1_device.html</filename>
    <base virtualness="virtual">Ase::Gadget</base>
    <member kind="function">
      <type>Track *</type>
      <name>_track</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a6f9890f79ad87593445c8c49fe4f1b33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioProcessorP</type>
      <name>_audio_processor</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>aadea8afefc18b189fda6418718668970</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_activate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>ac0cd749f20826afe7c6ff0e6d145dba8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_deactivate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a8153eef02cc3363f38d3c693c5f0eccc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_disconnect_remove</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a503a4c501b76627afdb0227409446311</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_active</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a27abcd125cd03f3ba3117cfccc475488</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceInfo</type>
      <name>device_info</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>afbdd7a8bb49a66db0ae1219bb0a94630</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_self</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a561079106abe0b1ca006a0d1570f23b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gui_toggle</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a334dccbc0ff22c6efce946151b09f265</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_supported</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a858701db60feaf97c82abc686aff5635</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_visible</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a1d824917cfd70557186375e6d85264be</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::DeviceInfo</name>
    <filename>struct_ase_1_1_device_info.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>uri</name>
      <anchorfile>struct_ase_1_1_device_info.html</anchorfile>
      <anchor>a3b7d6bd94c84de9a1b7334fb81f0bd19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>struct_ase_1_1_device_info.html</anchorfile>
      <anchor>a31add9a01e6b0da9528925d7502aeb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>category</name>
      <anchorfile>struct_ase_1_1_device_info.html</anchorfile>
      <anchor>ad8f6ae1706c8a9f996ce58e72a86735e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>description</name>
      <anchorfile>struct_ase_1_1_device_info.html</anchorfile>
      <anchor>a7a47a1a9e3582d28dd4e28addcf2d47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>website_url</name>
      <anchorfile>struct_ase_1_1_device_info.html</anchorfile>
      <anchor>ae63303279b5954d37096e9ada0394cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>creator_name</name>
      <anchorfile>struct_ase_1_1_device_info.html</anchorfile>
      <anchor>a0b7585df0e6598b6f0d713229bb2dfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>creator_url</name>
      <anchorfile>struct_ase_1_1_device_info.html</anchorfile>
      <anchor>a35a1771d058bf5d7d3bebbb7ea6e06b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::DispatcherSource</name>
    <filename>class_ase_1_1_dispatcher_source.html</filename>
    <base virtualness="virtual">Ase::EventSource</base>
    <member kind="function">
      <type>bool</type>
      <name>recursion</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>aa58d3766cdb86d2af6c213c8c1fb58f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>ae3e568f0e26e2d7819591151ff93767e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a6edf22d4366db9d278738253bdc13561</anchor>
      <arglist>(bool may_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a0e84486db9f4508170a2189b0894af0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>af755cb3da5c26790be85e30b11569cf5</anchor>
      <arglist>(bool is_primary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a21a06a6a9bf428141ee94c0fc054eb3f</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a626f58739285ea9745bd12bc9e06e0bd</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop_remove</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a2cbc7b23b33183403946eeaecb74b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MainLoop *</type>
      <name>main_loop</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a547206d54bc57366893278e582d088e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>class_ase_1_1_dispatcher_source.html</anchorfile>
      <anchor>a7b3939b8925f9830e2dcd54ccf4abaac</anchor>
      <arglist>(const LoopState &amp;state, int64 *timeout_usecs_p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>class_ase_1_1_dispatcher_source.html</anchorfile>
      <anchor>af5e1c42234e2e8ca1811421780b88eb6</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>class_ase_1_1_dispatcher_source.html</anchorfile>
      <anchor>a44bfc264424394c950c7ae139c9f56d0</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::DriverEntry</name>
    <filename>struct_ase_1_1_driver_entry.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::Emittable</name>
    <filename>class_ase_1_1_emittable.html</filename>
    <base virtualness="virtual">Ase::SharedBase</base>
  </compound>
  <compound kind="class">
    <name>Ase::EmittableImpl</name>
    <filename>class_ase_1_1_emittable_impl.html</filename>
    <base virtualness="virtual">Ase::Emittable</base>
    <member kind="function">
      <type>void</type>
      <name>emit_notify</name>
      <anchorfile>class_ase_1_1_emittable_impl.html</anchorfile>
      <anchor>af5fad81722713d48cacff12477d1b877</anchor>
      <arglist>(const String &amp;detail)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::EnumInfo</name>
    <filename>struct_ase_1_1_enum_info.html</filename>
    <member kind="function" static="yes">
      <type>static EnumInfo</type>
      <name>value_info</name>
      <anchorfile>struct_ase_1_1_enum_info.html</anchorfile>
      <anchor>aab7e7538248a3d5caa55ec61b986deaa</anchor>
      <arglist>(const std::type_info &amp;enumtype, int64 value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::Event</name>
    <filename>struct_ase_1_1_event.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::EventFd</name>
    <filename>class_ase_1_1_event_fd.html</filename>
    <member kind="function">
      <type>int</type>
      <name>open</name>
      <anchorfile>class_ase_1_1_event_fd.html</anchorfile>
      <anchor>ad5eb75523f543c0e571dd842854deec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>opened</name>
      <anchorfile>class_ase_1_1_event_fd.html</anchorfile>
      <anchor>a00fef8ccf6c44377c9b8aa7309d3bee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeup</name>
      <anchorfile>class_ase_1_1_event_fd.html</anchorfile>
      <anchor>af77b8316bab7a72d08898f9cda47927f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inputfd</name>
      <anchorfile>class_ase_1_1_event_fd.html</anchorfile>
      <anchor>a213d081683551b3dc375f9ba5ef22640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pollin</name>
      <anchorfile>class_ase_1_1_event_fd.html</anchorfile>
      <anchor>abcce87cdef015ae803dd61a9db7d6475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_ase_1_1_event_fd.html</anchorfile>
      <anchor>a19d72e0434b778d932f5396d79f1c5a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::EventList</name>
    <filename>class_ase_1_1_event_list.html</filename>
    <templarg>class Event</templarg>
    <templarg>class Compare</templarg>
    <member kind="function">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>a61da3a840332a5cb19546181a3f466b9</anchor>
      <arglist>(const Event &amp;event, Event *replaced=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>a3757eb235f7a1bfa2804ece59af9091f</anchor>
      <arglist>(const Event &amp;event, Event *removed=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const Event *</type>
      <name>lookup</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>a95329d50901bbb098de8986e92b57661</anchor>
      <arglist>(const Event &amp;event) const</arglist>
    </member>
    <member kind="function">
      <type>const Event *</type>
      <name>lookup_after</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>ad2abfcc9d3a91c3d8b7cb3e7f262324c</anchor>
      <arglist>(const Event &amp;event) const</arglist>
    </member>
    <member kind="function">
      <type>const Event *</type>
      <name>first</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>af0512a8fde64b650b5c1eec451adccc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Event *</type>
      <name>last</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>afcd6e70200021b22d399aee601484473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>aa26bc71a538742d161900001f1c223d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_silently</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>a59e526f64b45b8bdfc5559adba3c7202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrderedEventList::ConstP</type>
      <name>ordered_events</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>a5ee7d3f485daa6aa3dfaa7637da98551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CIter</type>
      <name>begin</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>a644338c8f0f5762c06e569a96256e653</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CIter</type>
      <name>end</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>a4ece25860da1a0941d77dcba11d836ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EventVector</type>
      <name>copy</name>
      <anchorfile>class_ase_1_1_event_list.html</anchorfile>
      <anchor>aaf33d9a994fa4a090c0f46f0e0a7d552</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::EventLoop</name>
    <filename>class_ase_1_1_event_loop.html</filename>
    <base virtualness="virtual">enable_shared_from_this&lt; EventLoop &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>wakeup</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a0bc5de58ac63bcb8e194d11836bc0ba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>add</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ae06765bef494ca84bbbca049d6fb0c34</anchor>
      <arglist>(EventSourceP loop_source, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a2e74b3c5ebda3b11ec7b537d466b5f16</anchor>
      <arglist>(uint id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_remove</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ad92b660c1e215a1357e1705b9f3ddf02</anchor>
      <arglist>(uint id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_source</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a23b7779bb4e838d6c92b5c3a4731fb77</anchor>
      <arglist>(uint *id_pointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy_loop</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a106ba2cdfd7e166653f0d75bd8358cf3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_primary</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a08e12e882042cc9c8392398b0cfff339</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>MainLoop *</type>
      <name>main_loop</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a7b3ac2a66058d6190beb44dfb0b7ff36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_now</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a9dde5f0f10e9ae09780389e338feef2a</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_callback</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>aa66726a8c3c51dc15b917ec5a9ab6175</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_idle</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a296a5fdf67e9d189d6b09800e2e355e9</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_usignal</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a2fe725ef35bdb23620e651d7302ce605</anchor>
      <arglist>(int8 signum, const USignalSlot &amp;sl, int priority=PRIORITY_NOW -1)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_timer</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a63f2165ed691bd592e4af52c7f244429</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf, uint delay_ms, int64 repeat_ms=-1, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_io_handler</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a3d06dcd6d3fdd090caec0a9941005b8a</anchor>
      <arglist>(BoolVoidPollFunctor &amp;&amp;bvf, int fd, const String &amp;mode, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_CEILING</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a3c1c03c047837015dabe7abb7fc60e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_NOW</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>affe6674cbc2a1f9fec4c82e28347b652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_ASCENT</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ac86400e6228e095100f655f085ada142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_HIGH</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a68ba3408f8b5bcf5a0d4bdd2c2a4700e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_NEXT</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ae15555175d1a7bd5b2a38d66fc079c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_NORMAL</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a30820c584142895fd706cb398ef7d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_UPDATE</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a55b18b2105ac8ebf6c4752447ae8fcb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_IDLE</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ac21cde2828091be87c69a0dd98df0679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_LOW</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ae92d13b16632fe75a02610e321618576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::EventSource</name>
    <filename>class_ase_1_1_event_source.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a9e025353e89079d08dccb66d5359dacf</anchor>
      <arglist>(const LoopState &amp;state, int64 *timeout_usecs_p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a99bc9648271dbd1fde160af4b8a5239a</anchor>
      <arglist>(const LoopState &amp;state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a89e91e0880067af25b79eb7421f4b0d4</anchor>
      <arglist>(const LoopState &amp;state)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recursion</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>aa58d3766cdb86d2af6c213c8c1fb58f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>ae3e568f0e26e2d7819591151ff93767e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a6edf22d4366db9d278738253bdc13561</anchor>
      <arglist>(bool may_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a0e84486db9f4508170a2189b0894af0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>af755cb3da5c26790be85e30b11569cf5</anchor>
      <arglist>(bool is_primary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a21a06a6a9bf428141ee94c0fc054eb3f</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a626f58739285ea9745bd12bc9e06e0bd</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop_remove</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a2cbc7b23b33183403946eeaecb74b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MainLoop *</type>
      <name>main_loop</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a547206d54bc57366893278e582d088e2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::FastMemArray</name>
    <filename>class_ase_1_1_fast_mem_array.html</filename>
    <templarg>typename T</templarg>
    <templarg>size_t ALIGNMENT</templarg>
  </compound>
  <compound kind="class">
    <name>Ase::AudioProcessor::FloatBuffer</name>
    <filename>class_ase_1_1_audio_processor_1_1_float_buffer.html</filename>
  </compound>
  <compound kind="union">
    <name>Ase::FloatIEEE754</name>
    <filename>union_ase_1_1_float_i_e_e_e754.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const float</type>
      <name>EPSILON</name>
      <anchorfile>union_ase_1_1_float_i_e_e_e754.html</anchorfile>
      <anchor>aaa42a09e955bd50e21ebecf015f3e522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const int</type>
      <name>BIAS</name>
      <anchorfile>union_ase_1_1_float_i_e_e_e754.html</anchorfile>
      <anchor>a2aed8370d64cd1068e54f1410be1dc19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const float</type>
      <name>FMAX</name>
      <anchorfile>union_ase_1_1_float_i_e_e_e754.html</anchorfile>
      <anchor>ac11d7dff1751ca6228bb707029d6a38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const float</type>
      <name>FMIN</name>
      <anchorfile>union_ase_1_1_float_i_e_e_e754.html</anchorfile>
      <anchor>a47ee9f27951a22aaf8a4c809c93b8644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const float</type>
      <name>SMAX</name>
      <anchorfile>union_ase_1_1_float_i_e_e_e754.html</anchorfile>
      <anchor>a64b5b6afb635f5de5b47f831122e1b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr const float</type>
      <name>SMIN</name>
      <anchorfile>union_ase_1_1_float_i_e_e_e754.html</anchorfile>
      <anchor>a24a982960c609d6b5c66022cac992173</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::FriendAllocator</name>
    <filename>class_ase_1_1_friend_allocator.html</filename>
    <templarg>class T</templarg>
    <base>allocator&lt; T &gt;</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>construct</name>
      <anchorfile>class_ase_1_1_friend_allocator.html</anchorfile>
      <anchor>ab5cb189f61d78a80a8392a6f6e379304</anchor>
      <arglist>(C *p, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>class_ase_1_1_friend_allocator.html</anchorfile>
      <anchor>ab697f1539d2f5f9d5ba59eddb5324fef</anchor>
      <arglist>(C *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; T &gt;</type>
      <name>make_shared</name>
      <anchorfile>class_ase_1_1_friend_allocator.html</anchorfile>
      <anchor>aabd98e1e129f500e98893913c68a2959</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Gadget</name>
    <filename>class_ase_1_1_gadget.html</filename>
    <base virtualness="virtual">Ase::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::GadgetImpl</name>
    <filename>class_ase_1_1_gadget_impl.html</filename>
    <base>Ase::ObjectImpl</base>
    <base>Ase::CustomDataContainer</base>
    <base virtualness="virtual">Ase::Gadget</base>
    <base virtualness="virtual">Ase::Serializable</base>
    <member kind="function">
      <type>void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a6d534e0a27cd271f4809bd866ed7db28</anchor>
      <arglist>(GadgetImpl *parent) override</arglist>
    </member>
    <member kind="function">
      <type>GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a0282a89f8eb1adf813056583d769e7cd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a46a6ee8c9452f0dfb17a895e207ed75a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a6a041c6f97997888622adb3fa4ad8d8e</anchor>
      <arglist>(const String &amp;key, const Value &amp;v) override</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a5a87f6e0a2ef17d355cf8a739f2fd10c</anchor>
      <arglist>(const String &amp;key) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit_notify</name>
      <anchorfile>class_ase_1_1_emittable_impl.html</anchorfile>
      <anchor>af5fad81722713d48cacff12477d1b877</anchor>
      <arglist>(const String &amp;detail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>acd524fb742ea2f58bb68878a7552b3d0</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key, T data)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a327f3ffb1c6adcac1279e4b5883cbdab</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a526b8883a8b0fe2457dc9a9751c2208e</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>del_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a608bf027faa9105307ad21252f7beb89</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key)</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a82d3365363e933c43a3ea8474b541978</anchor>
      <arglist>(WritNode &amp;xs) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::ClipImpl::Generator</name>
    <filename>class_ase_1_1_clip_impl_1_1_generator.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(int64 tick, MidiEvent &amp;event)&gt;</type>
      <name>Receiver</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a8218c5f760bf51bf953406fa781780e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a0e5f2789293cda547d0f9772c769dbe2</anchor>
      <arglist>(const ClipImpl &amp;clip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpto</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a7c12265ecaf801d4b2b76b37c0a63a8b</anchor>
      <arglist>(int64 target_tick)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>generate</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a782427e6d672184c140c88311198a874</anchor>
      <arglist>(int64 target_tick, const Receiver &amp;receiver)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>muted</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a25a8248c1ae1a46a09975d3ea308c8e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>muted</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>ae2f371e415554a19b17d60614b4b8188</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>start_offset</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a7bfedd01cb91d35cabb25207ca844690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>loop_start</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a75ebb7a61b0e4c81009208673ebc41af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>loop_end</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>afa64c18b5e42e8edbad8544b66b1aad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>play_length</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>aed6775247d3a6e9c5c24a1f282237687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>play_position</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>aa253cd751489dfc60e9d46b8bd5c4c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a2d0b96b37c89c0ee22d3f806bb399cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>clip_position</name>
      <anchorfile>class_ase_1_1_clip_impl_1_1_generator.html</anchorfile>
      <anchor>a41e6e65d5cb6e277e5b05d80e6885bb4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::GroupId</name>
    <filename>struct_ase_1_1_group_id.html</filename>
    <base>Ase::CString</base>
    <member kind="function">
      <type>CString &amp;</type>
      <name>assign</name>
      <anchorfile>class_ase_1_1_c_string.html</anchorfile>
      <anchor>a190cfc2963ed45366b8394cdcd42a735</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>class_ase_1_1_c_string.html</anchorfile>
      <anchor>accdefed6df5c185790f37b02f132eb46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CString</type>
      <name>lookup</name>
      <anchorfile>class_ase_1_1_c_string.html</anchorfile>
      <anchor>a19acb2cec73f004316c037b343d6c3b0</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::Has_serialize_f</name>
    <filename>struct_ase_1_1_has__serialize__f.html</filename>
    <templarg>class</templarg>
    <templarg>class</templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>Ase::FastMemory::HugePage</name>
    <filename>struct_ase_1_1_fast_memory_1_1_huge_page.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>alignment</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_huge_page.html</anchorfile>
      <anchor>a775d4ded0b1176644809973d21a8e2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_huge_page.html</anchorfile>
      <anchor>af9fb2cae41d28a35f803829e76b484be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>mem</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_huge_page.html</anchorfile>
      <anchor>a2c00c5daa21426067594f6ed0afd4413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HugePageP</type>
      <name>allocate</name>
      <anchorfile>struct_ase_1_1_fast_memory_1_1_huge_page.html</anchorfile>
      <anchor>a829a2a8e0fa4daf6a9a64c2370c38f75</anchor>
      <arglist>(size_t minimum_alignment, size_t bytelength)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::Id32</name>
    <filename>struct_ase_1_1_id32.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::IniFile</name>
    <filename>class_ase_1_1_ini_file.html</filename>
    <member kind="function">
      <type></type>
      <name>IniFile</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>ae9aa8df0d55f94ed1edad39fadd301c4</anchor>
      <arglist>(const String &amp;name, const String &amp;inidata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IniFile</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>a35fc851c6e5b98c7145cac0effee0d1d</anchor>
      <arglist>(Blob blob)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IniFile</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>af3ee91b27f9f978adc87b2c5e3be3e93</anchor>
      <arglist>(const IniFile &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>IniFile &amp;</type>
      <name>operator=</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>aba2f8d407cd1c3b4111c10be392126c1</anchor>
      <arglist>(const IniFile &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_sections</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>abb7d58f8171f25991c2fa7f04c97c709</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>sections</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>ae5d8a709b24d0d7d96ce6f17a1aaee73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_section</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>ad1855bf31acb695cd9be34996813467e</anchor>
      <arglist>(const String &amp;section) const</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>attributes</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>a66912c97709fea909952adfcfa3350cc</anchor>
      <arglist>(const String &amp;section) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_attribute</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>a817d7e370792b5b1a3e8373a80c42e5b</anchor>
      <arglist>(const String &amp;section, const String &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_raw_value</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>a3ffc7169f03c8e8271c9e30d9e68ec16</anchor>
      <arglist>(const String &amp;dotpath, String *valuep=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>raw_value</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>ae8ba234a0360acd318e0913b5f3727a7</anchor>
      <arglist>(const String &amp;dotpath) const</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>raw_values</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>af7d7305528a43b82aeb554dd3025002d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>value_as_string</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>af95289acb672751e92996c61cf47aad5</anchor>
      <arglist>(const String &amp;dotpath) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>a381b15dc192d12455e834902e4b524ab</anchor>
      <arglist>(const String &amp;dotpath, String *valuep=NULL) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>cook_string</name>
      <anchorfile>class_ase_1_1_ini_file.html</anchorfile>
      <anchor>ad93dc84148f44f1a532cbd374925f6c6</anchor>
      <arglist>(const String &amp;input_string)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::IniWriter</name>
    <filename>class_ase_1_1_ini_writer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_ase_1_1_ini_writer.html</anchorfile>
      <anchor>a22eb3095f6c68d5d9cbc1d209223ff44</anchor>
      <arglist>(String key, String value)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>output</name>
      <anchorfile>class_ase_1_1_ini_writer.html</anchorfile>
      <anchor>afd48e05570636301eb50983e17a77b30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::JsTrigger</name>
    <filename>class_ase_1_1_js_trigger.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::KeccakCryptoRng</name>
    <filename>class_ase_1_1_keccak_crypto_rng.html</filename>
    <base>Ase::KeccakRng</base>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>result_type</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a07b108e5373c2ad2dcd64f4f333c4cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeccakCryptoRng</name>
      <anchorfile>class_ase_1_1_keccak_crypto_rng.html</anchorfile>
      <anchor>ab6f91125120d6ab2f9bcb3a1cac6095a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeccakCryptoRng</name>
      <anchorfile>class_ase_1_1_keccak_crypto_rng.html</anchorfile>
      <anchor>a15dbd08b6108b8c8f2805e9d278f9aad</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>n_nums</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ab976783247b33b48830e6d47352d1cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>bit_capacity</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7d104598192e3313c22dc3d4b0ed76b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forget</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a874c6ba2c6260bb487b6df6a9e773070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aa7803c87b2ce71b1094277f84e5152ae</anchor>
      <arglist>(unsigned long long count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xor_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad852194083782f8c56fc4c74ccb31e3a</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aac560943db886056acd2bcd3781fb7b5</anchor>
      <arglist>(uint64_t seed_value=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a03f24d08cda7682bae1d7c8e04574046</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad5e0918cb63dbafde2ea911e75b7f635</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auto_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a8a883c69a582824b2705a10cd146654a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7f3745c0bbb5ac03af959a37a79bfe90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a776c2b376078b4c869faa46d395b41a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a2cb23eff1d0f432862466b3b2b260f25</anchor>
      <arglist>(RandomAccessIterator begin, RandomAccessIterator end)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>min</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad43fec1d81732bb07421f36c7565821e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>max</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>af50b72589b84879e65eaabe07f2ae9db</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Lib::KeccakF1600</name>
    <filename>class_ase_1_1_lib_1_1_keccak_f1600.html</filename>
    <member kind="function">
      <type></type>
      <name>KeccakF1600</name>
      <anchorfile>class_ase_1_1_lib_1_1_keccak_f1600.html</anchorfile>
      <anchor>a18c0fcc13e7e6eb361eb83df218e9f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_ase_1_1_lib_1_1_keccak_f1600.html</anchorfile>
      <anchor>a0b9bcc7abe5d85d14c9bee138cdc17b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>class_ase_1_1_lib_1_1_keccak_f1600.html</anchorfile>
      <anchor>acc932de298ac5ff4eb9cefde79f734a3</anchor>
      <arglist>(uint32_t n_rounds)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t &amp;</type>
      <name>byte</name>
      <anchorfile>class_ase_1_1_lib_1_1_keccak_f1600.html</anchorfile>
      <anchor>a782a40992c7a12638a7eb5831a71ec20</anchor>
      <arglist>(size_t state_index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::KeccakFastRng</name>
    <filename>class_ase_1_1_keccak_fast_rng.html</filename>
    <base>Ase::KeccakRng</base>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>result_type</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a07b108e5373c2ad2dcd64f4f333c4cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeccakFastRng</name>
      <anchorfile>class_ase_1_1_keccak_fast_rng.html</anchorfile>
      <anchor>a511c600c395ec206b102f93a7318a2b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeccakFastRng</name>
      <anchorfile>class_ase_1_1_keccak_fast_rng.html</anchorfile>
      <anchor>a993c926aaf2f97f56aadff079be10e46</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>n_nums</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ab976783247b33b48830e6d47352d1cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>bit_capacity</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7d104598192e3313c22dc3d4b0ed76b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forget</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a874c6ba2c6260bb487b6df6a9e773070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aa7803c87b2ce71b1094277f84e5152ae</anchor>
      <arglist>(unsigned long long count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xor_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad852194083782f8c56fc4c74ccb31e3a</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aac560943db886056acd2bcd3781fb7b5</anchor>
      <arglist>(uint64_t seed_value=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a03f24d08cda7682bae1d7c8e04574046</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad5e0918cb63dbafde2ea911e75b7f635</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auto_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a8a883c69a582824b2705a10cd146654a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7f3745c0bbb5ac03af959a37a79bfe90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a776c2b376078b4c869faa46d395b41a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a2cb23eff1d0f432862466b3b2b260f25</anchor>
      <arglist>(RandomAccessIterator begin, RandomAccessIterator end)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>min</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad43fec1d81732bb07421f36c7565821e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>max</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>af50b72589b84879e65eaabe07f2ae9db</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::KeccakGoodRng</name>
    <filename>class_ase_1_1_keccak_good_rng.html</filename>
    <base>Ase::KeccakRng</base>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>result_type</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a07b108e5373c2ad2dcd64f4f333c4cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeccakGoodRng</name>
      <anchorfile>class_ase_1_1_keccak_good_rng.html</anchorfile>
      <anchor>aa7bf539da13839e915a14c2522264b29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeccakGoodRng</name>
      <anchorfile>class_ase_1_1_keccak_good_rng.html</anchorfile>
      <anchor>a57ac9aaef1a011ad21d5055406e46e39</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>n_nums</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ab976783247b33b48830e6d47352d1cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>bit_capacity</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7d104598192e3313c22dc3d4b0ed76b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forget</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a874c6ba2c6260bb487b6df6a9e773070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aa7803c87b2ce71b1094277f84e5152ae</anchor>
      <arglist>(unsigned long long count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xor_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad852194083782f8c56fc4c74ccb31e3a</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aac560943db886056acd2bcd3781fb7b5</anchor>
      <arglist>(uint64_t seed_value=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a03f24d08cda7682bae1d7c8e04574046</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad5e0918cb63dbafde2ea911e75b7f635</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auto_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a8a883c69a582824b2705a10cd146654a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7f3745c0bbb5ac03af959a37a79bfe90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a776c2b376078b4c869faa46d395b41a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a2cb23eff1d0f432862466b3b2b260f25</anchor>
      <arglist>(RandomAccessIterator begin, RandomAccessIterator end)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>min</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad43fec1d81732bb07421f36c7565821e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>max</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>af50b72589b84879e65eaabe07f2ae9db</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::KeccakRng</name>
    <filename>class_ase_1_1_keccak_rng.html</filename>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>result_type</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a07b108e5373c2ad2dcd64f4f333c4cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>n_nums</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ab976783247b33b48830e6d47352d1cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>bit_capacity</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7d104598192e3313c22dc3d4b0ed76b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeccakRng</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>af41e32f9f7eb533e4435ae083955a13b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeccakRng</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a1e8cee0c2de136cf01dac24ed07ae2a0</anchor>
      <arglist>(uint16_t hidden_state_capacity, uint16_t n_rounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forget</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a874c6ba2c6260bb487b6df6a9e773070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aa7803c87b2ce71b1094277f84e5152ae</anchor>
      <arglist>(unsigned long long count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xor_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad852194083782f8c56fc4c74ccb31e3a</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aac560943db886056acd2bcd3781fb7b5</anchor>
      <arglist>(uint64_t seed_value=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a03f24d08cda7682bae1d7c8e04574046</anchor>
      <arglist>(const uint64_t *seeds, size_t n_seeds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad5e0918cb63dbafde2ea911e75b7f635</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auto_seed</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a8a883c69a582824b2705a10cd146654a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a7f3745c0bbb5ac03af959a37a79bfe90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a776c2b376078b4c869faa46d395b41a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a2cb23eff1d0f432862466b3b2b260f25</anchor>
      <arglist>(RandomAccessIterator begin, RandomAccessIterator end)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>min</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ad43fec1d81732bb07421f36c7565821e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>max</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>af50b72589b84879e65eaabe07f2ae9db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>aee38a1bfe9b18359033009f8689756f3</anchor>
      <arglist>(const KeccakRng &amp;lhs, const KeccakRng &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>ab283dc7b9f6772c9d2afe69d3bd76703</anchor>
      <arglist>(const KeccakRng &amp;lhs, const KeccakRng &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; CharT, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>a4b4d5660dcac7c410311110107b60d22</anchor>
      <arglist>(std::basic_ostream&lt; CharT, Traits &gt; &amp;os, const KeccakRng &amp;self)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_istream&lt; CharT, Traits &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>class_ase_1_1_keccak_rng.html</anchorfile>
      <anchor>afd2fa09d8c7fd9f7384a3814bc617cc5</anchor>
      <arglist>(std::basic_istream&lt; CharT, Traits &gt; &amp;is, KeccakRng &amp;self)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::LoftConfig</name>
    <filename>struct_ase_1_1_loft_config.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>preallocate</name>
      <anchorfile>struct_ase_1_1_loft_config.html</anchorfile>
      <anchor>aeb4b3aa9a030c3affd4ce6269282a4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>watermark</name>
      <anchorfile>struct_ase_1_1_loft_config.html</anchorfile>
      <anchor>af635d3514b3f2e28a6ccb002d7d98ece</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::LoftStats</name>
    <filename>struct_ase_1_1_loft_stats.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>available</name>
      <anchorfile>struct_ase_1_1_loft_stats.html</anchorfile>
      <anchor>a49591770d326ac37a708e2762feed48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>allocated</name>
      <anchorfile>struct_ase_1_1_loft_stats.html</anchorfile>
      <anchor>a7400851920c4adb94a86a0fb50b867c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>maxchunk</name>
      <anchorfile>struct_ase_1_1_loft_stats.html</anchorfile>
      <anchor>a0827a0452669909d97b03054517f801a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::Logscale</name>
    <filename>struct_ase_1_1_logscale.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>struct_ase_1_1_logscale.html</anchorfile>
      <anchor>aa914cf0ef495db090a02d60eafdd32cb</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scale</name>
      <anchorfile>struct_ase_1_1_logscale.html</anchorfile>
      <anchor>a684b92e51e0577fbe278dec0d3709f13</anchor>
      <arglist>(double normalized) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>iscale</name>
      <anchorfile>struct_ase_1_1_logscale.html</anchorfile>
      <anchor>a45dbb2494b775ea96fb2300f4cba9913</anchor>
      <arglist>(double mmvalue) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::MainLoop</name>
    <filename>class_ase_1_1_main_loop.html</filename>
    <base>Ase::EventLoop</base>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>a945a44aaaad1a039bb10fef719c60068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>ac5e5b0bed558bf30fae3317d90c3b0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finishable</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>ac921780f57f27af55c58fd17301cf1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>a25c13be04f5c9cb634ea680bdbf7f186</anchor>
      <arglist>(int quit_code=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>a91297e43c7342eb753c06749ca6d5750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iterate</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>ae4d58955364ea0b0a404c72e6a831e19</anchor>
      <arglist>(bool block)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterate_pending</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>ab82792c1f5799935ff123951e180ef97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EventLoopP</type>
      <name>create_sub_loop</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>a251bdb570752ce2ba142d93ef0e829e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::mutex &amp;</type>
      <name>mutex</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>ad109bc231d1577423b5beaacb6f9b7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_g_main_context</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>ab65ac211b7a5bdb1de22d0b3371605ac</anchor>
      <arglist>(GlibGMainContext *glib_main_context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeup</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a0bc5de58ac63bcb8e194d11836bc0ba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>add</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ae06765bef494ca84bbbca049d6fb0c34</anchor>
      <arglist>(EventSourceP loop_source, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a2e74b3c5ebda3b11ec7b537d466b5f16</anchor>
      <arglist>(uint id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_remove</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ad92b660c1e215a1357e1705b9f3ddf02</anchor>
      <arglist>(uint id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear_source</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a23b7779bb4e838d6c92b5c3a4731fb77</anchor>
      <arglist>(uint *id_pointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy_loop</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a106ba2cdfd7e166653f0d75bd8358cf3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_primary</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a08e12e882042cc9c8392398b0cfff339</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>MainLoop *</type>
      <name>main_loop</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a7b3ac2a66058d6190beb44dfb0b7ff36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_now</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a9dde5f0f10e9ae09780389e338feef2a</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_callback</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>aa66726a8c3c51dc15b917ec5a9ab6175</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_idle</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a296a5fdf67e9d189d6b09800e2e355e9</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_usignal</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a2fe725ef35bdb23620e651d7302ce605</anchor>
      <arglist>(int8 signum, const USignalSlot &amp;sl, int priority=PRIORITY_NOW -1)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_timer</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a63f2165ed691bd592e4af52c7f244429</anchor>
      <arglist>(BoolVoidFunctor &amp;&amp;bvf, uint delay_ms, int64 repeat_ms=-1, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>exec_io_handler</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a3d06dcd6d3fdd090caec0a9941005b8a</anchor>
      <arglist>(BoolVoidPollFunctor &amp;&amp;bvf, int fd, const String &amp;mode, int priority=PRIORITY_NORMAL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MainLoopP</type>
      <name>create</name>
      <anchorfile>class_ase_1_1_main_loop.html</anchorfile>
      <anchor>a759be6704f7be100be3cca33afc93178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_CEILING</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a3c1c03c047837015dabe7abb7fc60e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_NOW</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>affe6674cbc2a1f9fec4c82e28347b652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_ASCENT</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ac86400e6228e095100f655f085ada142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_HIGH</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a68ba3408f8b5bcf5a0d4bdd2c2a4700e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_NEXT</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ae15555175d1a7bd5b2a38d66fc079c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_NORMAL</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a30820c584142895fd706cb398ef7d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_UPDATE</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>a55b18b2105ac8ebf6c4752447ae8fcb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_IDLE</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ac21cde2828091be87c69a0dd98df0679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16</type>
      <name>PRIORITY_LOW</name>
      <anchorfile>class_ase_1_1_event_loop.html</anchorfile>
      <anchor>ae92d13b16632fe75a02610e321618576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::MidiEvent</name>
    <filename>struct_ase_1_1_midi_event.html</filename>
    <member kind="function">
      <type>MidiMessage</type>
      <name>message</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a2758a59dbfb7e27af1414b45d4581f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>MidiEventType</type>
      <name>type</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a5391623536fbde644d4dc596ff37581f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>frame</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>aed14fa1d4aa87dc4fda1c21c32683d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>channel</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>ac73ce150d31290ac5ca978a98670f2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>key</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>ad9bf58d4e652647b19dea2df533443a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>fragment</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>ae4c6ae0e15ee798926840dd3156dcd39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>length</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>ae0d38cf6f5fe8e9021c0dee88bf128e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>param</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a479852d8b9705026a198aef1b6857837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>noteid</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a445e4e0453835baa05296bde85b725d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>data</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>ad9a263ff53a9c3bf27c12b3f2bf4fca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>value</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a56da7e4997ac817d4f9cbaff6fb715fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint</type>
      <name>cval</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>ac6daaa11f27ef7e523a05905e18d0840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>velocity</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a87505610258b83bd1ad8bcbfe9c1be83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>tuning</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>addce2fc30d9c8fe107a01064d0fea10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr MidiEventType</type>
      <name>AFTERTOUCH</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a887fd9525cb002e55e6a1e642cef58fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr MidiEventType</type>
      <name>CONTROL_CHANGE</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a94ea6f6216cd112901768aaf1a208ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr MidiEventType</type>
      <name>CHANNEL_PRESSURE</name>
      <anchorfile>struct_ase_1_1_midi_event.html</anchorfile>
      <anchor>a1348caa63ad54c10e3e2ff683f1abdfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::MidiEventRange</name>
    <filename>class_ase_1_1_midi_event_range.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::MidiEventStream</name>
    <filename>class_ase_1_1_midi_event_stream.html</filename>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>class_ase_1_1_midi_event_stream.html</anchorfile>
      <anchor>a79f548005d6a66836c0f32fb3867ffec</anchor>
      <arglist>(int16_t frame, const MidiEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>append_unsorted</name>
      <anchorfile>class_ase_1_1_midi_event_stream.html</anchorfile>
      <anchor>a979c7f6fde7ff3b5e0b72c9a7ae73868</anchor>
      <arglist>(int16_t frame, const MidiEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensure_order</name>
      <anchorfile>class_ase_1_1_midi_event_stream.html</anchorfile>
      <anchor>abef42bfb54added98574ebd628289a6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>last_frame</name>
      <anchorfile>class_ase_1_1_midi_event_stream.html</anchorfile>
      <anchor>aba4954b9069dc07a20173a9736674f5a</anchor>
      <arglist>() const ASE_PURE</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::MidiLib::MidiFeed</name>
    <filename>struct_ase_1_1_midi_lib_1_1_midi_feed.html</filename>
  </compound>
  <compound kind="struct">
    <name>Ase::MidiNote</name>
    <filename>struct_ase_1_1_midi_note.html</filename>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>note_to_freq</name>
      <anchorfile>struct_ase_1_1_midi_note.html</anchorfile>
      <anchor>a4d97d0af242c0460a49cfa5646e0c6d5</anchor>
      <arglist>(MusicalTuning tuning, int note, float kammer_freq)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Monitor</name>
    <filename>class_ase_1_1_monitor.html</filename>
    <base virtualness="virtual">Ase::Gadget</base>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceP</type>
      <name>get_output</name>
      <anchorfile>class_ase_1_1_monitor.html</anchorfile>
      <anchor>aa2d88fcd263f64393e05020a6cfd32c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32</type>
      <name>get_ochannel</name>
      <anchorfile>class_ase_1_1_monitor.html</anchorfile>
      <anchor>a99876ff7bef82d1fdc68f584861d7ced</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>get_mix_freq</name>
      <anchorfile>class_ase_1_1_monitor.html</anchorfile>
      <anchor>a92a89c0506d4323d73812614cb569ce1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64</type>
      <name>get_frame_duration</name>
      <anchorfile>class_ase_1_1_monitor.html</anchorfile>
      <anchor>a960b445e25a7c6d1b66d5019a21cc0af</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::MpmcStack</name>
    <filename>struct_ase_1_1_mpmc_stack.html</filename>
    <templarg>typename Node</templarg>
  </compound>
  <compound kind="class">
    <name>Ase::Mwc256</name>
    <filename>class_ase_1_1_mwc256.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::NativeDevice</name>
    <filename>class_ase_1_1_native_device.html</filename>
    <base virtualness="virtual">Ase::Device</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_combo_device</name>
      <anchorfile>class_ase_1_1_native_device.html</anchorfile>
      <anchor>a1293568b9dc3263be17d4ae974b73b96</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceS</type>
      <name>list_devices</name>
      <anchorfile>class_ase_1_1_native_device.html</anchorfile>
      <anchor>a2b4b816ebf20e0a44d50f2cc680a4935</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>DeviceInfoS</type>
      <name>list_device_types</name>
      <anchorfile>class_ase_1_1_native_device.html</anchorfile>
      <anchor>a33c1857b90b01936dddc64722f5bad8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove_device</name>
      <anchorfile>class_ase_1_1_native_device.html</anchorfile>
      <anchor>aa7b46a6a4250b74dfb668777a566aa40</anchor>
      <arglist>(Device &amp;sub)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceP</type>
      <name>append_device</name>
      <anchorfile>class_ase_1_1_native_device.html</anchorfile>
      <anchor>ac9f3cb78ccb8edbedf0f18ef999a297a</anchor>
      <arglist>(const String &amp;uri)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceP</type>
      <name>insert_device</name>
      <anchorfile>class_ase_1_1_native_device.html</anchorfile>
      <anchor>a6aa41f1c4ded0cd431711807fd86e056</anchor>
      <arglist>(const String &amp;uri, Device &amp;beforesibling)=0</arglist>
    </member>
    <member kind="function">
      <type>Track *</type>
      <name>_track</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a6f9890f79ad87593445c8c49fe4f1b33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioProcessorP</type>
      <name>_audio_processor</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>aadea8afefc18b189fda6418718668970</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_activate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>ac0cd749f20826afe7c6ff0e6d145dba8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_deactivate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a8153eef02cc3363f38d3c693c5f0eccc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_disconnect_remove</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a503a4c501b76627afdb0227409446311</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_active</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a27abcd125cd03f3ba3117cfccc475488</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceInfo</type>
      <name>device_info</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>afbdd7a8bb49a66db0ae1219bb0a94630</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_self</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a561079106abe0b1ca006a0d1570f23b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gui_toggle</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a334dccbc0ff22c6efce946151b09f265</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_supported</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a858701db60feaf97c82abc686aff5635</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_visible</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a1d824917cfd70557186375e6d85264be</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Object</name>
    <filename>class_ase_1_1_object.html</filename>
    <base virtualness="virtual">Ase::Emittable</base>
  </compound>
  <compound kind="class">
    <name>Ase::ObjectImpl</name>
    <filename>class_ase_1_1_object_impl.html</filename>
    <base>Ase::EmittableImpl</base>
    <base virtualness="virtual">Ase::Object</base>
    <member kind="function">
      <type>void</type>
      <name>emit_notify</name>
      <anchorfile>class_ase_1_1_emittable_impl.html</anchorfile>
      <anchor>af5fad81722713d48cacff12477d1b877</anchor>
      <arglist>(const String &amp;detail)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::OrderedEventList</name>
    <filename>struct_ase_1_1_ordered_event_list.html</filename>
    <templarg>class Event</templarg>
    <templarg>class CompareOrder</templarg>
    <base>vector&lt; Event &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Ase::ParamInfo</name>
    <filename>struct_ase_1_1_param_info.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a43af22a183c223d89c22359edaa7dc23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MinMax</type>
      <name>get_minmax</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a78905d4172c170ff3a303000cdc9b452</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_stepping</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a03c6eb1546f1389c07b651762e9cfdaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_initial</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a343c46dcf59ce6cbb4c97b63d132b20e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_range</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a8e4479e0e9e4199df5dc04586c8bd52e</anchor>
      <arglist>(double &amp;fmin, double &amp;fmax, double &amp;fstep) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_range</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>ac2b918958ffd307283a9791f251893b6</anchor>
      <arglist>(double fmin, double fmax, double fstep=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_choices</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a735ac27603e62117475090fc3c8410e4</anchor>
      <arglist>(const ChoiceS &amp;centries)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_choices</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a3ba54e0993540dca1095def2984cb34c</anchor>
      <arglist>(ChoiceS &amp;&amp;centries)</arglist>
    </member>
    <member kind="function">
      <type>const ChoiceS &amp;</type>
      <name>get_choices</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a6bfd21649e96d2a12be1a0d24661744d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>ident</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>af8676da7586ff99b712390092b15811a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>label</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a15c645504ace7c20fac797fc71c8466c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>nick</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a9326e0466abef9f1ea34c239c3b7c830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>unit</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>a89125adfee0a61452248c583100613d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>hints</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>abe3022a91b4a9b59f545e5c7066d9e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GroupId</type>
      <name>group</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>ae7bc6838e5a25bfa96fe25cec1759f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>blurb</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>abe7a05da5ba355f14ead30469fa47fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CString</type>
      <name>description</name>
      <anchorfile>struct_ase_1_1_param_info.html</anchorfile>
      <anchor>af6d6e56603ff93874ca70bc2f9d9cb2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Pcg32Rng</name>
    <filename>class_ase_1_1_pcg32_rng.html</filename>
    <member kind="function">
      <type></type>
      <name>Pcg32Rng</name>
      <anchorfile>class_ase_1_1_pcg32_rng.html</anchorfile>
      <anchor>a083715bef946ee0bbec0e9c957d1b276</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pcg32Rng</name>
      <anchorfile>class_ase_1_1_pcg32_rng.html</anchorfile>
      <anchor>aeeea06c8825ea1ed4f948efaa0b2c75a</anchor>
      <arglist>(uint64_t offset, uint64_t sequence)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pcg32Rng</name>
      <anchorfile>class_ase_1_1_pcg32_rng.html</anchorfile>
      <anchor>a78c7a4127a4cdaa6d805f1cee34aa99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auto_seed</name>
      <anchorfile>class_ase_1_1_pcg32_rng.html</anchorfile>
      <anchor>a5fcf73c740912ecefdb9a359009deddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_pcg32_rng.html</anchorfile>
      <anchor>ae8f1e13af67e124d5f538dd3302ebf2b</anchor>
      <arglist>(uint64_t offset, uint64_t sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>class_ase_1_1_pcg32_rng.html</anchorfile>
      <anchor>ac93a768d3706fc0eb255d0d9b1df0f3e</anchor>
      <arglist>(SeedSeq &amp;seed_sequence)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>random</name>
      <anchorfile>class_ase_1_1_pcg32_rng.html</anchorfile>
      <anchor>a765fa2df36afabca7454da250b5db264</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Persistent</name>
    <filename>class_ase_1_1_persistent.html</filename>
    <templarg>class Class</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>Persistent</name>
      <anchorfile>class_ase_1_1_persistent.html</anchorfile>
      <anchor>a68d67b49f2d8bc22a8adf4468d9a55c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>class_ase_1_1_persistent.html</anchorfile>
      <anchor>a2b4577f8db03bde61f95570ef086cadf</anchor>
      <arglist>() const __attribute__((__pure__))</arglist>
    </member>
    <member kind="function">
      <type>Class &amp;</type>
      <name>operator*</name>
      <anchorfile>class_ase_1_1_persistent.html</anchorfile>
      <anchor>a9d66363e2a55e13eb7e92b1c8ec97e0f</anchor>
      <arglist>() __attribute__((__pure__))</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_ase_1_1_persistent.html</anchorfile>
      <anchor>a6dd412f28c6012da7711342fed89da0d</anchor>
      <arglist>() __attribute__((__pure__))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::PollFD</name>
    <filename>struct_ase_1_1_poll_f_d.html</filename>
    <member kind="enumvalue">
      <name>IN</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda39415fe2628f2dfddf652052102cdbd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRI</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda615fd972944cc854ab57c05ca9d08e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUT</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdad2314f9351cd996183c8e08748c88f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RDNORM</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda187e16856bc278e0ea40f64627952c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RDBAND</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdac1df57831b8cbefa6e0fa39812527554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRNORM</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda4450013079dd32485f66b20a9500feed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRBAND</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdafa6c232ba5b7e13d26ecad122b8e0684</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERR</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdafa68304b2d4858c02525532e6ce46937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HUP</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda2270d0413d65f7bb4b2c42d7bc286219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NVAL</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdab855b051b9cc0116ab91d2d231c5759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda39415fe2628f2dfddf652052102cdbd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRI</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda615fd972944cc854ab57c05ca9d08e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUT</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdad2314f9351cd996183c8e08748c88f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RDNORM</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda187e16856bc278e0ea40f64627952c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RDBAND</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdac1df57831b8cbefa6e0fa39812527554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRNORM</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda4450013079dd32485f66b20a9500feed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRBAND</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdafa6c232ba5b7e13d26ecad122b8e0684</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERR</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdafa68304b2d4858c02525532e6ce46937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HUP</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fda2270d0413d65f7bb4b2c42d7bc286219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NVAL</name>
      <anchorfile>struct_ase_1_1_poll_f_d.html</anchorfile>
      <anchor>aec559f94cc8a1665094734f0594442fdab855b051b9cc0116ab91d2d231c5759f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::PollFDSource</name>
    <filename>class_ase_1_1_poll_f_d_source.html</filename>
    <base virtualness="virtual">Ase::EventSource</base>
    <member kind="function">
      <type>bool</type>
      <name>recursion</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>aa58d3766cdb86d2af6c213c8c1fb58f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>ae3e568f0e26e2d7819591151ff93767e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a6edf22d4366db9d278738253bdc13561</anchor>
      <arglist>(bool may_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a0e84486db9f4508170a2189b0894af0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>af755cb3da5c26790be85e30b11569cf5</anchor>
      <arglist>(bool is_primary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a21a06a6a9bf428141ee94c0fc054eb3f</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a626f58739285ea9745bd12bc9e06e0bd</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop_remove</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a2cbc7b23b33183403946eeaecb74b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MainLoop *</type>
      <name>main_loop</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a547206d54bc57366893278e582d088e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>class_ase_1_1_poll_f_d_source.html</anchorfile>
      <anchor>a1f8afaf9afbdf67f928404cae4b7ceaf</anchor>
      <arglist>(const LoopState &amp;state, int64 *timeout_usecs_p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>class_ase_1_1_poll_f_d_source.html</anchorfile>
      <anchor>afad47092e9693b51b0abb291ddf8ea9c</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>class_ase_1_1_poll_f_d_source.html</anchorfile>
      <anchor>a1877b04fc98aac07c42e86f0bfcd3470</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::ProbeFeatures</name>
    <filename>struct_ase_1_1_probe_features.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>probe_range</name>
      <anchorfile>struct_ase_1_1_probe_features.html</anchorfile>
      <anchor>a28466652a2364cbcd351ef1abd6d1dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>probe_energy</name>
      <anchorfile>struct_ase_1_1_probe_features.html</anchorfile>
      <anchor>a9609fc1f3db489fd710c6e6f8d28f60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>probe_samples</name>
      <anchorfile>struct_ase_1_1_probe_features.html</anchorfile>
      <anchor>a14cc3b140acd166cbb647e705f5eb19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>probe_fft</name>
      <anchorfile>struct_ase_1_1_probe_features.html</anchorfile>
      <anchor>ab96be17499fe5d68dd01b126c6789e3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::ProcessorManager</name>
    <filename>class_ase_1_1_processor_manager.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::Project</name>
    <filename>class_ase_1_1_project.html</filename>
    <base virtualness="virtual">Ase::Device</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>discard</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>ad06e056379d70d9e35a81391c3bd6ff8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start_playback</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a315a45b1299b0e3cd3d9b72aeb6d84ff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop_playback</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a3ec7cc1a65137db4657823e185502bf9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_playing</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a1082c67a2e91301902338d01eb6a5cdf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TrackP</type>
      <name>create_track</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a08a8bf0094583c20a3ffdda8aa71a0f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove_track</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>ad5e37ad0ec89ff8cf4567defd5267e35</anchor>
      <arglist>(Track &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TrackS</type>
      <name>all_tracks</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>af849eab5380335005aac4c8b2220b78b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TrackP</type>
      <name>master_track</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a22c8ff7c5802b0cafd3683111aee4800</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Error</type>
      <name>save_project</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a2e55cddaeafad461f5451b31e8f874c5</anchor>
      <arglist>(const String &amp;filename, bool collect)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>saved_filename</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>ae0daa529258415fdc2b98c46f1e8df8a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Error</type>
      <name>load_project</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a6058261e111fb4db8846f2a59e8cddea</anchor>
      <arglist>(const String &amp;filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TelemetryFieldS</type>
      <name>telemetry</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a14e115ba69d9667a364addbe2934b23e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>group_undo</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a3343ea812698bcaf651f9990ee804d44</anchor>
      <arglist>(const String &amp;undoname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ungroup_undo</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a2cd01aa3f8d3648e3c9ffbfde74292a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>undo</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a04ceaac0cafd508b6a059d758d5f5af0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>can_undo</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a415fc2b689df64801b109010c385351c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>redo</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>a629563922698b8be8db154dd71bc318e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>can_redo</name>
      <anchorfile>class_ase_1_1_project.html</anchorfile>
      <anchor>af3fcfcf89b6f9569b1fec2f8b10aacbf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Track *</type>
      <name>_track</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a6f9890f79ad87593445c8c49fe4f1b33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioProcessorP</type>
      <name>_audio_processor</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>aadea8afefc18b189fda6418718668970</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_activate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>ac0cd749f20826afe7c6ff0e6d145dba8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_deactivate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a8153eef02cc3363f38d3c693c5f0eccc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_disconnect_remove</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a503a4c501b76627afdb0227409446311</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_active</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a27abcd125cd03f3ba3117cfccc475488</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceInfo</type>
      <name>device_info</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>afbdd7a8bb49a66db0ae1219bb0a94630</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_self</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a561079106abe0b1ca006a0d1570f23b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gui_toggle</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a334dccbc0ff22c6efce946151b09f265</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_supported</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a858701db60feaf97c82abc686aff5635</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_visible</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a1d824917cfd70557186375e6d85264be</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Property</name>
    <filename>class_ase_1_1_property.html</filename>
    <base virtualness="virtual">Ase::Emittable</base>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>identifier</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a14ceec0c6c519a0f057ec2e6f1002880</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>label</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a61e5f7a3373f48053fb2f289e7890deb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>nick</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a1a1b99212747b026de8c870a1e0a75c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>unit</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a8f578df0f80ac01cee9a869ff1d5ef25</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>hints</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a80e69b9e2fc3a0e1020b183b66f6952e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>group</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a8e6b027e6ca60216880d1b452f9eaa38</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>blurb</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>ac101cb7aa63db4c81479d0652a4c04d6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>description</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a1e05711d70ee4d3b3cdb9eb02af171a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_min</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a10c702f2adc9b4c0a71d5b0b2f7f01ba</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_max</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a1d6f1eeb9121f08f1f5f785f57bd3aa0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_step</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a51c06c3f6c0a9e3579d964c563119780</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>adfa5b07e9f6cc2589b37466aa3536be5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>afb0995cd5df267e885f1400c4d35e765</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a0e2812dc90840bf7837995b6cc57244b</anchor>
      <arglist>(const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_normalized</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a6d2716b83b4ab0ab88ef351e16b150d8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_normalized</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a5b2ee04b0304c9341a58a412480b74c2</anchor>
      <arglist>(double v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>get_text</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a6d898c81c526d5182c7cbe169aa61b61</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_text</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>acc50c8d35cb252e61a6d8b4edaa485a5</anchor>
      <arglist>(String v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_numeric</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a27851cc4d2ab1a41f61dd3ddf469d7fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChoiceS</type>
      <name>choices</name>
      <anchorfile>class_ase_1_1_property.html</anchorfile>
      <anchor>a8a2da03b31101939643846ee3932a11e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Re</name>
    <filename>class_ase_1_1_re.html</filename>
    <member kind="function" static="yes">
      <type>static StringS</type>
      <name>findall</name>
      <anchorfile>class_ase_1_1_re.html</anchorfile>
      <anchor>ac07a60bf3b757585044a041d2eccdf49</anchor>
      <arglist>(const String &amp;regex, const String &amp;input, Flags=DEFAULT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ssize_t</type>
      <name>search</name>
      <anchorfile>class_ase_1_1_re.html</anchorfile>
      <anchor>ae43d8c05300cfdca8aaf1d8f3f2f05da</anchor>
      <arglist>(const String &amp;regex, const String &amp;input, Flags=DEFAULT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>subn</name>
      <anchorfile>class_ase_1_1_re.html</anchorfile>
      <anchor>aa5df3cdbd5fc92a053fe3ca10a422183</anchor>
      <arglist>(const String &amp;regex, const String &amp;subst, const String &amp;input, uint count=0, Flags=DEFAULT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>sub</name>
      <anchorfile>class_ase_1_1_re.html</anchorfile>
      <anchor>a2fe73db5a1bb89680c8c5b919f896e22</anchor>
      <arglist>(const String &amp;regex, const String &amp;sbref, const String &amp;input, Flags=DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Resampler2</name>
    <filename>class_ase_1_1_resampler2.html</filename>
    <member kind="function">
      <type></type>
      <name>Resampler2</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>a5c8b766af3bf07bf225104fda83cae17</anchor>
      <arglist>(Mode mode, Precision precision, bool use_sse_if_available=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process_block</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>aeeae4514f88cd8e3ba2ecbe935cacd51</anchor>
      <arglist>(const float *input, uint n_input_samples, float *output)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>order</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>ac339f2b76f7278ad7a34302c8ca77a05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>delay</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>ac67587d940e261c6b29dc5a7a9586b33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>a34e79f73b8ea25e0882da734ff6772d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sse_enabled</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>aa83e1904a7d82491839752b819bf1796</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>sse_available</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>a46393018c0a1e3c7b595f477d6cb0f8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>test_filter_impl</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>ad7411b101159953f3e57e51f18ec9a46</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Precision</type>
      <name>find_precision_for_bits</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>ab4ad68c627e910c5ad78598e322b00c3</anchor>
      <arglist>(uint bits)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>precision_name</name>
      <anchorfile>class_ase_1_1_resampler2.html</anchorfile>
      <anchor>a6767f56dfe3b86fb18b80a38c701b7b9</anchor>
      <arglist>(Precision precision)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::Resource</name>
    <filename>struct_ase_1_1_resource.html</filename>
    <member kind="variable">
      <type>ResourceType</type>
      <name>type</name>
      <anchorfile>struct_ase_1_1_resource.html</anchorfile>
      <anchor>a0071919adc66dc52acaee967fd65afe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>label</name>
      <anchorfile>struct_ase_1_1_resource.html</anchorfile>
      <anchor>afbd4cd59e722d598d6d8769225602435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>uri</name>
      <anchorfile>struct_ase_1_1_resource.html</anchorfile>
      <anchor>a901dc3cd4b6b7ffb37741804786aec11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>size</name>
      <anchorfile>struct_ase_1_1_resource.html</anchorfile>
      <anchor>a546d6079b76c390845c9b8a22d90e417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64</type>
      <name>mtime</name>
      <anchorfile>struct_ase_1_1_resource.html</anchorfile>
      <anchor>af22786fda438c50f2142b6aaacc6c6fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::ResourceCrawler</name>
    <filename>class_ase_1_1_resource_crawler.html</filename>
    <base virtualness="virtual">Ase::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual ResourceS</type>
      <name>list_entries</name>
      <anchorfile>class_ase_1_1_resource_crawler.html</anchorfile>
      <anchor>a9cf1e5f2a71639891f2f3de86b2402d0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Resource</type>
      <name>current_folder</name>
      <anchorfile>class_ase_1_1_resource_crawler.html</anchorfile>
      <anchor>a636ec2662252b0c57da482f294d50d97</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>class_ase_1_1_resource_crawler.html</anchorfile>
      <anchor>a24b652c55ccf5939068f216f12b2c78b</anchor>
      <arglist>(const String &amp;path)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>canonify</name>
      <anchorfile>class_ase_1_1_resource_crawler.html</anchorfile>
      <anchor>a415c16ba8d6e03405188258be4dbaa62</anchor>
      <arglist>(const String &amp;cwd, const String &amp;fragment, bool constraindir, bool constrainfile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Lib::ScopedLocale</name>
    <filename>class_ase_1_1_lib_1_1_scoped_locale.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::Lib::ScopedPosixLocale</name>
    <filename>class_ase_1_1_lib_1_1_scoped_posix_locale.html</filename>
    <base>Ase::Lib::ScopedLocale</base>
    <member kind="function" static="yes">
      <type>static locale_t</type>
      <name>posix_locale</name>
      <anchorfile>class_ase_1_1_lib_1_1_scoped_posix_locale.html</anchorfile>
      <anchor>abdbcdcbc35b3aa776bbb4a603ff441d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Serializable</name>
    <filename>class_ase_1_1_serializable.html</filename>
    <base virtualness="virtual">Ase::VirtualBase</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>class_ase_1_1_serializable.html</anchorfile>
      <anchor>a822257012c51afdcbc826e8e9729dbaf</anchor>
      <arglist>(WritNode &amp;xs)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Server</name>
    <filename>class_ase_1_1_server.html</filename>
    <base virtualness="virtual">Ase::Gadget</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a38ceedf931d32a35c6db182af9cd5731</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>get_version</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a2146543ceec175dceb28dd03ccd2cac1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>get_build_id</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a65f6c7edadf284c22b0fbf4ed47db987</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>get_opus_version</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a58ca79bbd439d99702e6271d5d862a4f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>get_flac_version</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a8a9ad64dcb84413bb9c9ba9455d14372</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>get_clap_version</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>ac7343122dff25e91096cd444cb12c120</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>broadcast_telemetry</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>aedd0c66a74a44ad73291ca44717470a3</anchor>
      <arglist>(const TelemetrySegmentS &amp;segments, int32 interval_ms)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_prefs</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a5944fea923abf9b555675dfe9281b38c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProjectP</type>
      <name>last_project</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a20a4b990f8eac1b16602690bf89399f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProjectP</type>
      <name>create_project</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a105d2626b02ad289c038e7350e363216</anchor>
      <arglist>(String projectname)=0</arglist>
    </member>
    <member kind="function">
      <type>ResourceCrawlerP</type>
      <name>dir_crawler</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a4c4870d20280539eae8ea32de0ca09b9</anchor>
      <arglist>(const String &amp;cwd=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ResourceCrawlerP</type>
      <name>url_crawler</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a34435bf7beced017fdbb571c5cb9a188</anchor>
      <arglist>(const String &amp;url=&quot;/&quot;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Server &amp;</type>
      <name>instance</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a4fe988d77e06c517427df3e0669d3072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ServerP</type>
      <name>instancep</name>
      <anchorfile>class_ase_1_1_server.html</anchorfile>
      <anchor>a31da0e58b73463b8834065742af56947</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::SHA3_224</name>
    <filename>struct_ase_1_1_s_h_a3__224.html</filename>
    <member kind="function">
      <type></type>
      <name>SHA3_224</name>
      <anchorfile>struct_ase_1_1_s_h_a3__224.html</anchorfile>
      <anchor>a4df3643cf5788d1ff7efe5df9e7152da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>struct_ase_1_1_s_h_a3__224.html</anchorfile>
      <anchor>af49272be83a5ede78af8a9845ad546fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>struct_ase_1_1_s_h_a3__224.html</anchorfile>
      <anchor>a50270d8e1a4f866f3708cdac9e53255b</anchor>
      <arglist>(const uint8_t *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>digest</name>
      <anchorfile>struct_ase_1_1_s_h_a3__224.html</anchorfile>
      <anchor>a6469cce1bfeb4201662a27f1856b19cb</anchor>
      <arglist>(uint8_t hashvalue[28])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::SHA3_256</name>
    <filename>struct_ase_1_1_s_h_a3__256.html</filename>
    <member kind="function">
      <type></type>
      <name>SHA3_256</name>
      <anchorfile>struct_ase_1_1_s_h_a3__256.html</anchorfile>
      <anchor>a030956bc4b0af8195740b82fd74e3d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>struct_ase_1_1_s_h_a3__256.html</anchorfile>
      <anchor>af67a78422b1e461f6361298a8635f5ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>struct_ase_1_1_s_h_a3__256.html</anchorfile>
      <anchor>a1c4313cdd8a86f2da59c8521a46775b7</anchor>
      <arglist>(const uint8_t *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>digest</name>
      <anchorfile>struct_ase_1_1_s_h_a3__256.html</anchorfile>
      <anchor>a7b81b42cc2d54f28d421294422c63ac7</anchor>
      <arglist>(uint8_t hashvalue[32])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::SHA3_384</name>
    <filename>struct_ase_1_1_s_h_a3__384.html</filename>
    <member kind="function">
      <type></type>
      <name>SHA3_384</name>
      <anchorfile>struct_ase_1_1_s_h_a3__384.html</anchorfile>
      <anchor>a8a494d6fdf5113349eb86fba6c6cb47c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>struct_ase_1_1_s_h_a3__384.html</anchorfile>
      <anchor>a47664544088fd213cfff71d39117e42d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>struct_ase_1_1_s_h_a3__384.html</anchorfile>
      <anchor>ab0339c5e4ad7bf0c4247f5b2f8a47521</anchor>
      <arglist>(const uint8_t *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>digest</name>
      <anchorfile>struct_ase_1_1_s_h_a3__384.html</anchorfile>
      <anchor>ab7ee3a512dc1ec0d20aff7791e8875b7</anchor>
      <arglist>(uint8_t hashvalue[48])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::SHA3_512</name>
    <filename>struct_ase_1_1_s_h_a3__512.html</filename>
    <member kind="function">
      <type></type>
      <name>SHA3_512</name>
      <anchorfile>struct_ase_1_1_s_h_a3__512.html</anchorfile>
      <anchor>a6ca89a358b6bee71453b5ba497197c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>struct_ase_1_1_s_h_a3__512.html</anchorfile>
      <anchor>ad435666ded113fe4b78750a46752beb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>struct_ase_1_1_s_h_a3__512.html</anchorfile>
      <anchor>ab1dac5751f9c09eacf572addf6063569</anchor>
      <arglist>(const uint8_t *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>digest</name>
      <anchorfile>struct_ase_1_1_s_h_a3__512.html</anchorfile>
      <anchor>a105ce8445d70eb4ff3fbfdb8ad80ec8e</anchor>
      <arglist>(uint8_t hashvalue[64])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::SHAKE128</name>
    <filename>struct_ase_1_1_s_h_a_k_e128.html</filename>
    <member kind="function">
      <type></type>
      <name>SHAKE128</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e128.html</anchorfile>
      <anchor>a7029b773613e252ef63f64d5912db7ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e128.html</anchorfile>
      <anchor>aa4f56b30a25d8b0397d58eb6427e46e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e128.html</anchorfile>
      <anchor>a825121d265735977a5ea1ac75a988235</anchor>
      <arglist>(const uint8_t *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squeeze_digest</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e128.html</anchorfile>
      <anchor>afbbc20b0bbeea57eeae4366e932b9720</anchor>
      <arglist>(uint8_t *hashvalues, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::SHAKE256</name>
    <filename>struct_ase_1_1_s_h_a_k_e256.html</filename>
    <member kind="function">
      <type></type>
      <name>SHAKE256</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e256.html</anchorfile>
      <anchor>a9bcfe400548dbd7e30f06608d4882d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e256.html</anchorfile>
      <anchor>a2ce390f7bd48c4bfe93eb974ffb9e396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e256.html</anchorfile>
      <anchor>a9f982e4fafb8a930533a164d9a24236d</anchor>
      <arglist>(const uint8_t *data, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squeeze_digest</name>
      <anchorfile>struct_ase_1_1_s_h_a_k_e256.html</anchorfile>
      <anchor>acbac572c855380443ebf6ffcf5e30db7</anchor>
      <arglist>(uint8_t *hashvalues, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::SharedBase</name>
    <filename>class_ase_1_1_shared_base.html</filename>
    <base virtualness="virtual">Ase::VirtualBase</base>
    <base virtualness="virtual">enable_shared_from_this&lt; SharedBase &gt;</base>
  </compound>
  <compound kind="class">
    <name>Ase::Lib::StringFormatter</name>
    <filename>class_ase_1_1_lib_1_1_string_formatter.html</filename>
    <member kind="function" static="yes">
      <type>static</type>
      <name>__attribute__</name>
      <anchorfile>class_ase_1_1_lib_1_1_string_formatter.html</anchorfile>
      <anchor>a50dd6e108d07d9bab3587ac466a02eb4</anchor>
      <arglist>((__format__(printf, 2, 0), noinline)) std</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Strings</name>
    <filename>class_ase_1_1_strings.html</filename>
    <base>vector&lt; std::string &gt;</base>
  </compound>
  <compound kind="class">
    <name>Ase::TaskRegistry</name>
    <filename>class_ase_1_1_task_registry.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>class_ase_1_1_task_registry.html</anchorfile>
      <anchor>a0182e01c5166432ae1fa7a55618dc152</anchor>
      <arglist>(const std::string &amp;name, int pid, int tid=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>remove</name>
      <anchorfile>class_ase_1_1_task_registry.html</anchorfile>
      <anchor>a25286548af4c104fb46e530a33b9b364</anchor>
      <arglist>(int tid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update</name>
      <anchorfile>class_ase_1_1_task_registry.html</anchorfile>
      <anchor>a116e8335337e2547114f1f683fad02a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static List</type>
      <name>list</name>
      <anchorfile>class_ase_1_1_task_registry.html</anchorfile>
      <anchor>a76944837a8feff9e86d8b2459df659d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::TaskStatus</name>
    <filename>struct_ase_1_1_task_status.html</filename>
    <member kind="function">
      <type></type>
      <name>TaskStatus</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a72f162b9a5f8632c15446a9d3a2d3066</anchor>
      <arglist>(int pid, int tid=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>aa486d35df090adb4947c7fb499f70e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a21e3ec38f491edc05f8e44c85f6d615b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>process_id</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>ab5ef07ce2e146ec5f0eb7bf193cffcdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>task_id</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>abb2216f20caada974aadad8ed4962bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>afc3e5a9577c5d49823d49fc35519687e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a0fe88d5d3472994376c254aacce26226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>processor</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a90576a202685c0aa91601da3dd89cb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>priority</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a198539a683dceb6fa539360fcede6ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>utime</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a4225a6f40bc0461532054df9db6235a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>stime</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>af59a683abd8845cb06e5e35e2ec1e501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>cutime</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a538d43d09e8e9d7ea673621552e7ab71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>cstime</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>aa1e044bfecd156ab58726023da4a1944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64</type>
      <name>ac_stamp</name>
      <anchorfile>struct_ase_1_1_task_status.html</anchorfile>
      <anchor>a51cded8fb08452af9f497a9e72fc77fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::TelemetryField</name>
    <filename>struct_ase_1_1_telemetry_field.html</filename>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>struct_ase_1_1_telemetry_field.html</anchorfile>
      <anchor>a3576cbf94a80e222a85d5114ec083dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>type</name>
      <anchorfile>struct_ase_1_1_telemetry_field.html</anchorfile>
      <anchor>a30ae3fe052a1ae6bcc0138fae31be4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>offset</name>
      <anchorfile>struct_ase_1_1_telemetry_field.html</anchorfile>
      <anchor>aa0d1189f79b5ff3fc70d5b6862b0f150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>length</name>
      <anchorfile>struct_ase_1_1_telemetry_field.html</anchorfile>
      <anchor>a87ec5ce944ed1db76161defed70fceac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::TelemetrySegment</name>
    <filename>struct_ase_1_1_telemetry_segment.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>offset</name>
      <anchorfile>struct_ase_1_1_telemetry_segment.html</anchorfile>
      <anchor>a5914969ddbf4d102a368216a88daee24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>length</name>
      <anchorfile>struct_ase_1_1_telemetry_segment.html</anchorfile>
      <anchor>a7bae1d7335df8a91207e0166cd3b770a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::TickSignature</name>
    <filename>struct_ase_1_1_tick_signature.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set_samplerate</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>a6a3fec16c83832d572e454e90bd24d17</anchor>
      <arglist>(uint samplerate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bpm</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>aeef1b10e318e65e53e2d555ed75ee701</anchor>
      <arglist>(double bpm)</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>time_from_tick</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>ad1596d5f57413ff11ff9c26f9dc7b66c</anchor>
      <arglist>(int64 tick) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>time_to_tick</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>ab2fe93860839343ce280bf66da5c3dd0</anchor>
      <arglist>(const Time &amp;time) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_signature</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>adaad7ea7d4fb0cc263584618038a0e56</anchor>
      <arglist>(uint8 beats_per_bar, uint8 beat_unit)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>bar_from_tick</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>ae186eda6361d46e535168e221cc258c3</anchor>
      <arglist>(int64 tick) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>bar_to_tick</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>a04d57503c095d24e27e00c717949cba8</anchor>
      <arglist>(int32 bar) const</arglist>
    </member>
    <member kind="function">
      <type>Beat</type>
      <name>beat_from_tick</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>a037dd9ef894d51c1eec0ebe73f0c8f24</anchor>
      <arglist>(int64 tick) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>beat_to_tick</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>ac9119e4b35cd456655322645e985b4f0</anchor>
      <arglist>(const Beat &amp;beat) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8</type>
      <name>beats_per_bar_</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>a8210a6afef791e81b76cef306ac9394c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8</type>
      <name>beat_unit_</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>a852ff33a3cf450295b6dcfdcff4895b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>samplerate_</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>aac6e34c31cf917d5e9797a5e7cb11f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bpm_</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>a39115bfa85ca3e4c664117c4e7f91a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>inv_samplerate_</name>
      <anchorfile>struct_ase_1_1_tick_signature.html</anchorfile>
      <anchor>aa657755a5f83e1c6477f9b74112b375d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::TimedSource</name>
    <filename>class_ase_1_1_timed_source.html</filename>
    <base virtualness="virtual">Ase::EventSource</base>
    <member kind="function">
      <type>bool</type>
      <name>recursion</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>aa58d3766cdb86d2af6c213c8c1fb58f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>ae3e568f0e26e2d7819591151ff93767e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a6edf22d4366db9d278738253bdc13561</anchor>
      <arglist>(bool may_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a0e84486db9f4508170a2189b0894af0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>af755cb3da5c26790be85e30b11569cf5</anchor>
      <arglist>(bool is_primary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a21a06a6a9bf428141ee94c0fc054eb3f</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a626f58739285ea9745bd12bc9e06e0bd</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop_remove</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a2cbc7b23b33183403946eeaecb74b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MainLoop *</type>
      <name>main_loop</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a547206d54bc57366893278e582d088e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>class_ase_1_1_timed_source.html</anchorfile>
      <anchor>a6e1c86eb616727d268074b96d7d56f5d</anchor>
      <arglist>(const LoopState &amp;state, int64 *timeout_usecs_p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>class_ase_1_1_timed_source.html</anchorfile>
      <anchor>a0ac193c5f8e7b14f9c89b2e1ea5d4925</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>class_ase_1_1_timed_source.html</anchorfile>
      <anchor>aee7c2845f8e2677363f2e60349357621</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Test::Timer</name>
    <filename>class_ase_1_1_test_1_1_timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>class_ase_1_1_test_1_1_timer.html</anchorfile>
      <anchor>a9e7392342a3da92a51429eb3776f03c6</anchor>
      <arglist>(double deadline_in_secs=0)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>n_reps</name>
      <anchorfile>class_ase_1_1_test_1_1_timer.html</anchorfile>
      <anchor>adbbb516df3906cb02954538f62a3d414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>test_elapsed</name>
      <anchorfile>class_ase_1_1_test_1_1_timer.html</anchorfile>
      <anchor>aff105352c72f4ae05b08b7140e837b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min_elapsed</name>
      <anchorfile>class_ase_1_1_test_1_1_timer.html</anchorfile>
      <anchor>a3f2194de4f67e097b11cc7b9fc535043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max_elapsed</name>
      <anchorfile>class_ase_1_1_test_1_1_timer.html</anchorfile>
      <anchor>ae24e6c24c9f51a5f3c9b459d3a24b03f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>benchmark</name>
      <anchorfile>class_ase_1_1_test_1_1_timer.html</anchorfile>
      <anchor>a0143966278516948c5bb83f465e84a69</anchor>
      <arglist>(Callee callee)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::Track</name>
    <filename>class_ase_1_1_track.html</filename>
    <base virtualness="virtual">Ase::Device</base>
    <member kind="function" virtualness="pure">
      <type>virtual int32</type>
      <name>midi_channel</name>
      <anchorfile>class_ase_1_1_track.html</anchorfile>
      <anchor>ab22e16e869ca2bf26c5ce30451ccc19d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_master</name>
      <anchorfile>class_ase_1_1_track.html</anchorfile>
      <anchor>a3303f5041c73bb9af85d6f321bfb6509</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ClipS</type>
      <name>launcher_clips</name>
      <anchorfile>class_ase_1_1_track.html</anchorfile>
      <anchor>a338b9eda8d3faf1477513565c02debd7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceP</type>
      <name>access_device</name>
      <anchorfile>class_ase_1_1_track.html</anchorfile>
      <anchor>aca001f148cd3ac249ce1a7f817b6be3c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TelemetryFieldS</type>
      <name>telemetry</name>
      <anchorfile>class_ase_1_1_track.html</anchorfile>
      <anchor>af11db3ec43a072294a35a622fe6ebfea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>Track *</type>
      <name>_track</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a6f9890f79ad87593445c8c49fe4f1b33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AudioProcessorP</type>
      <name>_audio_processor</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>aadea8afefc18b189fda6418718668970</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_activate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>ac0cd749f20826afe7c6ff0e6d145dba8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_deactivate</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a8153eef02cc3363f38d3c693c5f0eccc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_disconnect_remove</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a503a4c501b76627afdb0227409446311</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_active</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a27abcd125cd03f3ba3117cfccc475488</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DeviceInfo</type>
      <name>device_info</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>afbdd7a8bb49a66db0ae1219bb0a94630</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_self</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a561079106abe0b1ca006a0d1570f23b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gui_toggle</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a334dccbc0ff22c6efce946151b09f265</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_supported</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a858701db60feaf97c82abc686aff5635</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>gui_visible</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a1d824917cfd70557186375e6d85264be</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a98bc6f4b12c7a923411d6e87c1e9cd3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a95ad12e8fc073c81ba651cac72cd945a</anchor>
      <arglist>(GadgetImpl *parent)=0</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5d833f54f1e575aad60ac03abee2edf3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aa648495b6597ef8f5cbeea033fd5ada9</anchor>
      <arglist>(const String &amp;key, const Value &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a3655b227ac47a7e924c576f16b2686b2</anchor>
      <arglist>(const String &amp;key) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ase::TrackImpl</name>
    <filename>class_ase_1_1_track_impl.html</filename>
    <base virtualness="virtual">Ase::Track</base>
    <class kind="class">Ase::TrackImpl::ClipScout</class>
    <member kind="function">
      <type>void</type>
      <name>_activate</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a39ac0107428e57879814a4ea4a338d08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_deactivate</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a4cb5b24d19475b9704bf84f47bf055e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>AudioProcessorP</type>
      <name>_audio_processor</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>aa2507276e65462de8591e712cdf5d512</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_set_parent</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a6184b4640aee0af988489947cb7a9b89</anchor>
      <arglist>(GadgetImpl *parent) override</arglist>
    </member>
    <member kind="function">
      <type>DeviceInfo</type>
      <name>device_info</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a863125e0aa99b4ad1ef585b82fc8b4fa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_master</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a6c3433cb05ab1313a686cfcbc60e5f5b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>midi_channel</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>ae627bd844e1b39e423fa0c1be65fbf29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ClipS</type>
      <name>launcher_clips</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a19a0fc51127f620111419104e73f2a3b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>DeviceP</type>
      <name>access_device</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a84e10832f7c4c3fcd18e4dd868804baa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>TelemetryFieldS</type>
      <name>telemetry</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a91ebf7a3fc198f667d4728d7d2d5e19a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>GadgetImpl *</type>
      <name>_parent</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a0282a89f8eb1adf813056583d769e7cd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>PropertyS</type>
      <name>access_properties</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a46a6ee8c9452f0dfb17a895e207ed75a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_data</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a6a041c6f97997888622adb3fa4ad8d8e</anchor>
      <arglist>(const String &amp;key, const Value &amp;v) override</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_data</name>
      <anchorfile>class_ase_1_1_gadget_impl.html</anchorfile>
      <anchor>a5a87f6e0a2ef17d355cf8a739f2fd10c</anchor>
      <arglist>(const String &amp;key) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit_notify</name>
      <anchorfile>class_ase_1_1_emittable_impl.html</anchorfile>
      <anchor>af5fad81722713d48cacff12477d1b877</anchor>
      <arglist>(const String &amp;detail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>acd524fb742ea2f58bb68878a7552b3d0</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key, T data)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a327f3ffb1c6adcac1279e4b5883cbdab</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a526b8883a8b0fe2457dc9a9751c2208e</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>del_custom_data</name>
      <anchorfile>class_ase_1_1_custom_data_container.html</anchorfile>
      <anchor>a608bf027faa9105307ad21252f7beb89</anchor>
      <arglist>(CustomDataKey&lt; T &gt; *key)</arglist>
    </member>
    <member kind="function">
      <type>ProjectImpl *</type>
      <name>_project</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a67df01a6a89e8441b776f8f64ec23e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringS</type>
      <name>list_properties</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a35445e0c979a2147f10bb6619d8f2a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyP</type>
      <name>access_property</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>a5a0109cd71e3af9fc1f63a5580bff8e0</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>aacecbd8080097bf8b4a11071b0a37882</anchor>
      <arglist>(String ident)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>class_ase_1_1_gadget.html</anchorfile>
      <anchor>ab4fb4509a4a61b4258d0210b50cb30a7</anchor>
      <arglist>(String ident, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Track *</type>
      <name>_track</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a6f9890f79ad87593445c8c49fe4f1b33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_self</name>
      <anchorfile>class_ase_1_1_device.html</anchorfile>
      <anchor>a561079106abe0b1ca006a0d1570f23b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>class_ase_1_1_track_impl.html</anchorfile>
      <anchor>a3ab02cac2d406401ae50a669882118b3</anchor>
      <arglist>(WritNode &amp;xs) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::UserNote</name>
    <filename>struct_ase_1_1_user_note.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::USignalSource</name>
    <filename>class_ase_1_1_u_signal_source.html</filename>
    <base virtualness="virtual">Ase::EventSource</base>
    <member kind="function">
      <type>bool</type>
      <name>recursion</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>aa58d3766cdb86d2af6c213c8c1fb58f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>ae3e568f0e26e2d7819591151ff93767e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>may_recurse</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a6edf22d4366db9d278738253bdc13561</anchor>
      <arglist>(bool may_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a0e84486db9f4508170a2189b0894af0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>primary</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>af755cb3da5c26790be85e30b11569cf5</anchor>
      <arglist>(bool is_primary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a21a06a6a9bf428141ee94c0fc054eb3f</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a626f58739285ea9745bd12bc9e06e0bd</anchor>
      <arglist>(PollFD *const pfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loop_remove</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a2cbc7b23b33183403946eeaecb74b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MainLoop *</type>
      <name>main_loop</name>
      <anchorfile>class_ase_1_1_event_source.html</anchorfile>
      <anchor>a547206d54bc57366893278e582d088e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>raise</name>
      <anchorfile>class_ase_1_1_u_signal_source.html</anchorfile>
      <anchor>a3ddf8b1fe318dd876a04cf91dcdd91cc</anchor>
      <arglist>(int8 signum)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>class_ase_1_1_u_signal_source.html</anchorfile>
      <anchor>a26f0228f6e88790b78e231673c8c02c8</anchor>
      <arglist>(const LoopState &amp;state, int64 *timeout_usecs_p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>class_ase_1_1_u_signal_source.html</anchorfile>
      <anchor>acbc02a58445c3b5ebdf88b145fb39afd</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>class_ase_1_1_u_signal_source.html</anchorfile>
      <anchor>a1223e459183a6e42b381a6e12764aa78</anchor>
      <arglist>(const LoopState &amp;state)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::Value</name>
    <filename>struct_ase_1_1_value.html</filename>
    <base>std::variant</base>
    <member kind="function">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>a94feeba08c4c422b21f3060cc42c35d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>as_int</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>a41062b97ab1337d4e68a45e2d8cc6e79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>as_double</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>a07dc13728768c0bfd81ae0d402168238</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>as_string</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>abddb242bfa5d338d40a634b082e91962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ValueS &amp;</type>
      <name>as_array</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>aed0ba5728c3e2ed1a1706b0913816522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>repr</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>a13c4bfb9501cb3d87bbbed0e8ec01758</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>keys</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>aec22d7a30da30d9c06e0638071929201</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>aa411ef25d0a0574564f1dc240e247040</anchor>
      <arglist>(const String &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filter</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>addac447775394e5437e85a7b89b990b1</anchor>
      <arglist>(const std::function&lt; bool(const ValueField &amp;)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_numeric</name>
      <anchorfile>struct_ase_1_1_value.html</anchorfile>
      <anchor>a34ea48e6a3c26a7152fd8bff8b222d04</anchor>
      <arglist>(bool boolisnumeric=true) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::VirtualBase</name>
    <filename>struct_ase_1_1_virtual_base.html</filename>
  </compound>
  <compound kind="class">
    <name>Ase::Writ</name>
    <filename>class_ase_1_1_writ.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>in_load</name>
      <anchorfile>class_ase_1_1_writ.html</anchorfile>
      <anchor>adacf7d12aa7d7e6133b160d3f3812c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>in_save</name>
      <anchorfile>class_ase_1_1_writ.html</anchorfile>
      <anchor>a14d33e5c7d9239f8aa3aa847bc2cca6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>typedata_is_loadable</name>
      <anchorfile>class_ase_1_1_writ.html</anchorfile>
      <anchor>a9225a3c6ffbed5d7c9c54b9ff0d70d4b</anchor>
      <arglist>(const StringS &amp;typedata, const String &amp;fieldname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>typedata_is_storable</name>
      <anchorfile>class_ase_1_1_writ.html</anchorfile>
      <anchor>af7a25675816535c33f107cd26ce0ab19</anchor>
      <arglist>(const StringS &amp;typedata, const String &amp;fieldname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>typedata_find_minimum</name>
      <anchorfile>class_ase_1_1_writ.html</anchorfile>
      <anchor>a4fe2eada4404a6932cfafeeac0d12e2f</anchor>
      <arglist>(const StringS &amp;typedata, const std::string &amp;fieldname, long double *limit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>typedata_find_maximum</name>
      <anchorfile>class_ase_1_1_writ.html</anchorfile>
      <anchor>a6fef296648d1f3a204b9a5d69f86e33c</anchor>
      <arglist>(const StringS &amp;typedata, const std::string &amp;fieldname, long double *limit)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ase::WritConverter</name>
    <filename>struct_ase_1_1_writ_converter.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename</templarg>
  </compound>
  <compound kind="class">
    <name>Ase::WritNode</name>
    <filename>class_ase_1_1_writ_node.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>in_load</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>acc8ce6f9c094227b46a5622f7324879f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>in_save</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>ada84ccd401f6ef8e81c96710cb506e97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip_emptystring</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>a4b785ea9697301d8a85c17b65435f19f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skip_zero</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>acf747434fa44ca1b02cb3a74280cdfd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Writ &amp;</type>
      <name>writ</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>a8efef8d8954aea2b23b9861ea25e6f59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>value</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>ac8151d6ade1db281224ccc572fbc4274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge_value</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>ae2206e8d088a08331a3028abcab9a5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WritNodeS</type>
      <name>to_nodes</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>adc94fdc4bea2244b347fd664a2ffac42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WritNode</type>
      <name>push</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>a4bbea8ac0bf2fb7219ee2d6692e236a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadable</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>af4498a683307fce75cdb3c840746cda8</anchor>
      <arglist>(const String &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>afc6dd4882af214c520b4239dd055f0dc</anchor>
      <arglist>(T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;</name>
      <anchorfile>class_ase_1_1_writ_node.html</anchorfile>
      <anchor>a4aa915483f1a04a0aff29e18c554e61a</anchor>
      <arglist>(const WritLink &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase</name>
    <filename>namespace_ase.html</filename>
    <namespace>Ase::AnsiColors</namespace>
    <namespace>Ase::Aux</namespace>
    <namespace>Ase::FastMemory</namespace>
    <namespace>Ase::Lib</namespace>
    <namespace>Ase::Loft</namespace>
    <namespace>Ase::MidiLib</namespace>
    <namespace>Ase::Path</namespace>
    <namespace>Ase::Properties</namespace>
    <namespace>Ase::Test</namespace>
    <class kind="struct">Ase::AlignedPOD</class>
    <class kind="class">Ase::AsyncBlockingQueue</class>
    <class kind="class">Ase::AtomicBits</class>
    <class kind="class">Ase::AtomicIntrusiveStack</class>
    <class kind="class">Ase::AudioEngine</class>
    <class kind="class">Ase::AudioProcessor</class>
    <class kind="struct">Ase::AudioProcessorInfo</class>
    <class kind="struct">Ase::AudioTransport</class>
    <class kind="class">Ase::AutoSeeder</class>
    <class kind="struct">Ase::BacktraceCommand</class>
    <class kind="class">Ase::Blob</class>
    <class kind="class">Ase::BorrowedPtr</class>
    <class kind="struct">Ase::BusInfo</class>
    <class kind="struct">Ase::Choice</class>
    <class kind="class">Ase::Clip</class>
    <class kind="struct">Ase::ClipNote</class>
    <class kind="struct">Ase::ConvertJsTrigger</class>
    <class kind="struct">Ase::ConvertValue</class>
    <class kind="struct">Ase::ConvertValueP</class>
    <class kind="struct">Ase::ConvertValueR</class>
    <class kind="struct">Ase::ConvertValueRP</class>
    <class kind="class">Ase::CString</class>
    <class kind="class">Ase::CustomDataContainer</class>
    <class kind="class">Ase::CustomDataKey</class>
    <class kind="class">Ase::Device</class>
    <class kind="struct">Ase::DeviceInfo</class>
    <class kind="class">Ase::DispatcherSource</class>
    <class kind="struct">Ase::DriverEntry</class>
    <class kind="class">Ase::Emittable</class>
    <class kind="class">Ase::EmittableImpl</class>
    <class kind="struct">Ase::EnumInfo</class>
    <class kind="struct">Ase::Event</class>
    <class kind="class">Ase::EventFd</class>
    <class kind="class">Ase::EventList</class>
    <class kind="class">Ase::EventLoop</class>
    <class kind="class">Ase::EventSource</class>
    <class kind="class">Ase::FastMemArray</class>
    <class kind="union">Ase::FloatIEEE754</class>
    <class kind="class">Ase::FriendAllocator</class>
    <class kind="class">Ase::Gadget</class>
    <class kind="class">Ase::GadgetImpl</class>
    <class kind="struct">Ase::GroupId</class>
    <class kind="struct">Ase::Has_serialize_f</class>
    <class kind="struct">Ase::Id32</class>
    <class kind="class">Ase::IniFile</class>
    <class kind="class">Ase::IniWriter</class>
    <class kind="class">Ase::JsTrigger</class>
    <class kind="class">Ase::KeccakCryptoRng</class>
    <class kind="class">Ase::KeccakFastRng</class>
    <class kind="class">Ase::KeccakGoodRng</class>
    <class kind="class">Ase::KeccakRng</class>
    <class kind="struct">Ase::LoftConfig</class>
    <class kind="struct">Ase::LoftStats</class>
    <class kind="struct">Ase::Logscale</class>
    <class kind="class">Ase::MainLoop</class>
    <class kind="struct">Ase::MidiEvent</class>
    <class kind="class">Ase::MidiEventRange</class>
    <class kind="class">Ase::MidiEventStream</class>
    <class kind="struct">Ase::MidiNote</class>
    <class kind="class">Ase::Monitor</class>
    <class kind="struct">Ase::MpmcStack</class>
    <class kind="class">Ase::Mwc256</class>
    <class kind="class">Ase::NativeDevice</class>
    <class kind="class">Ase::Object</class>
    <class kind="class">Ase::ObjectImpl</class>
    <class kind="struct">Ase::OrderedEventList</class>
    <class kind="struct">Ase::ParamInfo</class>
    <class kind="class">Ase::Pcg32Rng</class>
    <class kind="class">Ase::Persistent</class>
    <class kind="struct">Ase::PollFD</class>
    <class kind="class">Ase::PollFDSource</class>
    <class kind="struct">Ase::ProbeFeatures</class>
    <class kind="class">Ase::ProcessorManager</class>
    <class kind="class">Ase::Project</class>
    <class kind="class">Ase::Property</class>
    <class kind="class">Ase::Re</class>
    <class kind="class">Ase::Resampler2</class>
    <class kind="struct">Ase::Resource</class>
    <class kind="class">Ase::ResourceCrawler</class>
    <class kind="class">Ase::Serializable</class>
    <class kind="class">Ase::Server</class>
    <class kind="struct">Ase::SHA3_224</class>
    <class kind="struct">Ase::SHA3_256</class>
    <class kind="struct">Ase::SHA3_384</class>
    <class kind="struct">Ase::SHA3_512</class>
    <class kind="struct">Ase::SHAKE128</class>
    <class kind="struct">Ase::SHAKE256</class>
    <class kind="class">Ase::SharedBase</class>
    <class kind="class">Ase::Strings</class>
    <class kind="class">Ase::TaskRegistry</class>
    <class kind="struct">Ase::TaskStatus</class>
    <class kind="struct">Ase::TelemetryField</class>
    <class kind="struct">Ase::TelemetrySegment</class>
    <class kind="struct">Ase::TickSignature</class>
    <class kind="class">Ase::TimedSource</class>
    <class kind="class">Ase::Track</class>
    <class kind="class">Ase::TrackImpl</class>
    <class kind="struct">Ase::UserNote</class>
    <class kind="class">Ase::USignalSource</class>
    <class kind="struct">Ase::Value</class>
    <class kind="struct">Ase::VirtualBase</class>
    <class kind="class">Ase::Writ</class>
    <class kind="struct">Ase::WritConverter</class>
    <class kind="class">Ase::WritNode</class>
    <member kind="typedef">
      <type>boost::atomic&lt; T &gt;</type>
      <name>Atomic</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0189d15106eab0bf01eaf3e62b43bd80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>uint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad69887c4e893bf027b4aa6237d8c08d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>uint8</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a37adf90a66bbf9858a98d9f71c561ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>uint16</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab07ddec9dc448acf286801fc6616b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>uint32</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad2f22b1cad158ece02d3f37787ad39f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>uint64</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a13d169f5b0e9b257c6964c67ae75ec91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int8_t</type>
      <name>int8</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a410f3a65cc263d7ae575d59a773160ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>int16</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2df8b5e281ce001a792ce0eaa6021f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>int32</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a23ae29d011ad0ced77506ac09a95d148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>int64</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a478a1328a0bd673e18c58943f4bc0655</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>unichar</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a835f07c61fc175465672e82d33d89569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>String</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>abcfad6508b790c2bc6361655cf199a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; String &gt;</type>
      <name>StringS</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a444d3b63203b49bc45b14c9d0761453b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ::std::enable_if&lt; value, bool &gt;::type</type>
      <name>REQUIRES</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4e2ef1acd7d1f0a3ad4dff73ff1af815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ::std::enable_if&lt; value, void &gt;::type</type>
      <name>REQUIRESv</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5bd6d9c354c4d20df6b323404b41abdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T, LoftFree &gt;</type>
      <name>LoftPtr</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a17a04f4ddbc57560c487d54d1451c85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::variant&lt; std::monostate, bool, int64, double, String, ValueS, ValueR, InstanceP &gt;</type>
      <name>ValueVariant</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5a42d646b5faa5d9005d337a176028fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Error</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4fb5e7f1b391bd36a33d0c0c7c6d15f1</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a6ec6e2bae32b5ef905712f7745aa5774">PERMS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1acf3882f1c43ab22bff0bd9d82d83251b">IO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afe39af6ff8b4f14f5759e4d70bba6ebc">NO_MEMORY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a41e55833795c7b587b2ca4530eb28609">NO_SPACE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a74135d1a15c72675967bfde620c8eac9">NO_FILES</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a5f1c12a4958851c01a46277386988903">MANY_FILES</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ac0cc02c3b3d55abb7bfb49ddbb4866c8">RETRY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afe7bfa40ea55360bde0ae0004e704404">NOT_DIRECTORY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1acd54d99c8efb3c2db794197045f5b83c">FILE_NOT_FOUND</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a2164d5e71896efedb40b7eb2de01df33">FILE_IS_DIR</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a8f20045e0839c2e258547ee09fc961a0">FILE_EXISTS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a89d825caca6f736d792b79cb3a0b8310">FILE_BUSY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a182fa1c42a2468f8488e6dcf75a81b81">INTERNAL</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aaa528108d473f663f8947b4d16e7c13c">UNIMPLEMENTED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a54d7470596ab9b7b1585f3dba645bcc3">FILE_EOF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afb170ffea05221be6d4e256c6a5b0266">FILE_OPEN_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a26127a5de2f295b0921ad79d1e5676c4">FILE_SEEK_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aa2ad53799b6678410eab18f554e548fc">FILE_READ_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a94a8336290023b80ea4e41118b98a814">FILE_WRITE_FAILED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a551530ec1af53eaa77c1bde0ca457b4b">PARSE_ERROR</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a8b0ec364f1d5bbda4a5b3e806d582cac">NO_HEADER</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ab696091e308cf663b35a2fa480cc9cb0">NO_SEEK_INFO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a5b842e34358567f0f7b9dea819901314">NO_DATA_AVAILABLE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1af6922af51c2704fac813dae7ae5a1054">DATA_CORRUPT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aa2ec997d901283f152b9c635c397f927">WRONG_N_CHANNELS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ac2dc9bce00424e2584c13fdc7234f379">FORMAT_INVALID</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a420f8238fe721a3c616f83e65277581f">FORMAT_UNKNOWN</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aeff6545a8bc8350b6dbbdc25d3c31dcb">DATA_UNMATCHED</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aff333337d41d206e66856a8e550b2902">CODEC_FAILURE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ad1c14340c736240b99b365735050f40f">BROKEN_ARCHIVE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a74928d4a00e139f25802ef921dcbc41d">BAD_PROJECT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a762a9359acab61f37f449ba10949f07c">NO_PROJECT_DIR</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1af4724a191551c1036f76fdb39f4af9ee">DEVICE_NOT_AVAILABLE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aa5c5bb644b230a836a8898c370a49b49">DEVICE_ASYNC</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a9b40004e356bbecf8c222684be0988c7">DEVICE_BUSY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a2a66bfc469027fb1eb2b89f3d1ff3dd7">DEVICE_FORMAT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1afca4b58205c5a9c54fae423fe8130a9c">DEVICE_BUFFER</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ae49d78dab6b29676a869ba23bd973c6f">DEVICE_LATENCY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aeac488f8ca57e6ed7048c9f5de6bf435">DEVICE_CHANNELS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a28531543945d4828d725897850c8b71c">DEVICE_FREQUENCY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1aedf71f6b1068394e4d1c430b10d7714b">DEVICES_MISMATCH</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a19c0eee4dadfbb37a7181ba0fb90cf14">WAVE_NOT_FOUND</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1ae495af356a6a8807b18ccab127285042">INVALID_PROPERTY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a761acd83f4260e723405b79c00378edc">INVALID_MIDI_CONTROL</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a4fb5e7f1b391bd36a33d0c0c7c6d15f1a799e0cdf564b2b2ab039fbc276a9ff49">OPERATION_BUSY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MusicalTuning</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afb020f0d6689d7b591de4804efa1f3bb</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba5de0cf55bef6d023144c56cf98847797">OD_12_TET</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba55f19e37cdfe48d23fe64d89d708cc73">OD_7_TET</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba519e4aec9a707b6cc694ba9d441c0cf2">OD_5_TET</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbab393242d7133ffa6fc6d2d9588cb1823">DIATONIC_SCALE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaaf9408dcd8842edec16ad748cc20f5f8">INDIAN_SCALE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbab3a25ce854ccbe3bfaa93c83f90c3f6c">PYTHAGOREAN_TUNING</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaeb662fd05387733a5a8785a340701ca5">PENTATONIC_5_LIMIT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba4bb3118c82de8b2befa4872dde013cd8">PENTATONIC_BLUES</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba706500dc34312d6a6abcab8a09431c29">PENTATONIC_GOGO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaef1c42481c096299904f8d050496e180">QUARTER_COMMA_MEANTONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba2a904bc722cd89fcbd966df8f34405de">SILBERMANN_SORGE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba61d59bdc69c4f679bd2c9deb1351f2c0">WERCKMEISTER_3</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba5546b7489ed7b22b5536a7b3e204ce76">WERCKMEISTER_4</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba88b9cea5f6f934b43cec098b604e031a">WERCKMEISTER_5</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba64ceddf02cea6432501c8c3f889beacf">WERCKMEISTER_6</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bbaaf513a1e740a1224d617b8d87afcb674">KIRNBERGER_3</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="afb020f0d6689d7b591de4804efa1f3bba85f61422ff6569131e86ce73f232e0d3">YOUNG</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MidiEventType</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac89ef908c78cabb30e73a3e03b1a1d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MidiMessage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7d3daccf90d232899fe6b65d2f4079f4</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ab178cea4d43088e98f88f85937d4a31a">ALL_SOUND_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a2f1b5871de7ea019f806ca0468139319">RESET_ALL_CONTROLLERS</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a9fa47c2309eb766fb6ea8c8958ec640b">LOCAL_CONTROL</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a7f57110ee8bfa225198301598674fe8d">ALL_NOTES_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a646161f7320d7ebac8a94c54b92311cc">OMNI_MODE_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ac9c4fc8d7393e120ff873d2c6e89d722">OMNI_MODE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a53aa0e7dbfa71a43809bb387623a65dc">MONO_MODE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4aba96b42e49c8c80bcaff736c23a4ac75">POLY_MODE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a64c4eb278d5b288304f476ccbc70d958">NOTE_OFF</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a42ab8d6057c68dc3ca7829a9173c24a4">NOTE_ON</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4add5ad791cdebdae08885215f40e4e08a">AFTERTOUCH</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ac08bccd1d86dc7033fb7a426455a8ae6">CONTROL_CHANGE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a9c1ebbbad317dc20a7aebc4e433b0f2e">PROGRAM_CHANGE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4af6820257bf108b57ff10d99b14aadd73">CHANNEL_PRESSURE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4ac9718325980196dee9b53c5e375d5023">PITCH_BEND</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a7d3daccf90d232899fe6b65d2f4079f4a8ceaa46c365ea6c4d1a2e413d94d9d47">SYSEX</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParamId</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4b0e60fbea9c250f7d933b0f60ddf67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IBusId</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1b2b04028bdeac661ac8a6ddccb1dad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OBusId</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2b1c0faab7eb92829c386b4e0278b5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SpeakerArrangement</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a23ea47c81a3443fd070bc766566acbda</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa3c30649875f80bc4b253621e9cf4aa8e">FRONT_LEFT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa3c590d7552bf5fa1953eb0f05c64acd5">FRONT_RIGHT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa390fb0eb3353fcb11e0dab812303e784">FRONT_CENTER</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaae575bcf1fd2b1608d169e87a189b6842">LOW_FREQUENCY</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa312668bcc143fd3778c68442f6c3e32f">BACK_LEFT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa7e77482f99baeaa96a02f36b2f99f387">BACK_RIGHT</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaad22b2d6890a5e46ef1adfd9a5b631097">AUX</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaaf5f75f1b95652443e4398974b82c3f7c">MONO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa830dff3c27992cca35a4b46282e10530">STEREO</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa5aedc8e0e54387a382c9b4e59f28001c">STEREO_21</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa4b15359c139fa32009eb8d3d4cffb3c3">STEREO_30</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa5d7e407a178adcd6e4c7d6f7b9560886">STEREO_31</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa3f43a2adade71096ad795b5d7d180f28">SURROUND_50</enumvalue>
      <enumvalue file="namespace_ase.html" anchor="a23ea47c81a3443fd070bc766566acbdaa42a0150a79ad4b9c692b74d73f2301d1">SURROUND_51</enumvalue>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_error_blurb</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a71404f31e4992a365d47a9966be9adaf</anchor>
      <arglist>(Error error)</arglist>
    </member>
    <member kind="function">
      <type>ChoiceS &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9397694124879a4ed23ef9f6304e4b46</anchor>
      <arglist>(ChoiceS &amp;choices, Choice &amp;&amp;newchoice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zintern_free</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>addd7b113764707a8c835dcaeda4a8f12</anchor>
      <arglist>(uint8 *dc_data)</arglist>
    </member>
    <member kind="function">
      <type>uint8 *</type>
      <name>zintern_decompress</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a956fda00878cc83ed33b63d9c356bdc0</anchor>
      <arglist>(unsigned int decompressed_size, const unsigned char *cdata, unsigned int cdata_size)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_demangle_cxx</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a486035df582d0adb799d913aa11b7a22</anchor>
      <arglist>(const char *mangled_identifier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertion_failed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5489f074b88f07768641ea003b832711</anchor>
      <arglist>(const std::string &amp;msg=&quot;&quot;, const char *file=__builtin_FILE(), int line=__builtin_LINE(), const char *func=__builtin_FUNCTION())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9e287795697d626b0570ba27d540cd5b</anchor>
      <arglist>((__pure__)) static inline String typeid_name()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adc10ef3ffd73bfec6be7629171a77945</anchor>
      <arglist>((__pure__)) static inline String typeid_name(T &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>constexpr_equals</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5f4ec88fb290fef20c572a11e8d578ff</anchor>
      <arglist>(const char *a, const char *b, size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae414438be0c38da8b2d84f76554fc69a</anchor>
      <arglist>((always_inline)) inline void new _inplace(Type &amp;typemem</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2c4aad366b114ede3c423b9ad1c79637</anchor>
      <arglist>((always_inline)) inline void delete_inplace(Type &amp;typemem)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad5ffcbcfd927e291d5ef549a58ac8223</anchor>
      <arglist>(Source *object)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a23a0a1476a86e15dfe9bae89489fdb81</anchor>
      <arglist>(const Source *object)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3a10fba89f7d2eaec3091a1b317b41c7</anchor>
      <arglist>(std::shared_ptr&lt; Source &gt; &amp;sptr)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; typename std::remove_pointer&lt; Target &gt;::type &gt;</type>
      <name>shared_ptr_cast</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9fba79b76569212ec8af28d952b21ee5</anchor>
      <arglist>(const std::shared_ptr&lt; Source &gt; &amp;sptr)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; typename std::remove_pointer&lt; Source &gt;::type &gt;</type>
      <name>shared_ptr_from</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5fa0b0155f01f85957dfc4095c6ffef3</anchor>
      <arglist>(Source *object)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; C &gt;</type>
      <name>weak_ptr_fetch_or_create</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4d3a22404f88f332ed125121c2b12b36</anchor>
      <arglist>(std::weak_ptr&lt; C &gt; &amp;wptr, const std::function&lt; std::shared_ptr&lt; C &gt;()&gt; &amp;ctor)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square_sum</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1c5608b4ee5a105527f3a6ddbffdd47e</anchor>
      <arglist>(uint n_values, const float *ivalues)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square_max</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9041e0025b73f9ad84b70ef59ba8f57d</anchor>
      <arglist>(uint n_values, const float *ivalues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>floatfill</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1cc46db2ab07dd365ae5899ded6952c3</anchor>
      <arglist>(float *dst, float f, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fast_copy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af14c3702e1c5fc773cc2ef8b5f567c6e</anchor>
      <arglist>(size_t n, float *d, const float *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fast_copy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aabc82555a0b73f673ccee2ea3dbaf1cb</anchor>
      <arglist>(size_t n, uint32_t *d, const uint32_t *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collect_runtime_entropy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2dbb0db5cbd8dc4552c8c789be3115d3</anchor>
      <arglist>(uint64 *data, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collect_system_entropy</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8ee68f16b77657d551f68f4d1781bd98</anchor>
      <arglist>(uint64 *data, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>LoftPtr&lt; void &gt;</type>
      <name>loft_alloc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a648e6152c3c81b8a9ed2b7e7609ccc98</anchor>
      <arglist>(size_t size, size_t align=0)</arglist>
    </member>
    <member kind="function">
      <type>LoftPtr&lt; void &gt;</type>
      <name>loft_calloc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa3225fc382230880c393c3715abc1290</anchor>
      <arglist>(size_t nelem, size_t elemsize, size_t align=0)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>loft_bucket_size</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0cf44cedba310135e566cdb53761fc49</anchor>
      <arglist>(size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_set_notifier</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a433dfd8c8c58a6ae229ff25d7ebc869c</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;lowmem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_set_config</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad3c14e48c56ab2fff0476a6b54f326aa</anchor>
      <arglist>(const LoftConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_get_config</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7579ce186fbf93e49d9e728b24d6dbc0</anchor>
      <arglist>(LoftConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>loft_grow_preallocate</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a929e7ea34d61f05a6445a7f5e09e9fa7</anchor>
      <arglist>(size_t preallocation_amount=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loft_get_stats</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a198e9c84c739c98be13fb42074e99c0e</anchor>
      <arglist>(LoftStats &amp;stats)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>loft_stats_string</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9563df42775d1f6409b3e39eeccb97e8</anchor>
      <arglist>(const LoftStats &amp;stats)</arglist>
    </member>
    <member kind="function">
      <type>LoftPtr&lt; T &gt;</type>
      <name>loft_make_unique</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8af0c6f7fcb30b562e30f93b52876fa3</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>feature_toggle_find</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2b3cdbbe472774a18b41981597e64a74</anchor>
      <arglist>(const String &amp;config, const String &amp;feature, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>feature_toggle_bool</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac1073e4b34ce83d4b426d54e84a1a189</anchor>
      <arglist>(const char *config, const char *feature)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>feature_check</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a952143fcb038e72ef5f492b0deb4af31</anchor>
      <arglist>(const char *feature)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST int</type>
      <name>irintf</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a662a78ef1820c144249125e01c934d8c</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>force_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab982e60f06401ad192893992b9890ee2</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>force_float</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab7b93fb2d9d6d64e6cf011b79c0dbde8</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_exp2</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6b62ab47110aa30b63e57c031a32600f</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_log2</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad8e7c995facbfcfd52c9d029faa59f36</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>value2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a47a6d089f3cabcf2962c5309a7d80d71</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>hz2value</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7d2f47db78ba34272d2c6f33948b9ddd</anchor>
      <arglist>(float x) ASE_CONST</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>anklang_home_dir</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a92470dca73959925c5714ba36592ae73</anchor>
      <arglist>(const String &amp;subdir)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>anklang_runpath</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a85fe6b61a91ea6ed4b2fce9341fbbc71</anchor>
      <arglist>(RPath rpath, const String &amp;segment)</arglist>
    </member>
    <member kind="function">
      <type>const char *()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af43824d663045e1b37c5fc713adc782e</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>std::string()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af98ea2f6e812db590fadf19f1f2f3e12</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>const char *()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a30bc0283a50c3bbf41f1761ee09dacfe</anchor>
      <arglist>(const char *string, const char *plural, int64_t n)</arglist>
    </member>
    <member kind="function">
      <type>std::string()</type>
      <name>_</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac331306297162c7a8102dfbebe6bd9ff</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;plural, int64_t n)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>cpu_arch</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa5823f008c8a5544e1ed29a0df0329b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>cpu_info</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a14a67706c5cb1d768e3349efa222adcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_startup</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae70cf11ea189f56c2d5cd6bd39e0d396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_realtime</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aeefb757119c7bc86cfcb18164701a8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_resolution</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a05d8458ff812dffd7bf7bb1601c8ddca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>timestamp_benchmark</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3abac0482bc1b3fdce1652c6a32fcb12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>timestamp_format</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aefb18b02300e0074220ddeebcab80602</anchor>
      <arglist>(uint64 stamp, uint maxlength)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>monotonic_counter</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1dbbc5005e1b0c528f3e06cc472c326d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>executable_path</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3da654d2f99656fafe25793808a801cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>executable_name</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac273cfff748902c7f0e83929361ff35d</anchor>
      <arglist>() ASE_PURE</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_version</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab34f3aed637c04ddf8d1307328ed9bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_build_id</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afefdd17acdaab75f0841bfd1d1111964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>program_alias</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab314b0c86f8779f11a2b5d7fbec96050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>program_alias_init</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a57d2159097a87693c8ea92672f16029c</anchor>
      <arglist>(String customname)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>application_name</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1e379776d65d27e4ed2039c54357419f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>application_name_init</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5ca21538b4cd7015ca77c113b8a27e1f</anchor>
      <arglist>(String desktopname)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>program_cwd</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8fb4e4ca5a88892e1f109f7a6b67af63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sched_get_priority</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae261a2c1b2081a47fe4bdf9c242ea74d</anchor>
      <arglist>(int tid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sched_set_priority</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8b87f096a13c9c10e796329286046bad</anchor>
      <arglist>(int tid, int nicelevel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sched_fast_priority</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aaf8f27128866d5986f563586d76574a8</anchor>
      <arglist>(int tid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>breakpoint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ade6e7824de96e13de99d024ec65172d5</anchor>
      <arglist>() ASE_ALWAYS_INLINE</arglist>
    </member>
    <member kind="function">
      <type>CString</type>
      <name>register_audio_processor</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa4f21b1d6e7cc642b4aaf3a999e85de1</anchor>
      <arglist>(const char *aseid=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>property_guess_nick</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af9277c9733499fd0e111414ed92d42e1</anchor>
      <arglist>(const String &amp;property_label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_224_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a13176368fdd46ac409c5e4708afb660c</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[28])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_256_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a756a42d4d1b843484aa2129a33b40e3e</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[32])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_384_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4ee57941a32896d14684f20b70893dd1</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[48])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sha3_512_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8c1abae4f3fb203cfeb6b4ff8ca1ec73</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t hashvalue[64])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shake128_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac1d91a7d75244cde33b2f9362cbce2b7</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t *hashvalues, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shake256_hash</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a472196e35cb5f02e114a3921a0424cb6</anchor>
      <arglist>(const void *data, size_t data_length, uint8_t *hashvalues, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random_int64</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af2fa8ecc60f95c51343e451107eb79cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>random_irange</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a844c76d15994c3e534fa47fcb15602e4</anchor>
      <arglist>(int64_t begin, int64_t end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_float</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>acc2d8bc52fd999435c0681cb9483a79b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_frange</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adf37cb4931db47687e0651648411daef</anchor>
      <arglist>(double begin, double end)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random_nonce</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>abe75362e79c7e1e8d05c80f657ea4927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random_secret</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aff84fb3df612f02f6805bb7b7a245961</anchor>
      <arglist>(uint64_t *secret_var)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>json_stringify</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae324fb7ca92b2d7c313ecd8f3a5a6342</anchor>
      <arglist>(const T &amp;source, Writ::Flags flags=Writ::Flags(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>json_parse</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3754c784ff8d6c444059d8d4c68f8a5e</anchor>
      <arglist>(const String &amp;jsonstring, T &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>json_parse</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aff3fc36c0b3afa081b6616badc65c6ff</anchor>
      <arglist>(const String &amp;jsonstring)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>hz_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adc07310efd92730d29d339c492798d5b</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>voltage2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4ca5925a1c96faf96f0560de12869d1c</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_voltage2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1f59a72e6648644cf09fa73e713803f9</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>hz2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a71465d516c173df412f6956a2600194b</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_hz2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7231bdf9bff23de61c171ba8b406c35c</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>db_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6eab1298334dc6fd76e031d4310b040e</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>voltage2db</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae22215fe20252a0717082f4c793da4f3</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_voltage2db</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a1de0810d0502631404f16f055e20c6f6</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>db2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae7a6fac85ed40cddaa7e95194603661f</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fast_db2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a05c168b254058b3d3fc3a4222221a61b</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>voltage_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac4d103c11d35fe255e011e322f855d27</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>voltage2hz</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac1c4ef3e01d17015cf9cf483a05ffb92</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>hz2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a736a99f33821c5a77f099e1efbf64ee1</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>voltage2db</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aca820783d6c6f799fe95370cba305e4c</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>db2voltage</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aaf9ec17dfbef9df1f1e1530f60b49772</anchor>
      <arglist>(Float x)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>hz_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9f709308cbc3f71ca3dc5336152086fe</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>db_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a21cfa7f74638056e0d16c6ed277fd56c</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>ASE_CONST Float</type>
      <name>voltage_changed</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a87fb9da93f934cb8249570c02d237680</anchor>
      <arglist>(Float a, Float b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixed_sort</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa0d8446b6f8436daeeebfa63207282a2</anchor>
      <arglist>(RandomIt first, RandomIt last, Compare comp=std::less&lt; typename std::iterator_traits&lt; RandomIt &gt;::value_type &gt;())</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>anklang_cachedir_create</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a06c2ef9e0859b87364e091c67ddb3534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anklang_cachedir_cleanup</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adc42ba3f2b21f306aa48154fd8a398c8</anchor>
      <arglist>(const String &amp;cachedir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anklang_cachedir_clean_stale</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a922b8af9dc2d9554691bda58b7665238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_multiply</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac6e0fe294134776cdf2b3bab565f704f</anchor>
      <arglist>(const String &amp;s, uint64 count)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_identifier</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a059fc44a851265ab826404a5a085017f</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_canonify</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac879cb580c8208d885b7b627b524a162</anchor>
      <arglist>(const String &amp;string, const String &amp;valid_chars, const String &amp;substitute)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_is_canonified</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2d8b9e1966f0e7ba7fd3d1a961c0df97</anchor>
      <arglist>(const String &amp;string, const String &amp;valid_chars)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>string_set_a2z</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab70579ab773773d91669b6d994cfe87b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>string_set_A2Z</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>acaf3546176475ef1ebdbb2ccd0576f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>string_set_ascii_alnum</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8df97fbd9e33de169083049c100b98de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_tolower</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a36221e5318ced5a44a256988951988b8</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_toupper</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a51b498faaac090d4120734e232416a40</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_totitle</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a279fc44a9dc6e42a62d7233616f9ea43</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_capitalize</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a48a9816eec56a6896cff689a480e0d04</anchor>
      <arglist>(const String &amp;str, size_t maxn, bool rest_tolower)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab97e2203756658ff9f944941fbc5e0dd</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfd</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a55d3a75caca8101885f9778bb0fa6b76</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfkc</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9fb06f38f35a111e93f51aae3f48b2c4</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_normalize_nfkd</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab9703c687fb347d3475108fd83ea966e</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_casefold</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a14221d6445104558d382ca61347bfe35</anchor>
      <arglist>(const String &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>string_cmp</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0ad2ab23f2678d1c1fbe410d3122beae</anchor>
      <arglist>(const String &amp;s1, const String &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>string_casecmp</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5de0bdf98eb07faebd2b6fc706e4eec6</anchor>
      <arglist>(const String &amp;s1, const String &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_vprintf</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2b1ff7fb9f0a2cf85aae28ead9ccd673</anchor>
      <arglist>(const char *format, va_list vargs)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_locale_vprintf</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afcea6886e39c04f29d2f2210bfe6095d</anchor>
      <arglist>(const char *format, va_list vargs)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>string_split</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2ae18de3555c96ee06bbfae23e55ce2a</anchor>
      <arglist>(const String &amp;string, const String &amp;splitter, size_t maxn)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>string_split_any</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9489e8e8e39c245c9dcd2a2a9ec8e98e</anchor>
      <arglist>(const String &amp;string, const String &amp;splitchars, size_t maxn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_erase_empty</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7fd8ed2f331b81acd491013f6e7bcb9f</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_lstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af2167ef51caff75f7635195cef2bb6ad</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_rstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac3f18371b872dbde3bd9bc892be7928f</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_vector_strip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aab202bb063b32d439408d631a8d0047e</anchor>
      <arglist>(StringS &amp;svector)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_join</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2308b9afb0ff1221603a500a52e708fe</anchor>
      <arglist>(const String &amp;junctor, const StringS &amp;strvec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_to_bool</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac2ea08493c818758f33792cb9c9b0c45</anchor>
      <arglist>(const String &amp;string, bool fallback)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_bool</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>acc252ba770f7fdac5f4eef00e47bd02b</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>string_to_uint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aafb19c411791b792cd94d8c4f80d86a5</anchor>
      <arglist>(const String &amp;string, size_t *consumed, uint base)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_uint</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6be918cec912ea33c5e9647856b18bba</anchor>
      <arglist>(uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_has_int</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab953202162535d1d769f4b073e08db56</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>string_to_int</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a929109484e359285ddc8a33e746486c4</anchor>
      <arglist>(const String &amp;string, size_t *consumed, uint base)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_int</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a640ef72b4647ae0c21ef1ec921f581c7</anchor>
      <arglist>(int64 value)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>posix_locale_strtold</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a80a78725e7e8df58429f1b8fca0acca7</anchor>
      <arglist>(const char *nptr, char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>current_locale_strtold</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac82abaa4e5a5f6f48035c7c56f53c8a0</anchor>
      <arglist>(const char *nptr, char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>string_to_long_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8e0f780a57ce2723173a4a035a6af940</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>string_to_long_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a18a6b9d2b81eb8f464a0dd46414f5580</anchor>
      <arglist>(const char *dblstring, const char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>string_to_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab05d3cbb51f5fbea6eea29909919d7ef</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>string_to_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a52b13fdc0ffe52dda2a593dd6a7cb307</anchor>
      <arglist>(const char *dblstring, const char **endptr)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_float</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aeee40af2c2179d445a58dbd5ccf88566</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3226308fc4541ee90bf1ccfbd65903c3</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_long_double</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3086a9a5db9a2c53ed5ae39d14a9222a</anchor>
      <arglist>(long double value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>string_to_double_vector</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a06aa1dd852e27b2ba8c181b1d2bd799a</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_double_vector</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7abd22e8f861206c7d676c2f251c2cce</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;dvec, const String &amp;delim)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>string_to_seconds</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a86fa39b3fcd73679051f40e1b644ff73</anchor>
      <arglist>(const String &amp;string, double fallback)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_errno</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0d2edaba6b0ebebb517d0a82919866ce</anchor>
      <arglist>(int errno_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_is_uuid</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2339b1f8764d04f9b50e7ccf7ea80641</anchor>
      <arglist>(const String &amp;uuid_string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>string_cmp_uuid</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a56287c6209f7b222d31b0ea9009ccd5f</anchor>
      <arglist>(const String &amp;uuid_string1, const String &amp;uuid_string2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_startswith</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>afea299292f6fc8e3958dfbc1e07217bd</anchor>
      <arglist>(const String &amp;string, const String &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_endswith</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ada811b3e347a1b626feee18985792d8e</anchor>
      <arglist>(const String &amp;string, const String &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_match_identifier_tail</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3ecb71eb25317b14c7ac82163268a109</anchor>
      <arglist>(const String &amp;ident, const String &amp;tail)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_match_identifier</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae0f73fbdfa3588f40364f1024954e62c</anchor>
      <arglist>(const String &amp;ident1, const String &amp;ident2)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_pretty_function_name</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a859cf0ee2e5294f424038c1b03d226bb</anchor>
      <arglist>(const char *cxx_pretty_function)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_url_decode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aacb16d3811ad8bbd41e2e995f0d4fafd</anchor>
      <arglist>(const String &amp;urlstr, const bool form_url_encoded)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_url_encode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad750f0b79d820c0e82a241365c9cbf1d</anchor>
      <arglist>(const String &amp;rawstr, const bool form_url_encoded)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_cescape</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af7f632e065dd2ed28d8d41f0ae8bf219</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_cquote</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae27dccf50df9fd35f7c817bd61aee2eb</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_cquote</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0b172cbfb257f99ad9bdecf7afcd85a7</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_lstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3f15750c2657a21f750d01e449fadb06</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_rstrip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4a7abecf2cfce78fd2fccd5b5b788ae7</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_strip</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aca58814757564f0347e65873a7666396</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_replace</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9358758940a1dca8a2fdf24f1db66075</anchor>
      <arglist>(const String &amp;input, const String &amp;marker, const String &amp;replacement, size_t maxn)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_substitute_char</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>adb0b3a4141998fc698827ddd45e90d4c</anchor>
      <arglist>(const String &amp;input, const char match, const char subst)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_to_hex</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a30e73232aa4f8f8334196686be3263bb</anchor>
      <arglist>(const String &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_hexdump</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2c5a8c2c59882690d843c7f87c596769</anchor>
      <arglist>(const void *addr, size_t length, size_t initial_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memset4</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af3a2aa3c0485e597bd9c04fe44ef393b</anchor>
      <arglist>(uint32 *mem, uint32 filler, uint length)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_vector_find</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac2144f2685390019388c15712928eb52</anchor>
      <arglist>(const StringS &amp;svector, const String &amp;prefix, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_vector_find_value</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a49d15a9a98680986124d73a97a49a4c4</anchor>
      <arglist>(const StringS &amp;svector, const String &amp;prefix, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>cstrings_to_vector</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8889e1663833404fd023f9eac7808c53</anchor>
      <arglist>(const char *s,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_options_split</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a75e2d0a36fed8f364df722cabf416df7</anchor>
      <arglist>(const String &amp;option_string, std::vector&lt; String &gt; &amp;option_names, std::vector&lt; String &gt; &amp;option_values, const String &amp;empty_default)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_option_get</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aba4acf4a89b9c88811339143268c4e78</anchor>
      <arglist>(const String &amp;option_string, const String &amp;option)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>string_option_check</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa9914cc83579ad0c0912c96190b6b939</anchor>
      <arglist>(const String &amp;option_string, const String &amp;option)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_option_find</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6f970bb6447d1e33dedc171b82412e99</anchor>
      <arglist>(const String &amp;config, const String &amp;feature, const String &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>text_convert</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae180af13795b4e6a2b66f80422b717ca</anchor>
      <arglist>(const String &amp;to_charset, String &amp;output_string, const String &amp;from_charset, const String &amp;input_string, const String &amp;fallback_charset, const String &amp;output_mark)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>string_to_type</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a28b012e3752bebd58b981c41d47c44fb</anchor>
      <arglist>(const String &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>string_from_type</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>af06e887cc61099edfa0d33f4fc385e6b</anchor>
      <arglist>(Type value)</arglist>
    </member>
    <member kind="function">
      <type>ASE_NOINLINE String</type>
      <name>string_format</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3ae809e6556ad2e960eba9abf672ef7f</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>ASE_NOINLINE String</type>
      <name>string_locale_format</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0fa1d7121b1e6228a6697f5a2c023619</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8len</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a391cafaef71403f7f074c8c3a106db7a</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8len</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a98183669e6d8ce9fd8bf62cb8a1feeb4</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_to_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a5f920a7a83b1221b3ed8e1fc0baab297</anchor>
      <arglist>(const char *str, uint32_t *codepoints)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>utf8_to_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a77be81d3c82c6d88047f4cb0fcc8407b</anchor>
      <arglist>(const std::string &amp;str, std::vector&lt; uint32_t &gt; &amp;codepoints)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_from_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a8056a2fbbef76c711165491bdd11e16b</anchor>
      <arglist>(const uint32_t *codepoints, size_t n_codepoints)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string_from_unicode</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a281b2d33ab9b2cc6e1859b0dac02a214</anchor>
      <arglist>(const std::vector&lt; uint32_t &gt; &amp;codepoints)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_valid</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aa23867476ae3528d3303912167a99c2d</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_assigned</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac100b73194ba2d988ca7355e4ea7a708</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_noncharacter</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a4d33cc1f67dd1ed599133b5efbec5097</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_character</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a71c59b4f301a345efb0e12ff7c26a621</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_control_code</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ace50dcc7eae6bd882b176e73a4d5be9d</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>unicode_is_private</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2a79e07a7fb3efe31c346e6725a2bc94</anchor>
      <arglist>(uint32_t u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>debug_key_enabled</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0b14f3cca8ca79acca271ef44b19c58a</anchor>
      <arglist>(const char *conditional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>debug_key_enabled</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a74089829ea1c73bab9a636bd6663f3a4</anchor>
      <arglist>(const ::std::string &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type>::std::string</type>
      <name>debug_key_value</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ac7324249103005ab4d9f44044ba82fe5</anchor>
      <arglist>(const char *conditional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_message</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ab2c9ed044d5fc53a5bf9ce76ef7a32f7</anchor>
      <arglist>(const char *cond, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diag_message</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9153a47e8bd43bd6f0ff86b09087101c</anchor>
      <arglist>(uint8 code, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>debug_enabled</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a449f9f0261ac34122894181007a4ba00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint16_t</type>
      <name>uint16_swap_le_be</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6f250966a9daae78644b80b2003ab0d2</anchor>
      <arglist>(uint16_t v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint32_t</type>
      <name>uint32_swap_le_be</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a38c2043ec3606cc8ba7001fe3f4d4867</anchor>
      <arglist>(uint32_t v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint64_t</type>
      <name>uint64_swap_le_be</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a02173097b7b0b14bbf10bd6ce9c2da02</anchor>
      <arglist>(uint64_t v)</arglist>
    </member>
    <member kind="function">
      <type>void ASE_ALWAYS_INLINE</type>
      <name>debug</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a61b561c542489e33cb7b2d58f60fde55</anchor>
      <arglist>(const char *cond, const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void ASE_NORETURN</type>
      <name>fatal_error</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a6ef4f00d068ceeaa4b381278207a951b</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a825310c84f3383e6a469473b64cef277</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printout</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a9452c7c415289ab34701fe967066f231</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printerr</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a34b15b028f6d5b00f8c7f4473e8334ab</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ase_gettext</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ae3dff757c1da35c05447a368e23d4105</anchor>
      <arglist>(const char *format, const Args &amp;...args)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const uint</type>
      <name>MIDI_NOTE_ID_FIRST</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a577e1c76ca5d824638c2747072798b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr const uint</type>
      <name>MIDI_NOTE_ID_LAST</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a541a1a544b7ff74a13d00bf2bc15ed87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>const_float_zeros</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a3504762f1994b645a2309e31f61e4162</anchor>
      <arglist>[AUDIO_BLOCK_FLOAT_ZEROS_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const uint</type>
      <name>AUDIO_BLOCK_FLOAT_ZEROS_SIZE</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a0b280adca55537bf1c7e64f4c5cb84fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JobQueue</type>
      <name>main_jobs</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a2f3ecd5810f2c4c41e346e6dfadf77c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const float *const</type>
      <name>cent_table</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a28f725df4864bc417da13f78a6de9dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const float *const</type>
      <name>semitone_tables_265</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a7a1d6c78105b5d3f54bf7a1ce5668f6e</anchor>
      <arglist>[17]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr const double</type>
      <name>DOUBLE_EPSILON</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>aee191c362fc0cd461a80185c0e8348a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>cached_hash_secret</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a706e8476b7afd2db649ba384e323e3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr const int64</type>
      <name>TRANSPORT_PPQN</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>ad3d8f1c1422ee7cde11b909b034611aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ase_debugging_enabled</name>
      <anchorfile>namespace_ase.html</anchorfile>
      <anchor>a923849733301af1eeeedabacab79582a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase::AnsiColors</name>
    <filename>namespace_ase_1_1_ansi_colors.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Colors</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a493dc5f6dd00a1765e285e719d983798</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESET</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a493dc5f6dd00a1765e285e719d983798a1643067634d8770e7f37416bd5d49249</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a59fc9e1dbebc8ce0d60c3536e5307e14</anchor>
      <arglist>(Colorize colorize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>colorize_tty</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a6a89cc28c179501965e953caaed7ada3</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>a1127400b949fb52d6c4925010add9497</anchor>
      <arglist>(Colors acolor, Colors c1, Colors c2, Colors c3, Colors c4, Colors c5, Colors c6)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>color_code</name>
      <anchorfile>namespace_ase_1_1_ansi_colors.html</anchorfile>
      <anchor>ac0da0311265e8d09e51a2558a8eecbd3</anchor>
      <arglist>(Colors acolor)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase::Aux</name>
    <filename>namespace_ase_1_1_aux.html</filename>
    <member kind="function">
      <type>Container</type>
      <name>container_copy</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a388adb617c327019ee771ef268bc8a20</anchor>
      <arglist>(const Iteratable &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; RandIter, bool &gt;</type>
      <name>binary_lookup_insertion_pos</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>aaabfe1401ee3cf7819e951165fd9c48b</anchor>
      <arglist>(RandIter begin, RandIter end, Cmp cmp_elements, const Arg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>RandIter</type>
      <name>binary_lookup_sibling</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a5df8dde769903d08215110e09b5c8d5c</anchor>
      <arglist>(RandIter begin, RandIter end, Cmp cmp_elements, const Arg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>RandIter</type>
      <name>binary_lookup</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>aa5311324421ec76f4ed56f527526f887</anchor>
      <arglist>(RandIter begin, RandIter end, Cmp cmp_elements, const Arg &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase_first</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>aa1b36a8abe26afec664bb7664edbaef2</anchor>
      <arglist>(C &amp;container, const std::function&lt; bool(typename C::value_type const &amp;value)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase_all</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a7a9087c3ad5d4874ee74596d9e6b3a49</anchor>
      <arglist>(C &amp;container, const std::function&lt; bool(typename C::value_type const &amp;value)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>ac726855c456606dd54fd0e59d0395e62</anchor>
      <arglist>(const C &amp;container, const std::function&lt; bool(typename C::value_type const &amp;value)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>insert_sorted</name>
      <anchorfile>namespace_ase_1_1_aux.html</anchorfile>
      <anchor>a2de3c2490a16c9223b7b0577eb84e8e4</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;vec, const T &amp;value, Compare compare)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase::FastMemory</name>
    <filename>namespace_ase_1_1_fast_memory.html</filename>
    <class kind="struct">Ase::FastMemory::Arena</class>
    <class kind="struct">Ase::FastMemory::Block</class>
    <class kind="struct">Ase::FastMemory::HugePage</class>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>cache_line_size</name>
      <anchorfile>namespace_ase_1_1_fast_memory.html</anchorfile>
      <anchor>a8fc40045a42c8e7ab0cad30c371d8bdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase::Lib</name>
    <filename>namespace_ase_1_1_lib.html</filename>
    <class kind="class">Ase::Lib::KeccakF1600</class>
    <class kind="class">Ase::Lib::ScopedLocale</class>
    <class kind="class">Ase::Lib::ScopedPosixLocale</class>
    <class kind="class">Ase::Lib::StringFormatter</class>
  </compound>
  <compound kind="namespace">
    <name>Ase::Loft</name>
    <filename>namespace_ase_1_1_loft.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>namespace_ase_1_1_loft.html</anchorfile>
      <anchor>ad510d53c222928754af144145247a08f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase::MidiLib</name>
    <filename>namespace_ase_1_1_midi_lib.html</filename>
    <class kind="struct">Ase::MidiLib::MidiFeed</class>
  </compound>
  <compound kind="namespace">
    <name>Ase::Path</name>
    <filename>namespace_ase_1_1_path.html</filename>
    <member kind="function">
      <type>String</type>
      <name>dirname</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a62082b824724e9de16ab46e9e9537736</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>basename</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a376e6f975c49cc2ca4dc912a34bde424</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>normalize</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>af7ef507a5cf70f0e4e22a272adc330ca</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>realpath</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a31da5fadeffe6501535453fec6c8ffb7</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>dir_terminate</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8aab42d7c2c422981839db5cde9487c4</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>strip_slashes</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a9116dbc081986909f42e98f9b20feae8</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>abspath</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ab2aeb6d74e9de675a6fc0fa72ea925cb</anchor>
      <arglist>(const String &amp;path, const String &amp;incwd)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isabs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ad2deaf982ff582c6582daf94708e16d6</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdirname</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8cc52333c0e00cc5c8719d8f33530989</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mkdirs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a7351e12e1598eacace8cdf40b2cd2d3b</anchor>
      <arglist>(const String &amp;dirpath, uint mode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dircontains</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae0e627fc6b962984d87f25c6ff07f847</anchor>
      <arglist>(const String &amp;dirpath, const String &amp;descendant, String *relpath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rmrf</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ac8f33198f4cdc00d028587ea27325b8e</anchor>
      <arglist>(const String &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_file</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ad2634e67be8dda43c0f38a7efb05f675</anchor>
      <arglist>(const String &amp;src, const String &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>user_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a02f001c5b8177e75708a121d0811ce83</anchor>
      <arglist>(const String &amp;username)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>data_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aa049ab9eb407df0b18477cf18273445e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>config_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a47051c07734c31523613276c6dbf2530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>cache_home</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aa5a944be73c4621beb917c1a2f288426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>runtime_dir</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ab03fb8a272e2f87c46fb962b9b76838a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>config_dirs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a13813b973670786f1d12ee36ab62145a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>data_dirs</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae08f8e7312171fcc1482df6e3d546d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>config_names</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a263aa97c18fed3538904cd40ada4fd38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>config_names</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a21f41bdab5c8b372ae47ed6717d3b5e1</anchor>
      <arglist>(const String &amp;names)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>expand_tilde</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8a29d2ff12ad4b4bea1587386bf28274</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>file_size</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ad024d1fc4211baaea9bfee77c72e854e</anchor>
      <arglist>(const String &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a846caddfde09e0e00e077b66cdce9d4e</anchor>
      <arglist>(const String &amp;file, const String &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8a4942db8fd85e2424f87ef147593704</anchor>
      <arglist>(const String &amp;file1, const String &amp;file2)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>cwd</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a070d18887c8f71ab9f117f9311cae597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchpath_contains</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a0c71d533ac3b59091afa34e8774a0a28</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>searchpath_find</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ab04374f3984470edcc65ed2e28e4b39a</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;file, const String &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>StringS</type>
      <name>searchpath_list</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aeec9ff4aca4a4050707d89e608fdbe9e</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>join_with</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>aab4deb4ea93c29f2ca0e40972b0e167b</anchor>
      <arglist>(const String &amp;head, char joiner, const String &amp;tail)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>searchpath_multiply</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a667dad32e6ea768c098c2d66d8ced881</anchor>
      <arglist>(const String &amp;searchpath, const String &amp;postfixes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glob</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae69d5479618ca0550534f82afa4e324d</anchor>
      <arglist>(const String &amp;pathpattern, StringS &amp;matches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rglob</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>ae5c3730ed4e6a4f5d6f6da17940cee68</anchor>
      <arglist>(const String &amp;basedir, const String &amp;pattern, StringS &amp;matches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unique_realpaths</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a1d138d85fa47a659a9a6f44a26350c17</anchor>
      <arglist>(StringS &amp;pathnames)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>simplify_abspath</name>
      <anchorfile>namespace_ase_1_1_path.html</anchorfile>
      <anchor>a8c8a21f5143a79dbf8931d46d82c3566</anchor>
      <arglist>(const std::string &amp;abspath_expression)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase::Properties</name>
    <filename>namespace_ase_1_1_properties.html</filename>
    <class kind="class">Ase::Properties::Bag</class>
    <member kind="function">
      <type>String</type>
      <name>construct_hints</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a3c429cb505d3fd8c889a246c942b1a97</anchor>
      <arglist>(const String &amp;hints, const String &amp;more, double pmin=0, double pmax=0)</arglist>
    </member>
    <member kind="function">
      <type>PropertyImplP</type>
      <name>mkprop</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a1649118f6abbe14804d562aca317aa1b</anchor>
      <arglist>(const Initializer &amp;initializer, const ValueGetter &amp;, const ValueSetter &amp;, const ValueLister &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Bool</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a50db48e817778744387e0e20986fe3f0</anchor>
      <arglist>(const String &amp;ident, bool *v, const String &amp;label, const String &amp;nickname, bool dflt, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a19e2195538234a1099ab5ef37253e888</anchor>
      <arglist>(const String &amp;ident, const ValueGetter &amp;getter, const ValueSetter &amp;setter, const String &amp;label, const String &amp;nickname, double pmin, double pmax, double dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a4182a9b9840416bf15bdfc1cd87de39d</anchor>
      <arglist>(const String &amp;ident, int32 *v, const String &amp;label, const String &amp;nickname, int32 pmin, int32 pmax, int32 dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>ac06ab0d35e1682aa49606a52edb1b8f8</anchor>
      <arglist>(const String &amp;ident, float *v, const String &amp;label, const String &amp;nickname, double pmin, double pmax, double dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Range</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a6dd0cad54a93cfa29314a9b4c1ce8c06</anchor>
      <arglist>(const String &amp;ident, double *v, const String &amp;label, const String &amp;nickname, double pmin, double pmax, double dflt, const String &amp;unit=&quot;&quot;, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Text</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a7cbd144d927316c29bdf4a1e5bab4a8c</anchor>
      <arglist>(const String &amp;ident, String *v, const String &amp;label, const String &amp;nickname, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Text</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a23180193581eaf2875e2281c9ea6c67b</anchor>
      <arglist>(const String &amp;ident, String *v, const String &amp;label, const String &amp;nickname, const ValueLister &amp;vl, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PropertyP</type>
      <name>Enum</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>a8907ce27b1f0ab29d962b09c3a9fa07c</anchor>
      <arglist>(const String &amp;ident, E *v, const String &amp;label, const String &amp;nickname, const String &amp;hints=&quot;&quot;, const String &amp;blurb=&quot;&quot;, const String &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ValueGetter</type>
      <name>Getter</name>
      <anchorfile>namespace_ase_1_1_properties.html</anchorfile>
      <anchor>aa96b7f7c7b4b3da2e4f5c9ea76a77659</anchor>
      <arglist>(const V *p)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ase::Test</name>
    <filename>namespace_ase_1_1_test.html</filename>
    <class kind="class">Ase::Test::Timer</class>
    <member kind="function">
      <type>bool</type>
      <name>slow</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>ae9b63de19c75bc567541db80d5cb152e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a83d9d2a438950e7b41cf1b77bccf205d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>random_int64</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a8c54e36a0b1eb6aaceb94c8b95b0b87f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>random_irange</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a877cef3bc3a0291ef8788a767424e0c0</anchor>
      <arglist>(int64_t begin, int64_t end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_float</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>aad18e3bd929333195a067dc48d57984e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>random_frange</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>abd3e28a2bef2935f9d692d6335f53c65</anchor>
      <arglist>(double begin, double end)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a40cfc957d4082b81ad38e14613c9c574</anchor>
      <arglist>(const StringS &amp;test_names)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>a99970e9c9930087bb4fb56fc0fd13e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>stringify_arg</name>
      <anchorfile>namespace_ase_1_1_test.html</anchorfile>
      <anchor>aa7e77497691e4302963f22aa09da7820</anchor>
      <arglist>(const char *a, const char *str_a)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md_NEWS</name>
    <title>Anklang Release NEWS</title>
    <filename>md__n_e_w_s.html</filename>
  </compound>
  <compound kind="page">
    <name>eventloops</name>
    <title>Event Loops and Event Sources</title>
    <filename>eventloops.html</filename>
  </compound>
  <compound kind="page">
    <name>md_ui_ch_scripting</name>
    <title>Anklang Scripting</title>
    <filename>md_ui_ch_scripting.html</filename>
  </compound>
  <compound kind="page">
    <name>md_ui_b_ch_vue</name>
    <title>Vue Component Reference</title>
    <filename>md_ui_b_ch_vue.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Anklang v0.1.0-devel0-shallow-gdc2f640</title>
    <filename>index.html</filename>
    <docanchor file="index.html">md_home</docanchor>
  </compound>
</tagfile>
